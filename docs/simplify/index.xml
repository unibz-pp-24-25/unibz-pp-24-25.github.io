<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simplifying code on Programming project 2024-25</title>
    <link>http://localhost:35131/docs/simplify/</link>
    <description>Recent content in Simplifying code on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:35131/docs/simplify/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Factorizing</title>
      <link>http://localhost:35131/docs/simplify/sections/factorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35131/docs/simplify/sections/factorization/</guid>
      <description>&lt;h1 id=&#34;factorizing&#34;&gt;&#xA;  Factorizing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#factorizing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;duplicate&#34;&gt;&#xA;  Duplicate code&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#duplicate&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Duplicate_code&#34;&gt;Duplicate code&lt;/a&gt; within a same project has undesirable consequences.&#xA;In particular:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Duplicate code means &lt;em&gt;duplicate bugs&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The application may be harder to extend: adding a new feature may require modifying several nearly identical copies of the same method and/or class.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;factorizing-1&#34;&gt;&#xA;  Factorizing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#factorizing-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;By &lt;strong&gt;code factorization&lt;/strong&gt;, we mean eliminating duplicate statements or expressions, by analogy to the factorization of an algebraic expression (e.g. $(ab) + (ac)$ can be rewritten $a(b+c)$).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Break statements and flags</title>
      <link>http://localhost:35131/docs/simplify/sections/break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35131/docs/simplify/sections/break/</guid>
      <description>&lt;h1 id=&#34;break-statements-and-flags&#34;&gt;&#xA;  Break statements and flags&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#break-statements-and-flags&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A method with multiple boolean flags can be complex to read and/or debug, in particular when combined with &lt;code&gt;break&lt;/code&gt; and/or &lt;code&gt;continue&lt;/code&gt; statements.&lt;/p&gt;&#xA;&lt;p&gt;This can usually be avoided:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;using return statements (possibly with auxiliary functions), and/or&lt;/li&gt;&#xA;&lt;li&gt;(in Java) using streams with &lt;code&gt;anyMatch&lt;/code&gt;, &lt;code&gt;allMatch&lt;/code&gt; or &lt;code&gt;findFirst&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-tabs&#34;&gt;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-exercise_break&#34; id=&#34;tabs-exercise_break-0&#34; checked=&#34;checked&#34; /&gt;&#xA;&lt;label for=&#34;tabs-exercise_break-0&#34;&gt;Exercise&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;p&gt;Rewrite the following Java method:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;without boolean flag and&lt;/li&gt;&#xA;&lt;li&gt;without &lt;code&gt;break&lt;/code&gt; statement.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Returns true iff each of the input lists contains a number &amp;gt; 20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; lists) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; flag1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; flag2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list : lists) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Integer value : list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 20) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                flag2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;flag2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            flag1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flag1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-exercise_break&#34; id=&#34;tabs-exercise_break-1&#34;  /&gt;&#xA;&lt;label for=&#34;tabs-exercise_break-1&#34;&gt;Solution 1&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;p&gt;With an auxiliary method:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boolean conditions</title>
      <link>http://localhost:35131/docs/simplify/sections/boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35131/docs/simplify/sections/boolean/</guid>
      <description>&lt;h1 id=&#34;boolean-conditions&#34;&gt;&#xA;  Boolean conditions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#boolean-conditions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A complex boolean sub-expression in the scope of a negation can be difficult to read and/or debug.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&#xA;The two following expressions are equivalent (but the latter is arguably easier to read):&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\neg(\neg(a \lor b) \land \neg (\neg c \lor d))&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;a \lor b \lor \neg c \lor d&#xA;$$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;simplification&#34;&gt;&#xA;  Simplification&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#simplification&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;In a Boolean expression, negations can always be &amp;ldquo;pushed&amp;rdquo; inside parentheses, as follows:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
