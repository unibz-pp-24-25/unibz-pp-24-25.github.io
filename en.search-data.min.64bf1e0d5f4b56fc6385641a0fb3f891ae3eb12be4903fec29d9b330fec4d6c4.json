[{"id":0,"href":"/docs/objects/sections/objects/","title":"Objects","section":"Objects and classes","content":" Objects # An object groups data in a meaningful way.\nA simple example: JSON objects # Here is a JSON object (in Javascript syntax) that describes the city of Florence:\n{ name: \u0026#34;Florence\u0026#34;, zipcode: 50100 } A JSON object may contain other objects, as well as arrays (of values, objects or arrays). For instance:\n{ name: \u0026#34;Alice\u0026#34;, age: 26, birthPlace: { name: \u0026#34;Florence\u0026#34;, zipcode: 50100 }, jobs: [ { employer: \u0026#34;Kolping\u0026#34;, start: 2021, end: 2022 }, { employer : \u0026#34;Eurac\u0026#34;, start: 2023 } ] } In JSON:\nan element can be either: a scalar (e.g. an integer), or an array of elements, or an object, an object is a finite set of key-value pairs, where keys are distinct, and each value is an element. Besides, a JSON element must have finite depth.\nEquivalently, a JSON object can be viewed as a function (with finite domain) that maps keys to JSON elements.\nObjects and programming languages # JSON objects do not exactly correspond to the objects that can be created in Java (and many other programming languages). We highlight here two important differences.\nTypes # Exercise Find a JSON object that satisfies the above description but cannot be represented as an object in a (strongly) typed language such as Java, C++, C#, etc.\nPossible solution { key: [1, \u0026#34;a\u0026#34;]; } In a typed language (like Java), the elements of an array must be of the same type.\nThis is not required in Javascript, Python, etc.\nReferences # A Java (or Python, C#, etc.) object does not contain objects or arrays, but references to objects or arrays. For instance, the equivalent in Java of the above object may be pictured as follows (abusing notation):\n_1: { name: _2, age: 26, birthPlace: _3, jobs: _4, } _2: [\u0026#39;A\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _3: { name: _5, zipcode: 50100 } _4: [ _6, _7 ] _5: [\u0026#39;F\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;r\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _6: { employer: _8, start: 2021, end: 2022 } _7: { employer: _9, start: 2023 } _8: [\u0026#39;K\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;p\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;g\u0026#39;] _9: [\u0026#39;E\u0026#39;,\u0026#39;u\u0026#39;,\u0026#39;r\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;c\u0026#39;] Each object or array has an ID (e.g. _1 in this example), which can be used to refer to it (you can think of this ID as an address in memory).\nAs a consequence, some objects can be created in Java that have no (finite) representation in JSON.\nExercise Find one of these objects.\nPossible solution _1: { name: _2, friends: _3 } _2: [\u0026#39;A\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _3: [ _4, _7 ] _4: { name: _5, friends: _6 } _5: [\u0026#39;B\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;b\u0026#39;] _6: [ _1, _8 ] If we try to represent these objects in JSON, we get (assuming that we start with Alice):\n{ name: \u0026#34;Alice\u0026#34;, friends: [ { name: \u0026#34;Bob\u0026#34;, friends: [ { name: \u0026#34;Alice\u0026#34;, friends: [ ... ]}]}]} Cyclic references (like in this exercise) naturally occur in object-oriented code. Identifying them may be essential to debug a program that does not terminate or runs out of memory (stack overflow, \u0026hellip;).\n"},{"id":1,"href":"/docs/project/sections/free_project/","title":"Option 1: free project","section":"Project","content":" Option 1: free project # The first possible type of group projects is for students to develop a Java application of their choice.\nThis application is only a prototype, so it does not need a comprehensive list of features or functionalities.\nThe evaluation of the project will be mostly based on its backend (rather than the frontend). This means that the application:\ndoes not need a graphical user interface (but may have one), should perform non-trivial backend task(s) (e.g. writing and/or reading to/from files is not sufficient). Guidelines # Motivation # A good projects is driven by an idea.\nFeel free to design your application so that it matches your own interests. For instance:\nrelate it to a hobby (music, cinema, fashion, sport, games, social media, astronomy, etc.), use the project as an opportunity to explore a topic that you are curious about (natural language processing, computer vision, recommender systems, robotics, etc.), develop a functionality that one of your favorite applications is missing. Do not hesitate to be ambitious at first. You can restrict the scope of your project (to certain features or components) later on.\nSpecification # A frequent source of failure for this course is students focusing on tools (e.g. following tutorials) without having a precise objective. The short deadline (June 2025) does not give you this flexibility. Besides, without a precise objective, the amount of libraries that are available to you (especially in Java) can be overwhelming.\nSo we recommend you to clarify what your application should do, before thinking about how you could implement it. In other words, specify which problem(s) (i.e. input and expected output) your program and/or components should solve. Then only think about algorithms, libraries, tools and/or tutorials that can help you solve these problems.\nIn order to determine whether your specification is precise enough, you may check whether it leaves some doubt as to whether an output is correct or not.\nUser interface # Developing a Graphical User Interface (GUI) requires familiarity with a graphical framework. Learning the details of such a framework (terminology, syntax, setup, etc.) can be an important time investment, and this knowledge may not transfer to other graphical frameworks. In other words, developing a GUI may not require lot of thinking, but a lot of reading (and web browsing).\nBeware also that GUIs technologies are still rapidly evolving, and that recent innovation has largely been driven by web development. So learning a graphical framework for Java may not be a strategic investment of your time (compared to learning a Javascript framework like React or Angular). Note that even desktop and mobile applications are increasingly relying on web technologies for their GUIs (thanks to frameworks like Electron or React Native).\nThis is why we recommend you to think carefully before committing to a Java GUI, and to keep it minimal if you do. Note also that we will not evaluate your project based on aesthetic criteria.\nSo in order to design your interface, you may follow the following guidelines:\nAsk yourself whether your application really needs a GUI. A command-line interface (CLI) may be sufficient, because: your program takes files as input and produces files as output, or your program is (primarily) meant to be used by other programs (rather than human beings), or your program is meant to be used by other developers, or external programs with GUIs (such as IDEs) can easily call your application, or you leave the GUI for future work (again, your application is just a prototype), etc. If you really need a GUI, then: decouple frontend and backend (whenever possible), so that the backend could be used with another frontend, and conversely. Many applications accessible via GUI have a natural decoupling of frontend and backend. Example. Consider an application that allows booking hotel rooms. The backend takes as input some data (e.g. number or guests, arrival date, departure date, duration, etc.), and outputs data as well (available rooms, prices, etc.). These input and outputs are objects, integers, strings, etc. They do not depend on a specific GUI (windows, menus, buttons, fields, etc.).\nExample. Even for some games, frontend and backend can easily be decoupled. Consider for instance a program that plays chess against a human opponent. The backend:\nkeeps track of the current state of the board, takes as input either a move from the white player, or a request to play as the (bot) black player, outputs the next state of the board. These input and output do not depend on a specific GUI (they can for instance be encoded using algebraic notation). So the backend can be implemented without any reference to graphical elements or controller inputs (mouse clicks, etc.).\ndevelop the backend first (and write unit tests for it),\ndevelop the frontend afterwards (if you have time for it).\nIf you really need a GUI, then try to keep it minimal. In particular, restrict the input to what is essential for your application (the more freedom the user is given, the more likely he/she is to input a sequence of actions that your program cannot handle). Illustrations # Here are some examples of (past and imaginary) possible projects:\na program that detects texts generated by a large language model, a program that takes as input a dataset of Tweets and identifies communities and/or influencers based on the network formed by re-tweets, a program that retrieves news articles about an input topic (using web APIs), and analyses their polarity (via sentiment analysis) together with their provenance (news outlet, country, etc.), a (toy) recommender system, a program that generates (solvable) sudoku grids with different sizes and/or level of difficulty, a game to help people improve their typing speed, a web crawler that retrieves sport-related statistics from various websites and exposes them via a web API, a classroom reservation system for the Unibz that can computes a default schedule for a whole semester, satisfying a set of constraints (room capacity, etc.) and/or preferences (minimize days of presence per week of a same group, etc.), a flashcard app that incorporates answers produced by a chatbot, an (Obsidian-like) note management application, a program to organize and manage coding contests (similar to this one), a password manager (with encryption), for instance similar to pass, where password update and synchronization are performed via git, a program that analyzes the commit and/or branching history of a git repository (e.g. contributions of the different users, frequency of commits, percentage of preserved code, etc.). "},{"id":2,"href":"/docs/intro/sections/schedule/","title":"Schedule","section":"This course","content":" Schedule # The course consists of 60 hours of lectures and 30 hours of labs.\nLectures # By default, lectures are scheduled:\nMonday 13:30 - 15:30 Tuesday 08:30 - 10:30 Wednesday 08:30 - 10:30 All students attend the same lectures.\nLectures can be followed via Teams (e.g. for students sitting at the back of the class), by joining the corresponding meeting (in the \u0026ldquo;Lectures\u0026rdquo; channel of this course\u0026rsquo;s Team).\nLabs # By default, labs are scheduled:\nMonday 15:30 - 17:30 Wednesday 13:30 - 15:30 Students are split in two groups (to be determined) for the labs, with identical content. Students who collaborate on the same group project are expected to attend the same lab.\nMost labs will be dedicated to the assignments for this course. Two labs will be dedicated to a presentation and discussion of the advancement of the group projects.\nTimetable # Some weeks will see fewer lectures/labs, and schedules or room numbers may vary from one week to the other. So make sure to check the timetable.\n"},{"id":3,"href":"/docs/labs/env/sections/prelim/","title":"Terminal and text editor","section":"First lab","content":" Terminal and text editor # For this lab, you will need to know how to open a terminal and a text editor.\nTerminal # You can launch a terminal in multiple ways:\nsearching for applications, clicking on the corresponding icon or desktop shortcut (if there is one), with a keyboard shortcut (e.g. Ctrl+Alt+t by default on Ubuntu). Warning. Windows comes with two shells by default. Out of these two, we (highly) recommend the Windows PowerShell.\nText editor # Make sure that you know how to open, modify and save a text file on your machine with a text editor. The following text editor should be installed by default:\non Windows: Notepad++ on macOS: TextEdit on Linux (depending on your distribution and/or desktop environment): gedit, xed, mousepad, etc. Other popular options include VSCode, emacs, vim or neovim, sublime text, geany, etc.\nYour can open your text editor in multiple ways:\nsearching for applications, clicking on the corresponding icon or desktop shortcut (if there is one), from a terminal: for instance, on Windows: type notepad to open Notepad++, type notepad \u0026lt;path/to/my/file\u0026gt; to open a file with Notepad++. "},{"id":4,"href":"/docs/intro/","title":"This course","section":"Docs","content":" Structure and organization of the course # This chapter explains how the course is structured and provides a brief overview of its content.\n"},{"id":5,"href":"/docs/objects/sections/classes/","title":"Class and instance","section":"Objects and classes","content":" Class and instance # A class can be viewed as a blueprint for a set of similar objects.\nFor instance, consider the two objects:\n{ name: \u0026#34;Florence\u0026#34;, zipCode: 50100, region: \u0026#34;Tuscany\u0026#34; } { name: \u0026#34;Rome\u0026#34;, zipCode: 00100, region: \u0026#34;Lazio\u0026#34; } Each of these objects describes a city, and they share the same keys (name, zipCode and region). A possible class for these two objects may enforce this structure, and it could be named City. An object that follows this blueprint is called an instance of this class.\nDeclaration # In a typed language (like Java), a class must specify not only the \u0026ldquo;keys\u0026rdquo; of its instances, but also their types. For instance, the class City could be declared as follows in Java:\npublic class City { String name; int zipCode; String region; ... } In Java, a class is often declared in a dedicated file. This file must have the same name as the class (e.g. City.java in this example).\nThe three variables (name, zipCode and region) are called attributes (or sometimes member variables).\nConstructor # A class also needs a special method called a constructor.\nThe constructor is in charge of creating a (fresh) instance of the class.\nNote. A class may have several constructors (with different signatures).\nWriting a constructor in Java # The constructor of a Java class must have the same name as the class.\nFor instance:\npublic class City { String name; int zipCode; String region; public City(String n, int z, String r){ name = n; zipCode = z; region = r; } ... } Note. In this example, the variable names n, z and r are not very explicit. However, using name, zipCode and region would be ambiguous (because these names are already used for the attributes of the class). In Java, we can use the prefix this. to refer to attribute names, thus eliminating the ambiguity.\nFor instance:\npublic class City { String name; int zipCode; String region; public City(String name, int zipCode, String region){ this.name = name; this.zipCode = zipcode; this.region = region; } ... } Calling a constructor in Java # A Java constructor is called with the keyword new. For instance:\nCity myCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City yourCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); Warning. In Java (as in Python, C#, etc.), the constructor does not return the instance itself, but a reference (sometimes called \u0026ldquo;pointer\u0026rdquo;) to this instance.\nNote. The object that is created in memory contains extra information, in particular a reference to its class. This allows type checking, casts, etc. (more on this later).\nAccessing an object in Java # The attributes of an object can be accessed like regular variables, using ., followed by the name of the attribute. For instance,\nCity thatCity = new City(\u0026#34;Siena\u0026#34;, 53100, \u0026#34;Lazio\u0026#34;); System.out.println(\u0026#34;Wrong region: \u0026#34; + thatCity.region); thatCity.region = \u0026#34;Tuscany\u0026#34;; System.out.println(\u0026#34;Better now: \u0026#34; + thatCity.region); will output\nWrong region: Lazio Better now: Tuscany Reference type vs primitive type # Recall that a Java constructor returns a reference to the object that it creates. So in the examples above, the value of each variable (myCity, yourCity and thatCity) is a reference, not the object itself.\nThis also holds for variable with an array type (like int[] myArray).\nThe types of these variables (e.g. City or int[]) are called reference types.\nSyntax. In Java, types that start with a capital letter (like City or Set\u0026lt;Integer\u0026gt;) are usually reference types.\nTypes that are not references types (like int or char) are called primitive types.\nIn Java, the value of a reference cannot be output (printed, displayed, etc.) by a program (as opposed to C/C++ for instance). But this value can be overwritten or compared to another.\nExercise What is the output of the following program?\nCity aCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); City theSameCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); System.out.println(aCity == theSameCity); System.out.println(aCity.zipCode == theSameCity.zipCode); Solution false true Exercise What is the output of the following program?\nCity anotherCity = new City(\u0026#34;Bologna\u0026#34;, 40100, \u0026#34;Emilia-Romagna\u0026#34;); City yetAnotherCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); yetAnotherCity.name = anotherCity.name; System.out.println(yetAnotherCity.name); anotherCity = yetAnotherCity; System.out.println(anotherCity.zipCode); System.out.println(anotherCity == yetAnotherCity); Solution Exercise 2.\n\u0026#34;Bologna\u0026#34; 46100 true Passing by value or by reference # Programming languages differ in the way arguments are passed to methods. Two common strategies are:\npassing by value: the method receives as input a copy of each argument, passing by reference: the method receives as input a reference to each argument (which allows the method to modify the initial argument). Consider for instance the following program (in pseudocode):\nint myInteger = 0 myMethod(myInteger) print(myInteger) void myMethod(int argument){ argument += 1 } If the argument is passed by value, then the program will print 0. If the argument is passed by reference, then the program will print 1. Java passes by value # In Java (and many other programming languages, like C, Python, Javascript, etc.), arguments are passed by value. So the above program translated in Java will print 0.\nWarning. Consider a method with a reference type argument. Because Java passes by value, this method will receive a copy of this argument. But this is a copy of the reference, not a copy of the object itself.\nExercise What does the following Java program print?\nint myInteger = 0; City myFirstCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City mySecondCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); myMethod(myInteger, myFirstCity, mySecondCity); System.out.println(myInteger); System.out.println(myFirstCity.zipCode); System.out.println(mySecondCity.zipCode); public void myMethod(int integer, City firstCity, City secondCity){ integer += 1; System.out.println(integer); firstCity.zipCode = 20590; System.out.println(firstCity.zipCode); secondCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); System.out.println(secondCity.zipCode); } Solution 1 20590 00100 0 20590 46100 "},{"id":6,"href":"/docs/env/sections/files/","title":"Hierarchical file system","section":"Development environment","content":" Hierarchical file system # File name extension # File names often end with an extension, which provides information about the type of the file. For instance, the file name myDocument.pdf has .pdf as extension.\nExamples. Common file name extensions include:\n.pdf for a PDF file, .mp3 for an MP3 file, .java for a Java source file, .class for a compiled Java file. Warning. A file name extension is not mandatory, and has no incidence on the content of the file. For instance:\na text file myFile.txt can be renamed myFile.mp3 an still be opened with a text editor, a bash script myScript.sh and the same file without the .sh extension can be executed in the same way, a \u0026ldquo;README\u0026rdquo; file is a text file (written in Markdown), often used to describe the content of a git repository. It can be named either README.md or README. However, appropriate file extensions may be needed for some programs to behave as expected. For instance, an IDE or a code editor may file extensions (like .java) to identify the programming language at hand.\nTree # Most operating system expose files as a tree (or possibly several trees for Windows).\nA (nonempty) tree is either:\na single node (called a leaf), or a node with one or several children that are trees. In this tree, non-leaf nodes are directories, and the leaves can be files, executables, links, empty directories, etc. For instance:\n├── bin │ ├── echo │ └── ... ├── home │ ├── alice │ │ ├── .bashrc │ │ ├── .m2 │ │ │ └── ... │ │ ├── Desktop │ │ │ └── ... │ │ ├── music │ │ │ └── thatSong.mp3 │ │ └── workspace │ │ └── pp │ │ ├── assignments │ │ │ └── ... │ │ └── project │ │ ├── .git │ │ │ └── ... │ │ ├── src │ │ │ └── HelloWorld.java │ │ └── test │ │ └── testHelloWorld.java │ └── bob │ ├── .bashrc │ ├── Desktop │ │ └── ... │ └── music │ ├── thatSong.mp3 │ └── anotherSong.mp3 └── ... Terminology. In this course, we will use the terms \u0026ldquo;folder\u0026rdquo; and \u0026ldquo;directory\u0026rdquo; interchangeably.\nTerminology. \u0026ldquo;File\u0026rdquo; is sometimes used (e.g. in the Linux documentation) as a generic term for all nodes in this tree (in combination with \u0026ldquo;directory file\u0026rdquo;, \u0026ldquo;executable file\u0026rdquo;, \u0026ldquo;regular file\u0026rdquo;, etc.) We will not follow this terminology.\nWindows may expose several trees (e.g. one per physical device).\nPath # Definition. In such a tree, a path from a directory $s$ to an arbitrary node $t$ is either:\n. if $s$ and $t$ are the same node, or .. if $t$ is the parent of $s$, or the name of $t$ if $s$ is the parent of $t$, or a path from $s$ to some node $i$, followed by / (or \\on Windows), followed by a path from $i$ to $t$. For instance (on macOS, Linux, etc.), in the tree above:\nhome/alice/workspace/pp/project/src/HelloWorld.java is a path from the root to the file HelloWorld.java, workspace/pp/project/src/HelloWorld.java is a path from the directory alice to the file HelloWorld.java, ../../bob/Desktop is a path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop, ../../bob/../bob/./Desktop is another path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop. Exercise How many paths are there from a directory to a node?\nSolution (Countably) infinitely many.\nCase sensitivity # Warning. Some operating system (Windows, macOS) use case-insensitive paths, whereas others (Linux, Android) use case-sensitive paths (this may also vary depending on physical storage devices).\nFor instance, on Windows, src/HelloWorld.java and src/helloworld.java are the same path.\nIn order to make sure that your code is portable:\nalways use case-sensitive paths in your code (i.e. respect the names of your files, folders, executables, etc.), do not create two files (or subfolders, executables, etc.) in the same folder with identical names modulo upper/lower case (e.g. Readme.md and README.md). Path separator # As mentioned above, Windows uses \\ as path separator, as opposed to the / used by other OSs (or in web URIs).\nWarning (for Windows). Some programs executed on Windows automatically convert the / path separator into a \\ (or the other way around).\nWarning (for Windows). In Java, a path can be safely written with /. At run time (i.e. when the program is executed), this symbol will be interpreted based on the underlying OS (i.e. as \\ on Windows, and as / on other OSs). However, a path written with \\ will be interpreted as such (therefore the program will throw an exception on OSs other than Windows).\nConvention # In what follows (unless explicitly stated), we will adopt by default the conventions for path names adopted on Linux. In particular, we will use / as a separator, and case-sensitive file and folder names.\nAbsolute path # Definition. An absolute path is a path prefixed with:\n/ on macOS, Linux, Android, IOs, etc. a capital letter followed by :\\ on Windows, where the letter identifies a physical device, disk partition, etc. In particular, the identifier of the main partition is often the letter C, in which case absolute paths (within this partition) are prefixed with C:\\. An absolute path is always a path from the root of the tree.\nFor instance (on macOS, Linux, etc.), /home/alice/workspace/pp/project/src/HelloWorld.java is an absolute path to the file HelloWorld.java\nA few simple observations:\ntwo different files may share the same name (but cannot share an absolute path), and two files with the same name may or may not be identical. E.g. in the above example, the two files named thatSong.mp3 may or may not be identical. Relative path # Definition. A relative path is a path that is not absolute.\nFor instance, ../../bob/Desktop is a path to Bob\u0026rsquo;s Desktop relative to Alice\u0026rsquo;s Desktop.\nNote that if p is a relative path, then p prefixed with ./ (or .\\ on Windows) is a path equivalent to p. This prefix is sometimes used to emphasize that a path is relative (among other purposes).\nExercise Complete the table below , based on the tree above.\nabsolute path to source directory $s$ absolute path to target $t$ possible path from $s$ to $t$ /home/alice/Desktop ../../bob/music/anotherSong.mp3 /home/alice/music ../../home/../home/alice/music /home/alice /home/alice/music/thatSong.mp3 /home/alice/music /home/bob/music/thatSong.mp3 project alice/../alice/.bashrc Solution absolute path to source directory $s$ absolute path to target $t$ possible path from $s$ to $t$ /home/alice/Desktop /home/bob/music/anotherSong.mp3 ../../bob/music/anotherSong.mp3 /home/alice/music /home/alice/music ../../home/../home/alice/music /home/alice /home/alice/music/thatSong.mp3 music/thatSong.mp3 /home/alice/music /home/bob/music/thatSong.mp3 ../../bob/music/thatSong.mp3 /home/alice/workspace/pp /home/alice/workspace/pp/project project /home /home/alice/.bashrc alice/../alice/.bashrc Working directory # Each process (e.g. a process that executes a Java program) has a working directory, which is a directory of the hierarchical file system. This directory may vary depending on the program and/or how it was started.\nMany programs (implicitly) interpret a relative path as relative to their working directory, regardless of whether the path is prefixed with ./ (or .\\ on Windows).\nIn particular, this is the case of:\nJava programs, file browsers, shells. Home directory # Each user of a system has its own home directory. E.g. in this example:\n/home/alice/ for Alice /home/bob/ for Bob Warning. The home directory is usually not the root of the tree (even if there is a single user on the machine).\nAbsolute paths to the home directory # The home directory (of a regular user) is normally:\n/home/\u0026lt;userId\u0026gt; on Linux/BSD, /Users/\u0026lt;userId\u0026gt; on macOS, /User/\u0026lt;userId\u0026gt; on iOS, /data/media/\u0026lt;userId\u0026gt; on Android, \u0026lt;mainHardDriveId\u0026gt;:\\Users\\\u0026lt;userId\u0026gt; on Windows (e.g. C:\\Users\\\u0026lt;userId\u0026gt;). On Linux and macOS, the alias ~ can be used as an absolute path to the current user\u0026rsquo;s home directory. For instance, in the above example, if Alice is logged in, then ~/music/thatSong.mp3 and /home/alice/music/thatSong.mp3 are two absolute paths to the same file.\nAccess restriction # Files and programs within the home directory of a user can usually be accessed by this user only (or a system admin). Therefore programs that can be executed by all users are usually located in other directories (e.g. the program /bin/echo in the example above).\nAccess restrictions (read, write and/or execute) may apply to the content of such directories. Notably, on Linux systems, (most of) the content of these directories can only be modified by a system admin.\nHidden files and directories # The home directory often contains files (resp. directories) whose names are preceded with a . (e.g. the file /home/alice/.bashrc in the above example). These are sometimes called \u0026ldquo;dot files\u0026rdquo; (resp. \u0026ldquo;dot folders\u0026rdquo;). On Linux and macOS, dot files and dot folder are hidden by default in a terminal or a file browser. On Windows, a (dot or not) file or folder can also be hidden, via a dedicated \u0026ldquo;hidden\u0026rdquo; attribute.\nHidden files and directories may be used to store (user-specific) parameters or options for a program. For instance, the configuration file ~/.gitconfig can be used to declare parameters (e.g. user identifier, etc.) or options (e.g. disable default fast-forward merge, etc.) to be used with git.\nHint. Configuration files are a convenient way to save your personal preferences and use them on several machines. For instance, you may need to connect to a remote server via ssh to perform some tasks (e.g. deploy a database or run costly computations). In such a scenario, you can upload dot files to your home directory on this server.\nHidden files or directories may serve other purposes. For instance, the dot folder ~/.m2 is used by Maven to store (in one place) the Java libraries that are required (as dependencies) by any Java project present in the home directory.\nHidden files or directories may also contain information specific to a subdirectory. For instance, every git repository (a.k.a. \u0026ldquo;project\u0026rdquo;) contains a dot folder .git that stores the full history of modification made to the repository.\nUsage and layout # Your home directory is where you generally want to store your projects, documents, scripts, etc.\nYou are free to structure it as you like (using sub-directories). Make sure that this structure allows you to retrieve your own work easily.\nWarning. When you download or create a project/document in your home directory, choose its location. Do not:\nlet an application decide this location for you, rely exclusively on the \u0026ldquo;recently opened\u0026rdquo; feature of an app to locate your files, store files and project directly at the root of your home directory. Warning. Aside from a few exceptional cases, your home directory should not contain multiple copies of a project or document.\nHint. It can be difficult for a new developer to figure out when to accept the default directory or layout suggested by a program, and when to overwrite it. As a (soft) rule of thumb, you generally want to choose the location of:\na file downloaded from your browser (or mail client), a project created with your IDE, a cloned git repository, a file created with an app, etc. Conversely, it is generally recommended to follow suggestions in the following cases:\ninternal structure of a project (typically the one generated by an IDE): e.g. the standard directory layout for a Maven project, or the standard directory structure of a Node JS project. software installed outside of your home directory, location of dot files and folders, etc. "},{"id":7,"href":"/docs/project/sections/board_game/","title":"Option 2: board game","section":"Project","content":" Option 2: board game # The second project option available to you consists in developing a video game with mechanics analogous to the ones of Might \u0026amp; Magic: Clash of Heroes or Legend of Solgard.\nStudents who choose this option you will be provided:\na basic graphical user interface (GUI) that they can reuse and/or customize, examples during lectures that they may adapt to their project. Requirements # The minimal requirement to submit this project is a player vs player game playable on a single machine.\nBut of course, you are free to go further and add your own features. Among other possibilities, you could for instance:\nimplement new mechanics (e.g. a rock-paper-scissor logic for unit encounters, events that may affect the board, etc.), make the game deterministic (i.e. eliminate randomness), create units with specific behaviors, implements scripted encounters (\u0026ldquo;boss fights\u0026rdquo;), implement a story, character progression, etc., develop a player vs bot mode, etc, Note. If you choose the last options in the list above (player vs bot), then you may benefit from an algorithm seen in the chapter on recursion. Besides, if several groups choose this option, we may organize a competition between bots (provided that they play by the same rules).\nGuidelines # GUI # The source code for the GUI can be cloned from GitHub. The project is designed so that:\nyou can develop a fully functional game (player vs player or player vs bot) by focusing exclusively on the backend (i.e. the mechanics of the game), without modifying the GUI. backend and frontend are decoupled. Communication between frontend and backend is specified via Java interfaces. It revolves around the notion of a game snapshot, which contains all the information needed to describe a state of the game (equivalently, you can think of a snapshot as a save state). In particular, snapshots are independent of a specific GUI.\nFor instance, a method is available that allows you to pass a snapshot to the GUI component. When you call this method, the snapshot will be drawn on screen, replacing the previous one (if any).\nAs input, your code receives the next action of the active player (for instance, delete the unit present on a specific tile). These are again specified by an interface, with 7 method that you need to implement. Your implementation should react to each action, i.e. modify the current snapshot, and then send it the GUI component for display.\nThe README.md file (at the root of the project) contains a description of the different components and interfaces, as well as building instructions, and explains where your code could fit. Read it carefully before you start working on your project!\nNote. You are of course free to modify the interfaces that come with the project. But this may require modifying the implementation of the GUI.\nDisclaimer. By design, the project compromises performance for simplicity and modularity. This is not how a resource-intensive game would be implemented.\nMore generally, this exercise is not meant to teach game development, but general-purpose programming and problem solving.\n"},{"id":8,"href":"/docs/project/","title":"Project","section":"Docs","content":" Project # Students enrolled in this course are expected to deliver a group project.\nTwo alternative options # Students can develop either:\nA project of their choice, or Their own version of the board game used as our running example. Groups who choose the second option (board game), will benefit from:\na graphical user interface (so that it is sufficient to implement the mechanics of the game), additional content provided during the lectures (as illustrations), which can be incorporated to the project. Requirements # Here are some requirements common to both options (free project or board game).\nSource code # The source code for the project must be written in Java 21 or lower.\nThe code should be original (or mostly original). If a project incorporates external code, it has to be referenced clearly in the README.md file of the project. If the project takes inspiration from a tutorial or the source code of another project, then this should be referenced as well.\nThe source code must be submitted as a GitHub repository. The commit history must reflect the individual contribution of each member of the group. For this reason:\neach student should use a different (and only one) GitHub account, and each student should commit his/her own code. The repository should contain at its root a .gitignore file hat indicates files that should not be tracked. In particular, a repository should not contain:\ncompiled classes, jars, logs, run-time files, IDE-generated files (e.g. .idea/), OS-generated files (e.g. .DS_Store), etc. Dependencies, build and packaging # Any additional Java library can be used in a project.\nThe project should be build with either Maven or Gradle. It should run on the evaluation environment via command line instructions.\nFor instance (depending on how the project is designed), the instructions to build the executable may be:\nmvn package and the instruction to run the executable may be (assuming that the executable is called myJar.jar and that the program takes two strings as input):\njava -jar myJar.jar \u0026lt;firstInput\u0026gt; \u0026lt;secondInput\u0026gt; If the executable cannot be built in the evaluation environment, then an über-jar should be provided that can run in this environment (via command line still).\nDocumentation # README # The git repository should contain at its root a README.md file (written in Markdown). This file should contain at least the following information:\nmembers of the group and their respective GitHub identifiers, clear instructions for building and running the project, a description of the project, a user\u0026rsquo;s guide for the project (either a written guide, or a link to a video), a brief overview of the implementation of the project. This should include information on: the different (high-level) components and interfaces between components, which third-party libraries were used (if any), and some programming techniques (seen in the course or not) that were particularly relevant for this project. a description of the human experience in this project. This should include information on: how the workload was distributed between the members of the project, how git was used, and challenges that each member faced (at least one per person). For further information about what a README.md file usually contains, one may look at this web page.\nThe README should not document the methods of your code (this documentation should be part of the code itself).\nCode documentation # No need to document every method of the project. It is sufficient to document (i.e. add a short specification to) the methods that your code exposes.\nThese are typically:\nmethods declared in a Java interface, methods written by one member of the group and called by another, methods that are written in a certain class or component (e.g. in the backend) and called in another (e.g. the fronted), and/or if your project is a Java library, methods that you want to make available to the user. These methods are usually public. The other methods are usually private or protected, and can remain undocumented.\nYou may also add comments to the more complex portions of your code, if the code is not self-explanatory.\n"},{"id":9,"href":"/docs/labs/env/sections/auto_comp/","title":"Shell autocompletion","section":"First lab","content":" Shell autocompletion # For comfort, your shell should allow you to autocomplete commands, in (at least) two ways: Tab-completion and history-based completion.\nTab completion # This feature suggests \u0026ldquo;smart\u0026rdquo; completions of the current command, like possible arguments, options, paths, etc.\nExample. On most operating systems, the command cd (like \u0026ldquo;Change Directory\u0026rdquo;) allows you to change the current directory. E.g.:\ncd workspace allows you to navigate (from the current folder) to the subfolder called workspace (if it exists).\nYou can use an arbitrary path as argument of the cd command. For instance:\ncd ../myCourses/pp/assignments or on Windows (with backslashes):\ncd ..\\myCourses\\pp\\assignments For the command cd, Tab-completion suggests possible paths. For instance:\ntyping cd followed by a whitespace and pressing the \u0026lsquo;Tab\u0026rsquo; key will suggest the directories contained in the current folder (if any), typing cd ../ (or cd ..\\ on Windows) and pressing the Tab key will suggest the directories contained in the parent folder (including the current folder), typing cd wor and pressing the Tab key will suggest the directories contained in the current folder and whose name starts with wor (if any). History-based completion # This feature suggests completions of the current command based on the user\u0026rsquo;s command history. The default key used for history-based completion may vary, depending on the shell: up and down arrow keys for zsh (Linux/macOS), right arrow for the Windows PowerShell.\nExample. The command\njava -version displays the version of the default Java Runtime Environment (JRE) and Java Development Kit (JDK) on your machine (if any).\nIf you want to execute this command again, you may type\nja and then the history completion key.\nThis will suggest you the latest command that you typed and started with ja. If you press the key again, then the previous of these commands will be suggested, etc.\nActivation # Windows # Tab-completion # The Windows PowerShell should now have Tab completion activated by default. If this is not the case on your machine, you may activate it by editing your Powershell profile, as explained here.\nHistory-based completion # History-based completion may also be activated by default (this feature is called \u0026ldquo;Predictive IntelliSense\u0026rdquo;), but only since 2023, and under certain conditions.\nIf Predictive IntelliSense it is not activated on your machine, then you may need to install a more recent version of the module called \u0026ldquo;PSReadLine\u0026rdquo;, following these instructions.\nWarning. You may get an error message when trying to install or upgrade this module. Read it carefully and follow the instructions. These may suggest you to:\nopen the Microsoft PowerShell with administrator rights (select \u0026ldquo;Run as administrator\u0026rdquo; when launching the Microsoft PowerShell), or add a flag to your command: either install for the current user only, or force installation for all users. Linux and macOS # On most Linux distributions, the default terminal shell is bash, which is not very customizable. Instead, you can install zsh, which is a modern take on bash.\nOn macOS, zsh is already the default shell, so you can skip the next step and install oh-my-zsh.\nMake zsh your default shell (Linux only) # Use your package manager to install zsh. For instance, on Debian-based distributions (like Ubuntu, Mint, etc.), your package manager is apt, so you can install zsh with:\nsudo apt-install zsh Then to use zsh, execute:\nzsh If this is the first time, then follow the configuration instructions.\nTo make zsh your default shell, execute:\nchsh -s $(which zsh) You will need to logout and login once for this latter change to take effect.\nInstall oh-my-zsh # Oh-my-zsh is a collection of plugins for zsh that enhances the default experience (autocompletion, colors, etc.). To install oh-my-zsh, you can execute the following command:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; and follow the instructions.\n"},{"id":10,"href":"/docs/intro/sections/lecturers/","title":"Teaching staff","section":"This course","content":" Teaching staff # Julien Corman will teach the lectures and one lab.\nJamila Oukharijane will teach the other lab.\nOffice hours # If you need additional help with the content of the course, the assignments and/or your project, you can ask for office hours with any (or both) of us.\nThese appointments must be scheduled via email (follow the links above for our email addresses) or Teams.\n"},{"id":11,"href":"/docs/env/sections/backup/","title":"Backup","section":"Development environment","content":" Backup # Make sure that your work does not depend on your laptop. You should be able to resume your work easily on another computer if your laptop gets lost, damaged, etc.\nYou should also be able to recover your data if you accidentally delete it from your hard drive.\nWhich information to back up # With highest priority, make sure that there exist copies (outside of your hard drive) of:\nyour passwords (and possibly identifiers), and your own work (code, reports, slides, notes, etc.). These copies may be stored on the cloud, an external disk, another computer, etc.\nOptionally, you may also back up:\nconfiguration files present in your home folder. For development purposes, you generally do not need to back up:\ngenerated content (back up the code that generates it instead), large datasets (these should not be present on your laptop to start with), programs (they can be reinstalled). How to back up # Password managers # For passwords, your password manager may provide an online backup option. Other password managers (like pass) may let you synchronize your passwords via git.\nGit # For your own work and/or configuration files, git can be an option.\nA git repository is (roughly speaking) a directory that can be synchronized across different machines (see the dedicated chapter of this course for an introduction to git). For instance, you may create a (private) git repository for each course that you follow and/or each project that you start. Several providers (GitHub, Gitlab, Bitbucket, etc.) can host copies of your (public or private) repositories on the cloud for free.\nThe benefits are:\nthe possibility to recover any previous state of your work (a git repository stores the whole history of modifications made to it), fine-grained control over your backup: for instance, you can use a \u0026quot;.gitignore\u0026quot; file to exclude files or subfolder that do not need to be backed up. Note. If a git repository is a subfolder of another git repository, then the inner repository is not included in the history of the outer one.\nLimitation. Git is not suited to large volumes of data (more than 1 GB in the same repository). This is usually not an issue for your own work (code, notes, reports, etc.) as a student in computer science. However, git should not be used to back up large collections of images, audio files, videos, etc.\nOther solutions # Numerous programs allow you to back up (part of) the content of your hard drive. One of them may be pre-installed on your operating system.\nYou can back up content on a device that you own (e.g. on an external hard drive), or on the cloud. In the latter case, some fee may apply (depending on the volume of data).\nRestore points # Programs such as System restore (Windows), macOS Recovery (macOS) or Timeshift (Linux) allow you to create snapshots of your system (typically for what lives outside of your home folder), and revert your system\u0026rsquo;s state to one of these snapshots.\nThis can be useful in case of a corrupted system. However, it may be difficult to determine at which point in time the system was \u0026ldquo;healthy\u0026rdquo;. Note also that in such scenarios, a fresh re-install may be a simpler option to restart on a sane basis.\n"},{"id":12,"href":"/docs/labs/env/sections/git_default_te/","title":"Default text editor for git","section":"First lab","content":" Default text editor for git # Some git commands open a text editor to let you type a message. By default, on most systems, this editor is vi, which is not friendly to new users.\nInstead, we recommend configuring git so that it opens your favorite text editor. The command is:\ngit config --global core.editor \u0026lt;myEditor\u0026gt; where \u0026lt;myEditor\u0026gt; is the command that launches your text editor. For instance:\nnotepad for Notepad++ (Windows), open -e -W -n for TextEdit (macOS), gedit for gedit, sublime for sublime text, etc. "},{"id":13,"href":"/docs/intro/sections/evaluation/","title":"Evaluation","section":"This course","content":" Evaluation # Evaluation for this course is based on:\nassignments: up to 30 points, a group project: up to 60 points, and an oral exam: up to 10 points. Your final grade is the sum of the above, multiplied by 0.3.\nAssignments # There will be 7 or 8 assignments for this course. These are standard programming exercises, related to notions seen during the lectures. The labs are (mostly) dedicated to these assignments.\nThe assignments are individual (do not submit the code of another student).\nThe release of each assignment is announced via Teams.\nAssignments are submitted via GitHub classroom. You can submit an assignment multiple times (but only before its deadline).\nNote. In order to submit your assignments (and your project), you will need a GitHub account. If you do not have one already, please create one and communicate it to the lecturer, preferably via Teams. Make sure that you use a single GitHub account for all your assignments and your project.\nGroup project # Guidelines for the content of the project are in the dedicated chapter. We focus here on organization and evaluation.\nEach group must consist of 3 to 4 students. Groups should be decided by March 20, and communicated via mail or Teams to the lecturer.\nProjects are delivered via GitHub.\nThe project\u0026rsquo;s code is expected to apply techniques seen during the lectures, but only if relevant. Please do not add artificial functionalities to your project for the sole purpose of illustrating a certain technique.\nGrades for a project are awarded individually, based on each student\u0026rsquo;s contribution. Students are expected to work on different computers. Make sure that:\neach student uses a different (and only one) GitHub account, and each student commits (via git) his/her own code. Among other evaluation criteria, we consider:\nquantity of work, non-trivial logic, appropriate data types and data structures, structure of the code (no code duplication, good usage of methods, classes, interfaces, inheritance, etc.) readability, documentation, naming, collaboration, integration with the rest of project, evidence of testing, etc. Oral exam # The oral exam is individual.\nNo revision is needed.\nWe will ask you questions about your code and/or involvement in the project.\nFor instance:\nwhich design choices you made, which difficulties you encountered, the expected behavior of a certain method, how some portions of the code may be improved, etc. In particular, we will check whether you have a good understanding of the code that you submitted. If not, then your mark for the project may be reevaluated.\n"},{"id":14,"href":"/docs/objects/sections/inheritance/","title":"Inheritance","section":"Objects and classes","content":" Inheritance # Subclass # In most (class-based) object-oriented languages, a class $A$ can extend another class $B$. In this case, $A$ is called a subclass of $B$.\nThe intuitive meaning is inclusion between their respective sets of instances, i.e. every instance of $A$ is also an instance of $B$ (but the converse may not hold).\nThis can be paraphrased in English by \u0026ldquo;every $A$ is a $B$ \u0026ldquo;. For instance:\nevery banana is a fruit every square is a rectangle every rectangle is a geometric shape, etc. Exercise In each of the following cases, is $A$ a subclass of $B$ ?\n$A$ $B$ Student Vegetarian Polygon Hexagon Continent Country Country Continent City Country ZoomMeeting Meeting ZoomMeeting Calendar Chapter Book Minute TimeInterval Hour TimeInterval Minute Hour Integer RationalNumber RationalNumber RealNumber Integer RealNumber SetOfStudents Student Student SetOfStudents SetOfStudents Set SetOfStudents SetOfPeople ArrayOfIntegers ArrayOfRealNumbers ArrayOfIntegers SetOfIntegers Tree Graph Graph Tree AcyclicGraph Tree UnionOfSets Set Set UnionOfSets Object Class Subclass Class Class Superclass Solution A B Answer Student Vegetarian no Polygon Hexagon no Continent Country no Country Continent no City Country no ZoomMeeting Meeting yes ZoomMeeting Calendar no Chapter Book no Minute TimeInterval yes Hour TimeInterval yes Minute Hour no Integer RationalNumber yes RationalNumber RealNumber yes Integer RealNumber yes SetOfStudents Student no Student SetOfStudents no SetOfStudents Set yes SetOfStudents SetOfPeople yes ArrayOfIntegers ArrayOfRealNumbers yes ArrayOfIntegers SetOfIntegers no UnionOfSets Set yes Set UnionOfSets yes (arguably) Tree Graph yes (arguably) Graph Tree no AcyclicGraph Tree no Object Class no Subclass Class yes Class Superclass no Transitivity # If $A$ extends $B$ and $B$ extends $C$, then $A$ extends $C$\nExample. In the exercise above, Integer extends RationalNumber and RationalNumber extends RealNumber, therefore Integer extends RealNumber.\nAntisymmetry # If $A$ extends $B$ and $B$ extends $A$, then they are the same class.\nExample. In the exercise above, Set and UnionOfSets are (arguably) the same class.\nInheritance # Naturally, if $A$ is a subclass of $B$ then it inherits the properties of $B$.\nFor instance, a rectangle has four right angles. Since every square is a rectangle, a square has four right angles as well.\nFactorizing code with a (possibly abstract) superclass # Inheritance can be used to avoid redundant code.\nDirect inheritance: illustration # Let us model the units of our game as objects.\nEach unit has:\na type (e.g. mage, unicorn, etc.), a color (at least in the original game), and a certain amount of health. The behavior and stats of a unit (e.g. number of turns before attacking when combined, default health, etc.) are dictated by its type. So it makes sense to group units by type.\nFor instance, one can create a class Unicorn whose instances are all units of type unicorn. In Java:\npublic class Unicorn { String color; int health; int attackCountdown; public Unicorn(String color) { this.color = color; health = 1; attackCountdown = -1; } } Note. We used the keyword attackCountdown in this example to indicate the number of turns before the unit attacks (and a special value of -1 when it is not set to attack). But there are of course other ways to model this.\nNote. In this example, we used the prefix this. for the attribute color only, because there is no ambiguity for the two other attributes.\nWe can also create a class Butterfly on the same model\npublic class Butterfly { String color; int health; int attackCountdown; public Butterfly(String color) { this.color = color; health = 2; int attackCountdown = -1; } } Now consider a method encounter that manages an encounter between two units. Without inheritance, one would need to implement four versions of this method:\nunicorn vs unicorn, unicorn vs butterfly, butterfly vs unicorn, and butterfly vs butterfly. For instance, the first of these four methods could be implemented as follows:\nvoid encounter(Unicorn u1, Unicorn u2) { // subtract the health of u2 from the health of u1 u1.health -= u2.health; // the health of u2 becomes the inverse of the remaining health of u1 u2.health = -u1.health; } More generally, if the game has $n$ types of units, then the code will contain $n^2$ nearly identical encounter methods.\nQuestion. Can we use inheritance in this example to avoid duplicate code (and how)?\nObserve that a unicorn and a butterfly (viewed as object) have identical attributes (a.k.a. \u0026ldquo;keys\u0026rdquo;), namely String color, int health, and int attackCountdown. So we can create a superclass of Unicorn and Butterfly that carries these attributes, and let the two subclasses inherit it. For instance, this superclass may be called Unit.\nWe may also want every unit in the game to have a concrete type (like \u0026ldquo;unicorn\u0026rdquo; or \u0026ldquo;butterfly\u0026rdquo;), rather than being a generic \u0026ldquo;unit\u0026rdquo;. In Java, this can be achieved with the abstract keyword. This keyword ensures that our superclass cannot be directly instantiated (even though it can still have a constructor). For instance:\npublic abstract class Unit { String color; int health; int attackCountdown; public Unit(String color, int health) { this.color = color; this.health = health; int attackCountdown = -1; } } Because this class is abstract, the following code will not compile:\nUnit myUnit = new Unit(\u0026#34;green\u0026#34;, 2); Next, we can declare that Unicorn extends Unit, by using the Java keyword extends. We can also use the constructor of Unit within the constructor of Unicorn, with the Java keyword super.\nThis yields:\npublic class Unicorn extends Unit { public Unicorn(String color) { super(color, 1); } } And we can proceed similarly for the class Butterfly:\npublic class Butterfly extends Unit { public Butterfly(String color) { super(color, 2); } } Note. In Java (as opposed to C++ for instance), a class can only have one immediate superclass, so the keyword super is never ambiguous.\nObserve that all the attributes are now carried by the superclass Unit. However, because they are inherited, these attributes can be accessed as if they were regular attributes of the subclass. For instance,\nUnicorn myUnit = new Unicorn(\u0026#34;green\u0026#34;); System.out.println(myUnit.health); outputs\n1 This allows us to write a generic encounter method, as follows:\nvoid encounter(Unit u1, Unit u2) { u1.health -= u2.health; u2.health = -u1.health; } And this method can be called with unicorns and/or butterflies as inputs. For instance:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;yellow\u0026#34;); encounter(myUnicorn, myButterfly); } Transitive inheritance # In the example above, we assumed that all units have a color and can attack. What if we also want to create a type of unit called Wall that has no color and cannot attack? An instance of this class does not need the attributes color and attackCountdown.\nA quick solution here consists is setting attackCountdown to -1, and color to null. However, unnecessary attributes make code harder to understand, and such a design may not scale well if the game is extended with more units types.\nExercise Modify our model to accommodate for the class Wall, so that an instance of Wall only has the health attribute.\nPossible solution One solution (among others) is the following:\nmodify the class Unit so that it only carries the attribute health, Wall extends Unit, create an (abstract) subclass of Unit (for instance MobileUnit) that carries the other two attributes, Butterfly and Unicorn extend MobileUnit (therefore they also extend Unit, by transitivity). Or in Java:\npublic abstract class Unit { int health; public Unit(int health) { this.heath = health; } } public class Wall extends Unit { public Wall() { super(5); } } public abstract class MobileUnit extends Unit { String color; int attackCountdown; public MobileUnit(String color, int health) { super(health); this.color = color; this.attackCountdown = -1; } } public class Unicorn extends MobileUnit { public Unicorn(String color) { super(color, 1); } } and similarly for Butterfly.\n"},{"id":15,"href":"/docs/labs/env/sections/install/","title":"Installing software","section":"First lab","content":" Installing software # In order to install, update and remove programming-related software (compilers, interpreters, execution environment, libraries, build automation tools, git, maven, etc.), we highly recommend using a package manager. This is valid regardless of the programming languages that you use (Java, Javascript, Python, C/C++, etc.).\nLinux distributions already come with a package manager. So you can safely skip the next section if you use Linux.\nInstalling a package manager (Windows and macOS only) # Windows # To install Chocolatey:\nopen the Window PowerShell in admin mode (right click on the program\u0026rsquo;s name and select \u0026ldquo;Run as administrator\u0026rdquo;), copy-paste the command provided on this page (the one that starts with \u0026ldquo;Set-ExecutionPolicy\u0026hellip;\u0026rdquo;) and press Enter. macOS # To install Homebrew, execute\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; and follow (carefully) the instructions.\nTo check whether the installation was successful, type\nbrew --version Installing software with a package manager # Windows # With Chocolatey, to search for a program, type its name in the search bar on this page. Next to each result, you will find the command to install the corresponding package.\nFor this course, you will need git, Maven and Gradle. The respective commands are:\ninstall git: choco install git install Maven: choco install maven install Gradle: choco install gradle We assume that you already have a Java JDK installed. If not, then you can use:\nchoco install openjdk macOS # With Homebrew, to search for a program, type its name in the search bar on this page. If you find the program, then the resulting web page will provide the command to install the corresponding package.\nFor this course, you will need git, Maven and Gradle. The respective commands are:\ninstall git: brew install git install Maven: brew install maven install Gradle: brew install gradle We assume that you already have a Java JDK installed. If not, then you can use:\nbrew install openjdk@21 Linux # If you use Linux, you probably know how to use a package manager.\nFor this course, you will need to install git, Maven and Gradle. For instance, on Debian-based distributions (like Ubuntu, Mint, etc.), your package manager is apt, and the respective commands are:\ninstall git: sudo apt install git install Maven: sudo apt install maven install Gradle: sudo apt install gradle We assume that you already have a Java JDK installed. If not, then you can use (on Debian-based distributions still):\nsudo apt install openjdk-21 "},{"id":16,"href":"/docs/labs/env/sections/ssh/","title":"Ssh key","section":"First lab","content":" ssh key # An ssh key allows you to connect to a remote machine via the ssh protocol. Among other uses, this is the preferred way to share data with a git hosting service (such as GitHub, Gitlab or Bitbucket).\nYou only need one ssh key per machine (laptop, desktop, phone, etc.). So from your laptop, you can use the same ssh key to connect to a server or interact with GitHub, Gitlab, etc.\nBy default, ssh keys are located in the directory \u0026lt;homeDir\u0026gt;/.ssh/ (or \u0026lt;homeDir\u0026gt;\\.ssh\\ on Windows) where \u0026lt;homeDir\u0026gt; is your home directory (i.e. the one with your user name).\nCheck whether there is already an ssh key on your machine # There may already be an ssh key on your machine. To check whether this is the case:\nverify whether the \u0026lt;homeDir\u0026gt;/.ssh/ already exists, if it exists, then open it and check whether it contains two files with the same name, one without extension, and one with the extension .pub. For instance, id_rsa and id_rsa.pub, or id_ed25519 and id_ed25519.pub. Warning. The .ssh directory is a hidden directory, so make sure that your file browser displays hidden files and directories. Alternatively, with a terminal you can list all files and directories in the current directory (including hidden ones) with:\nLinux and macOS: ls -a Windows: ls -force If these two files are already present, then you already have an ssh key, and you can skip the next step.\nCreate an ssh key (if there was none) # If the .ssh directory does not exist or does not contain an ssh key, then generate a key with:\nssh-keygen and follow the instructions (note that if you choose to enter a password, then you will have to type it each time you upload or download data to/from Github, Gitlab, etc.).\nShare your public key # If you followed the instructions above, you should now have an ssh key one your machine (whether it was already there or you just created it)\nYour ssh key consists of two files, with the same name (modulo the extension .pub):\nthe file with the .pub extension is your public key, the file without the .pub extension is your private key. In order to connect to/exchange with a remote machine via ssh, you need to share the public key: this is the content of the file with the pub extension.\nwith GitHub # This is how to share your public ssh key with GitHub (the procedure is similar for GitLab, etc.):\nlogin to GitHub, click on your user icon (top right), and select \u0026ldquo;Settings\u0026rdquo;, in the left menu, select \u0026ldquo;SSH and GPG keys\u0026rdquo;, click on the button \u0026ldquo;new ssh key\u0026rdquo;, give a name to your key (e.g. my_laptop) in the field \u0026ldquo;Title\u0026rdquo;, paste the content of the .pub file in the field \u0026ldquo;Key\u0026rdquo;, click on the \u0026ldquo;Add SSH key\u0026rdquo; button. "},{"id":17,"href":"/docs/intro/sections/content/","title":"Content","section":"This course","content":" Content of the course # This is a beginner\u0026rsquo;s course on imperative and (class-based) object oriented programming, with an emphasis on practice and collaboration.\nWe will use Java as our main programming language. However, for a large part, the content of the course is not specific to Java (although the syntax may be). This content can be easily ported to other (imperative and/or object-oriented) programming languages: C/C++, C#, Javascript, Go, Kotlin, Lua, Perl, PHP, Python, Rust, Ruby, Typescript, Visual Basic, etc.\nPrerequisites # Students are expected to have completed the Computer Programming course (INF/01 76203).\nTherefore the following topics are not covered in this course:\nvariables, assignments, variable scope, basic data types (int, char, boolean, etc.). conditional statements (\u0026ldquo;if/then/else\u0026rdquo;) and loops, expression evaluation, methods/functions, arrays, etc. Students are also expected to have played the board game used as a running example throughout the lectures.\nOutcomes # After completing this course, students should be able to:\ndevelop a prototype application in Java, write structured, documented and easily maintainable code, collaborate with other developers. Focus # Foundations # Most lectures put an emphasis on problem solving, rather than providing (mechanical) recipes.\nBesides, the amount of Java syntax provided in this course is on purpose limited (but sufficient to solve the assignments). For conciseness, pseudocode may even be used in some sections, rather than Java code.\nSome lectures also focus on more abstract (albeit simple) notions. These includes elementary mathematical objects or structures: set, tuple, map, relation, preorder, graph, tree, etc.\nThe purpose is twofold:\ngeneralize techniques seen in this course to programming languages other than Java, provide a widely accepted vocabulary to document/explain your code. Collaboration # The course introduces basic coding practices to ease development within a team. In particular:\nstructuring a project (components, interfaces, encapsulation, inheritance, etc.), collaboration via git, test-driven development. Note. What is considered good communication in computer science may differ from other disciplines. Emphasis is put on clarity, precision and conciseness.\nExercise Here is a (caricature of) a poorly documented method. Can you improve the method\u0026rsquo;s description and/or signature?\n/** The algorithm looks at the first input collection, and is only guaranteed to * work if no number is present twice in this collection, in which case it * loops over the numbers contained in this collection (in no specific order) * and checks for each number whether it is also present in the second input * collection (which is also expected to have distinct numbers). The code * written in this loop adds the current number (from the first collection) * to the output collection if this number is also present in the second * collection, and does nothing with this number otherwise. */ Collection\u0026lt;Integer\u0026gt; filterNumbersThatAreShared(Collection\u0026lt;Integer\u0026gt; c1, Collection\u0026lt;Integer\u0026gt; c2); Solution A simpler signature and description could be:\n/** * Returns the intersection of sets s1 and s2. */ Set\u0026lt;Integer\u0026gt; intersection(Set\u0026lt;Integer\u0026gt; s1, Set\u0026lt;Integer\u0026gt; s2); The following topics are beyond the scope of this course:\ncontinuous integration, project management (agile methodology, bug tracking, etc.), advanced git workflows, advanced design patterns, dependency injection, etc. Quizzes # Some lectures will include quizzes. These are anonymous, and therefore are not part of your evaluation. The purpose is to:\nmake lectures more interactive, and adapt the pace of the lectures based on students\u0026rsquo; answers. Topics covered # Due to limited time, many notions (such as asymptotic cost, hash tables or multi-threading) are only briefly introduced in this course. However, some of them will be further discussed in other courses of the bachelor.\nProgramming techniques # An important part of the lectures is dedicated to the following core topics:\nobjects, classes and interfaces (inheritance, encapsulation, value vs reference, comparing objects, cloning objects, etc.), abstract data types (set, list, associative array, queue, etc.) and data structures (array, linked list, hash table, etc.), recursion. In addition, the following will be (briefly) introduced:\nmutability, pure functions, lambda expressions and streams, generics, multi-threading. Note. Some of these topics pertain to functional programming, but have been incorporated (in some form) to several imperative languages over the years.\nSoftware engineering # unit tests, exceptions, code factorization. Java # input/output, object serialization, JSON/XML serialization. Tools and tutorials # git, build automation (Maven and Gradle), using an IDE, using a terminal efficiently (introduction), etc. "},{"id":18,"href":"/docs/env/sections/install/","title":"Software management","section":"Development environment","content":" Software management # Dependencies # As a developer, you frequently need to download, install and/or update:\nlibraries used in your projects (called dependencies), core programming utilities, such as a compiler or interpreter for a given programming language, a package manager, etc. tools for software development: editor, debugger, etc. These programs have their own dependencies, that have their own dependencies, etc. And two programs may depend on different versions of a same third program.\nDependency management is a frequent source of complications during software development. Dependency patterns that may occur include:\nco-dependencies:\nFor instance, consider the following configuration:\nProject $P$ depends on a certain version of Library $L_1$, $P$ also depends on Library $L_2$, which depends on an older version of $L_1$ (and the two versions are not compatible), The build of project $P$ may fail because it can contain only one version of $L_1$.\ncyclic dependencies:\nLibrary $L_1$ depends on a specific version of Library $L_2$, and\n$L_2$ depends on a specific version of $L_1$.\nUpgrading one of these two libraries independently may prevent the other one to run. But it may be possible to upgrade both at the same time.\netc.\nNote that in these two examples, dependencies may be direct or transitive. As a result, it can be very difficult to diagnose such problems.\nThe term dependency hell is sometimes used to refer to such situations.\nTwo (non-exclusive) broad approaches are commonly adopted to avoid such issues:\nautomated dependency management (using a package manager), and self-containment: avoid shared libraries, each program having a copy (some of) its own dependencies. Automated dependency management # Definitions # A package is a program together with some metadata. These metadata include the program\u0026rsquo;s name, version, release date, authors, licence and the names of its dependencies (together with their versions).\nA software repository is a collection of packages that comply to the same format of metadata. A software repository (precisely, multiple copies of it) is generally hosted on the cloud.\nA package manager automates the installation (as well as configuration, update and removal) of packages from a software repository (or several) to a user\u0026rsquo;s machine.\nExamples # An operating system (OS) may use a package manager and software repositories. Notably, this is the preferred way of installing software on most Linux distributions. Widely used OS package managers include:\napt for Debian and derivatives, dnf for Fedora and derivatives, pacman for Arch and derivatives, Homebrew for macOS, Chocolatey (since 2011) and Winget (since May 2021) for Windows. Many programming languages have dedicated package managers. For instance:\nMaven for Java, npm for Node.js (Javascript) pip for Python, NuGet for .NET (C#, F#, and Visual Basic) RubyGems for Ruby, CPAN for Perl CRAN for R, etc. Some applications also have dedicated software repositories for plugins (and plugin managers to handle these plugins). For instance.\nThe VSCode market place, CTAN for LateX, MELPA for Emacs, etc. Other applications (such as zsh, vim or neovim) only have plugin managers, without a centralized software repository. These managers install plugins directly from hosts (e.g. GitHub repositories).\nUsage # Installing, updating and removing software via a package manager is highly recommended in most scenarios. In particular:\ndependencies of a package are also installed (or it some cases updated or removed) transitively, some package managers can install and manage several versions of the same package (when needed), the installation process often uses a default configuration and directory layout (environment variables, etc.) that facilitates interaction with other programs. The installation (or update or removal) procedure is also significantly simpler, thus leaving less room for manual errors. As an illustration, here is the full procedure to install Maven with the apt package manager (on Debian and derivatives):\napt install maven and similarly with Homebrew (on macOS):\nbrew install maven or with Chocolatey (on Windows):\nchoco install maven In comparison, the procedure to install Maven manually on Windows is more involved, thus more likely to introduce errors (trough inadvertence, or by following outdated instructions).\nWarning (on Windows). The default and/or most frequent software installation instructions found on the web for Windows are typically manual. For most programming related software, we recommend instead looking for a corresponding package on Chocolatey (or Winget).\nAs a (rather extreme) example, compare installing MinGW (to get the GCC compiler) with:\nthis long procedure, or a simple command (with Chocolatey): choco install mingw However, in some (rare) scenarios, a manual installation may be preferred. In particular when the latest version of a program is needed, but not available yet on the software repository.\nSelf-containment # A variety of strategies can be adopted to build a program so that it runs in partial isolation from the rest of the system that it is deployed on (i.e. in its own environment, and with its own dependencies, that cannot be used by other programs).\nFor instance, a Node.js project often includes a copy of all the Javascript libraries that it depends on (transitively). Further self-containment strategies may involve different levels of virtualization (e.g. via Docker).\nThis is one way to avoid shared dependencies. Other benefits are increased portability, and ease of installation by end-users. Drawbacks include and increased workload on the developer\u0026rsquo;s side (e.g. for maintenance), and limited opportunities for integration with other programs.\nSelf-containment in Java # In Java, self-containment is usually less pronounced during development. Java libraries are typically managed via Maven:\non a per-user basis (which can be viewed as a compromise between per-project and system-wise): each user has a hidden folder \u0026lt;homeDir\u0026gt;/.m2/ that contains all Java libraries used in his/her projects, and allowing multiple versions of the same library to coexist. However, a Java application that targets non-developers can be released together with its Java dependencies, as a so-called über jar (a.k.a. fat jar).\n"},{"id":19,"href":"/docs/intro/sections/board_game/","title":"Board game","section":"This course","content":" Board game # In order to follow this course, you will need to play one of the two following video games:\nMight \u0026amp; Magic: Clash of Heroes, or Legend of Solgard. These two games have nearly identical mechanics. So by default, we will refer to them as a unique game (e.g. when we write \u0026ldquo;this game\u0026rdquo; or \u0026ldquo;our board game\u0026rdquo;).\nWhy this game # Turn-based board games (like chess, go, checkers, etc.) are traditionally a good playground to learn the basics of algorithmic thinking.\nDisclaimer. The course is not about video game development, but general-purpose programming. This game is only used as didactic support.\nPrecisely, this game will serve two purposes:\nwe will use it as a running example throughout the lectures, and students can choose to implement (their own version of) this game as their group project. By default, we will focus on the two player variant, where both players play by the same rules. These two players may be humans and/or bots.\nHow long to play # Students only need to play long enough to understand the basic mechanics of the game.\n1.5 to 2 hours should be sufficient.\nWarning. In both games, mechanics are introduced gradually, so it is difficult to get a full overview by playing less than 1.5 hours.\nWhich game to choose # Might and Magic clash of heroes (MMCoH) # This game was initially released in 2009 for Nintendo DS. It has then been ported to PC and several consoles, as well as Android and iOS.\nA free demo was available on Steam until July 2023. The game has been re-released since, by another editor. As a side-effect, the demo is not available on Steam anymore.\nThe Android and iOS versions have also been removed from the Google Play store and App store respectively.\nAdvantages.\nThe mechanics of this game may be easier to understand (in a short amount of time). The default mode is the (symmetric) 2 player mode (player vs bot or player vs player) that we will work on. Drawbacks.\nThe touch-screen interface on Android and iOS is arguably dated. Legend of Solgard # This game was released in 2016 for Android and iOS. It is still available on the Google Play store and the App store.\nIt is free to play, with optional microtransactions (via so-called loot boxes).\nWarning. For this course, no transaction is needed.\nAdvantages.\nAnimations can be sped up. The touch-screen interface is more modern than the one of MMCoH for Android and iOS. Drawbacks.\nProgression is based on a (complex) system of virtual currencies, which adds noise to the interface. The game can only be played (for free) a limited amount of time per day (approximately 45 min). The default mode is not the (symmetric) 2 players mode that we will work on (it requires more playtime to be unlocked). So an extra effort of imagination may be needed. "},{"id":20,"href":"/docs/env/sections/os/","title":"Operating system","section":"Development environment","content":" Operating system (OS) # Your computer does not bind you to one OS. You can run multiple OSs on the same computer by:\npartitioning your disk, or booting from an external drive, or using virtualisation. Depending on what you are developing, one operating system may be more convenient than another.\nWe review below some benefits and drawbacks of developing under Windows, macOS and Linux.\nWindows # Benefits and drawbacks # Here are some benefits of using Windows as your OS for software development:\nit comes pre-installed on most PCs, it is compatible out-of-the-box with most hardware, it provides a fully integrated development suite for the .NET framework (C#, F#, Visual Basic), and to a lesser extent C/C++. And some drawbacks:\nfor general-purpose development, Windows is not friendly to new programmers (compared to Linux or macOS), the usage of an (OS-wise) package manager is (still) not the norm, it sometimes favors backwards compatibility over compliance with modern standards. When to use Windows (and when not) # Windows is the OS of choice for developing software meant to run on Windows only, or cross-platform software written in one of the .NET languages (mostly C#). C# is notably used for game development (e.g. for Unity) and graphical interfaces (although Javascript-based graphical frameworks may have become more popular lately).\nVisual studio (not VSCode!) offers a fully integrated development suite for the .NET languages, and is also commonly used for C/C++.\nFor other programming languages, using Windows may require extra efforts or precautions (compared to Linux or macOS), especially for new developers.\nIn particular:\nsoftware installation/upgrade/removal can be complex and error-prone, writing scripts (e.g. for two programs to interact) can also be more involved, due to multiple shells. Besides, additional care must be taken to write platform-independent code. Here are two frequent sources of errors made by students:\nPath separators (see the dedicated section),\nLine breaks (see the dedicated section).\nFor this course # You should be able to complete all assignments and write your project using Windows (even if your collaborators use other OSs).\nHowever, you may need to pay extra attention, for instance to path names (as explained above). Installing and configuring the necessary software may also be more complex (again, we recommend using a package manager when possible).\nIf you do not manage to set up your working environment for this course (see the requirements) in a short amount of time, then consider using a Linux distribution instead (see the dedicated section below for using Linux alongside Windows).\nmacOS # Here are some benefits of using macOS as your OS for software development:\nit comes pre-installed with an Apple computer, it is POSIX-compliant (since 2001), thus offering easier interoperability with Linux/BSD/Android/IOS the Homebrew package manager is relatively mature. And some drawbacks:\nsome software may not be available, your working environment is not easily customizable. When to use macOS (and when not) # MacOS is rarely used on hardware other than Apple computers.\nIt is often a good choice for new developers. In particular, Homebrew offers an easy way to install/update/remove programs needed for general-purpose development (compilers, interpreters, other package managers, etc.), and its software repository is reasonably comprehensive in that regard (albeit smaller than repositories used by Linux distributions).\nA number of more experienced developers also work with macOS, notably for web development (Node.js/Javascript) or data science (Python).\nA Linux distribution may be more convenient in some situations, e.g. when developing a program meant to run on a server, or when working with Docker containers.\nFor this course # If you have a Apple laptop, then you should not need an OS other than macOS for this course (even if your collaborators use Windows or Linux).\nLinux # Here are some benefits of using Linux as your OS for software development:\nit is primarily designed for developers, it is relatively lightweight, it has an important (and high-quality) online community support, it is used by most web servers, (OS) package managers are mature and easy to use, your working environment can be easily customized and/or configured. And some drawbacks:\nLinux rarely comes pre-installed on a computer, there is sometimes too much choice (distributions, programs, configuration options, etc.), Linux distributions are (arguably) not as friendly to desktop users as Windows or macOS, Hardware support (e.g. for peripherals) is (still) more limited than for Windows. When to use Linux (and when not) # Linux is often the OS of choice for developing programs meant to run on web servers. It is also a good choice for writing cross-platform software.\nLinux (together with macOS) is also a good environment to learn the basics of programming, due to native compatibility with a wide range of technologies for general-purpose development (e.g. Docker). Software installation, configuration, upgrade and removal is also made easier by mature package managers. Besides, the Linux shell is a versatile yet relatively simple tool that can ease process management or interaction between programs.\nLinux is arguably not the best choice for developing Desktop applications that target a specific OS (such as Windows or macOS), or in some specific domains such as game development.\nFor this course # You should be able to complete all assignments and write your project using a Linux distribution (even if your collaborators use other OSs).\nIn particular, if you face important issues when setting up your working environment (git, JDK, Maven, Gradle, etc. ) on Windows, we recommend using a Linux distribution instead (this may save you time). Keep in mind however that this will not solve issues related to the configuration of your IDE.\nNot that you can use Linux (for development) and Windows (for other purposes) on the same computer.\nWhich distribution to choose # You can use any (reasonably mainstream) all-purposes Linux distribution for this course (and other courses).\nThe choice may seem overwhelming at first sight, but most distributions are forks of a few popular ones (Debian, Fedora, Arch, \u0026hellip;), and are relatively similar to each other. Besides, Linux environments are highly customizable: for instance, the choice of a distribution does not bind you to its default desktop environment. Available software is also very similar from one distribution to another: regardless of the distribution, you will have access to openJDK, git, Maven, etc. via a package manager.\nDesktop oriented distributions # Distributions that are more desktop-oriented can be more friendly to newcomers (especially non-developers), but also come with unnecessary software. Two popular distributions in this category (for new users) are Linux Mint and Zorin OS. Both are forks of Ubuntu, which is itself a fork of Debian.\nLightweight distributions # For a (slightly) more lightweight distribution, MX Linux is currently a popular choice. It is also based on Debian.\nHow to install a Linux distribution # Most distributions provide detailed instructions on their web page.\nRegardless of the distribution, you have are (at least) three possible options:\nVirtual machine (such as VirtualBox). This is the simplest option in terms of installation. But also the most expensive computationally, so only suited to a relatively powerful computer. Performance is also suboptimal.\nA virtual machine is often good way to test a distribution before properly installing it.\nBootable drive. You can store your Linux distribution on an external hard drive, and boot on Linux when the hard drive is connected to your computer. Compared to the third option below, this may affect the performance of disk access.\nPartition (with dual boot). You can dedicate a certain amount of space to a Linux distribution your hard drive. A minimum of 30 GB is often recommended (this can be adjusted later on). When starting your computer, it will let you choose which OS to boot on. This is the best option in terms of performance.\nNote. For the third option (dual boot), the installation procedure has become slightly more involved on some recent computers, due to encrypted disks or so-called \u0026ldquo;secure boot\u0026rdquo;. So make sure that the instructions that you follow are up-to-date.\n"},{"id":21,"href":"/docs/intro/sections/bibliography/","title":"Additional resources","section":"This course","content":" Additional resources # You are free to use additional resources (web sites, IDE generated code, Copilot, etc.) to solve the course\u0026rsquo;s assignments and/or develop your project.\nHowever, make sure that you understand the code that you submit.\nJava\u0026rsquo;s syntax # This website contains Java code snippets that illustrate how to perform certain operations. However, this documentation is far from exhaustive (on purpose).\nWhen it comes to syntax, the first two sources of complementary material for this course are:\nthe Javadoc of the libraries (standard and auxiliary) used in projects and assignments. An IDE is often the fastest way to navigate through it, and the web. Books # An (optional) reading list for this course is available in the catalogue of the Unibz\u0026rsquo;s library. All books can be accessed via the library (either physically or digitally).\nAmong these books, we highlight the following three:\nIntroductory textbooks # Java : the complete reference (11th edition) by Herbert Schildt McGraw-Hill Education, 2019\nThis is a general introductory book to Java and object oriented programming. It covers most topics seen in this course (and a lot more).\nHead First Java (3rd edition) by Kathy Sierra, Bert Bates and Trisha Gee O\u0026rsquo;Reilly Media, 2022\nThis is an alternative introductory book, less comprehensive, but with more emphasis on problem solving (rather than syntax).\nGood practices (intermediate level) # Effective Java (3rd edition)\nby Joshua Bloch\nAddison-Wesley Professional, 2017\nThis is a reference book for best practices and common pitfalls when programming in Java (and more generally in an object-oriented language).\n"},{"id":22,"href":"/docs/env/sections/requirements/","title":"Requirements for this course","section":"Development environment","content":" Requirements for this course # For this course, you will need:\nGit Version 2.2 or higher A Java Development Kit (JDK) for Java 17 (e.g. openJDK) Maven Version 3.6 or higher In addition, if you choose the board game as project, you will need:\nGradle Version 7.2 or higher Again, we recommend using a package manager to install these programs if possible.\nFor Windows users. Maven is not available on the Winget repository. But you can find it on the Chocolatey repository.\nYou will also need:\na text editor (possibly your IDE) an IDE a terminal emulator (possibly your IDE) "},{"id":23,"href":"/docs/env/sections/text_editor/","title":"Text editor","section":"Development environment","content":" Text editor # Text file # A text file stores a sequence of characters. These are typically Unicode characters, encoded in UTF-8 (or sometimes UTF-32 or UTF-64).\nMost of the files that programmers edit are text files.\nExercise Which of the following are text files?\nfile type conventional file name extension an MP3 file .mp3 a JPEG file .jpeg a PDF document .pdf a Microsoft Excel spreadsheet .xls or .xlsx a CSV file .csv a JSON file .json a Microsoft Word document .doc or .docx an Apple Pages document .pages a LibreOffice Writer document .odt a Python source file .py a Java source file .java a compiled Java class .class a Windows executable file .exe a bash script .sh Solution file type conventional file name extension is it a text file? an MP3 file .mp3 no a JPEG file .jpeg no a PDF document .pdf no a Microsoft Excel spreadsheet .xls or .xlsx no a CSV file .csv yes a JSON file .json yes a Microsoft Word document .doc or .docx no an Apple Pages document .pages no a LibreOffice Writer document .odt no a Python source file .py yes a Java source file .java yes a compiled Java class .class no a Windows executable file .exe no a bash script .sh yes Warning. A space is a character. So is a tab, a line break, etc.\nTherefore a file ending with a new line is different from the same file without this new line!\nEditor # A text editor is a program used to edit text files.\nAs a result, a text editor can open any file produced with another text editor (regardless of the file\u0026rsquo;s extension).\nMost operating systems come with one or several text editor(s) pre-installed, such as Notepad++ (Windows), TextEdit (macOS), gedit (default Ubuntu), etc.\nWarning (for Windows). Traditionally, text editors for Windows encode a line separator as two Unicode characters (\\r\\n), against a single character (\\n) on most modern systems. This is typically hidden to regular users, because many programs apply line breaks normalization procedures (which may depend on the underlying OS).\nHowever, this is a source of bugs for developers, in certain scenarios. For instance:\nwhen generating code, when dealing with virtual environments (e.g. a Docker image), when sharing code via unconventional means (i.e. not via git), etc. Usage # Your IDE is an (enhanced) text editor, so you can use it as such. But it some scenarios, it can be useful to use a lighter program, for instance for:\nediting the configuration file of a program, modifying a small script (or even a single command-line instruction) copy-pasted from the web, etc. Among other reasons:\nopening an IDE can take time, if your IDE has autosave enabled, you may accidentally add unrelated files to your current project, Advanced text editors # For this course, a basic text editor is sufficient. But depending on your workflow, you may want to try a more advanced one.\nVSCode # VSCode is introduced in the section dedicated to IDEs.\nvi and Emacs # These are two keyboard-centric editors. Both were developed in the 70\u0026rsquo;s (before the mouse became a widespread peripheral) but are still commonly used today (in some form) by developers.\nWe do not recommend learning vi or Emacs at this (early) stage of your studies, because it requires time (and you arguably have more fundamental thing to learn). But you may give them a try at some point of your career, because they can significantly improve your productivity.\nvi/vim/neovim # vi was initially released 1978, as part of the first BSD distribution. The original program is rarely used today, but vim (for \u0026ldquo;vi improved\u0026rdquo;), released in 1991, and neovim, released in 2015 are still popular among developers. For instance, 22% (resp. 12%, non-exclusive) of respondents to the 2023 Stack Overflow developer survey use vim (resp. neovim) as a code editor.\nvi/vim/neovim is a so-called modal editor, meaning that users can switch between different modes. In one mode, pressing a standard key inserts the corresponding character, whereas in another mode, pressing the same key has a different functionality (navigation, copy, paste, etc.). These functionalities are referred to as vi keybindings or vi motions, and allow performing a variety of text editing operations in an efficient way.\nvi keybindings are commonly used in applications other than vi/vim/neovim, with dedicated plugins. For instance, most code editors/IDEs (VSCode, IntelliJ IDEA, Emacs, etc.), terminal emulators or even web browsers have plugins for vi keybindings.\nNote. vim and neovim are very customizable, with comprehensive collections of (community-developed) plugins, which allows using them as IDEs. We do not recommend trying this at this stage of your studies, because configuration may require a significant time investment (more than VSCode for instance).\nWarning. The original vi still comes pre-installed on many operating systems (Windows, macOS, Linux, \u0026hellip;), and may be the default text editor opened by terminal-based applications (e.g. git) on your system. If this is the case (and if you do not know the vi keybindings), then we recommend changing this setting.\nEmacs # Emacs was initially written in 1976. The most popular version is GNU Emacs, released in 91, was notably co-developed by Richard Stallman.\nEmacs is partly responsible for popularizing (sequences of) combinations of keys (e.g. Ctrl+\u0026lt;letter\u0026gt;), as opposed to modal editors like vi. GNU Emacs has more than 10 000 built-in commands, and also provides a (limited) mouse interface.\n5% of respondents to the 2023 Stack Overflow developer survey use Emacs as a code editor.\nEmacs is also very customizable, with a comprehensive collections of (community-developed) plugins (probably more comprehensive than vim), and dedicated software repositories. Notably, Emacs tends to serve as a unique user interface for a variety of tasks (code editing, terminal emulation, email management, web browsing, playing music/videos, etc.).\nNote. Emacs can be used as an IDE, but for the same reason as for vim or neovim, we do not recommend trying this at this stage of your studies.\n"},{"id":24,"href":"/docs/env/sections/ide/","title":"IDE","section":"Development environment","content":" Integrated development environment (IDE) # An IDE is a text editor with additional functionalities for programmers.\nClassical functionalities of an IDE include:\ncode parsing and coloration, code completion, type checking (for typed languages), navigation to variable/method/class/interface declaration, navigation to variable/method/class/interface usage, refactoring (e.g. renaming a variable/method/class/interface in a whole project), diagnostics (e.g. in case of a parsing or typing error), a debugger, integration with built automation tools (e.g. Maven and Gradle for Java). For this course, you can use any IDE (or enhanced text editor) for Java with the features above. In this section, we give a brief overview of the most popular options.\nVisual Studio Code (VSCode) # Warning. VSCode and Visual Studio are two independent programs, and serve different purposes. In particular, Visual Studio does not natively support Java anymore (although this may technically be achieved with an LSP server and a DAP debugger, as explained below).\nVSCode is a (mostly) open-source project, primarily developed by Microsoft. Precisely, Code-OSS is a (fully) open source editor, and VSCode is a distribution of Code-OSS with additional features.\nVSCode is a general-purpose code editor, initially designed with a focus on web development (Node.js/Javascript). VSCode has probably become the most popular code editor among developers. For instance, it is used by 74% of respondents of the 2023 StackOverflow developer survey.\nNote. VSCode is often categorized as a \u0026ldquo;code editor\u0026rdquo; rather than an IDE. For this course, VSCode (together with some plugins) can serve as a Java IDE, so we will refer to it as an IDE for simplicity.\nExtensibility # The success of VSCode is often explained by its rich repository of (community-developed) plugins. At least two factors played a role:\nWeb development stack # VSCode is based on Electron, which allows writing plugins in Javascript, taking advantage of a vast ecosystem of code written for web applications (notably for graphical components).\nLSP and DAP # VSCode developers introduced standardized protocols for some IDE functionalities (like the ones listed above): the Language Server Protocol (LSP) and the Debug Adapter Protocol (DAP). These protocols specify (programming language independent) interfaces for communication between a code editor and a so-called \u0026ldquo;language server\u0026rdquo; (for LSP) or a debugger (for DAP).\nThis led to the development of LSP servers and DAP debuggers (or more often interfaces for existing debuggers) for a variety of programming languages (a list of LSP servers and features they implement can be found here).\nAn additional benefit is that other editors (notably neovim, Emacs and Visual Studio) have developed support LSP servers and DAP debuggers.\nfor Java # VSCode can be used as a Java IDE (at least to some extent) thanks to some plugins. For this course, you may use the extension pack for Java. If you choose the board game as your project, you may also need a plugin for Gradle, such as this one.\nIn some cases, using VSCode may require a little bit more configuration than a Java-centric IDE.\nEclipse, Netbeans and Intellij IDEA # These three editors have similar functionalities, and any of these three can be used for this course. All three were designed with Java in mind, and thus offer advanced integration with a variety of Java frameworks. Each of them also supports other programming languages, but the list varies from one editor to the other.\nAs of today, Intellij IDEA (IntelliJ for short) is probably the most popular Java-centric editor. This is a closed-source project, thus offering more limited customization than the other two.\nEclipse is an open-source project with a large ecosystem. It is known for its community support and its advanced plugin system, which led to the development of multiple extensions over the years (including support for C/C++, Python, etc.). Note that for performance reasons, Eclipse comes with its own Java Virtual Machine (JVM), which in some (rare) cases may not behave like other JVMs.\nNetbeans is also an open-source project. Notably, Netbeans provides a graphical tool to design Graphical User Interfaces (GUIs) for the Java Swing framework. However, we do not recommended using it for an advanced GUI (multiple windows, etc.), because the generated code can be very difficult to maintain or debug.\n"},{"id":25,"href":"/docs/env/sections/eval/","title":"Evaluation environment","section":"Development environment","content":" Evaluation environment # The evaluation environment for your project is a virtual machine (with Ubuntu 20) deployed on Microsoft Azure.\nYou are not supposed to develop on this machine, but your project must run in this environment to be evaluated.\nThe first lab provides instructions to use this virtual environment.\n"},{"id":26,"href":"/docs/labs/env/sections/eval/","title":"Evaluation environment","section":"First lab","content":" Evaluation environment # The evaluation environment for your project is a virtual machine (with Ubuntu 20) deployed on Microsoft Azure. You are not supposed to develop on this machine, but your project must run in this environment to be evaluated.\nEach student gets his or her own clone of the original machine. Maven, Gradle, git and a Java 21 JDK are already installed.\nYou can log in to this machine via ssh (using a terminal), or via RDP (using an RDP client). In the remainder of this section, we will use RDP.\nRDP client # In order to connect via RDP, you need an RDP client.\nHere is a (non-exhaustive) list of RDP clients:\nWindows:\nWindows Remote Desktop (installed by default), also called MSTSC Royal TS macOS:\nMicrosoft Remote Desktop Royal TS Linux:\nRemmina rdesktop Login # The registration link is shared on the Microsoft Team for this course. After logging in (with your Unibz credentials), you should see the following:\nToggling the button (bottom-left) will start your own clone of the virtual machine (this may take a few minutes).\nOnce your machine is running, click on the 3 dots (bottom right) and select \u0026ldquo;show RDP information\u0026rdquo;. This will give you the string (host name and port) needed by your RDP client to connect to the machine.\nThe credentials for logging in to the machine are shared on the Microsoft Team for this course.\nKeyboard layout # Once connected, you can select a keyboard layout (English, German or Italian) from the drop-down menu at the top right of the screen.\nStarting an application # You can use the super key (a.k.a. \u0026ldquo;Windows key\u0026rdquo;) or click on \u0026ldquo;Activities\u0026rdquo; (top left) to display the application menu below.\nTo launch a terminal, click on the terminal icon in this menu or press \u0026ldquo;Ctrl + Alt + t\u0026rdquo;.\n"},{"id":27,"href":"/docs/env/sections/terminal/","title":"Terminal","section":"Development environment","content":" Terminal # Using a terminal can be necessary during development, in order to execute a program that does not have a graphical user interface (GUI).\nBut even when a GUI is available, a Command Line Interface (CLI) can still be the preferred way to interact with some programs. Possible benefits are:\nefficiency (thanks to autocompletion, there is very little to type), automation (via scripting), more transparency (a GUI may add a layer of obfuscation), stability over time (GUIs tend to change from one version of a program to another), a wider range of available actions (a GUI may allow you to execute a limited set of commands only), reproducibility (the same command performs the same action, with a limited reliance on memory), customizability. Shell # A shell interprets command typed in a terminal. It can also interpret programs (usually called scripts).\non Linux # The default shell on most Linux distributions is bash.\non macOS # The default shell on macOS is zsh. It extends bash with modern features (notably customization options, via plugins).\non Windows # Windows comes with two shells by default:\na (mostly) legacy shell called Command Prompt, a more modern shell called Windows PowerShell. Warning. PowerShell is a closely related (cross-platform) shell developed by Microsoft. It is not fully compatible with Windows PowerShell (they are currently meant to \u0026ldquo;coexist\u0026rdquo;).\nOther shells are commonly used by Windows developers that offer a (possibly partial) Linux-like shell experience. Popular options include:\ngit bash (often used to learn git), Cygwin, WSL, whose latest version runs a full (Arch) Linux virtual machine. Autocompletion # Modern shells provide at least two types of command autocompletion:\ncompletion based on your command history, and smart completion (a.k.a. \u0026ldquo;Tab-completion\u0026rdquo;) for possible arguments, paths, etc. As a result, using a terminal requires very little typing.\nBy default, autocompletion may not be activated (or installed) on your machine. We will see how to do it during the first lab.\n"},{"id":28,"href":"/docs/labs/env/sections/demo/","title":"Using a terminal (demo)","section":"First lab","content":" Using a terminal (demo) # The following demo is meant to (quickly) illustrate some benefits of a properly configured terminal, as well a few terminal-based applications.\nThis is not an introduction to bash or Linux core utilities.\nVirtual environment # For this demo, we deployed a virtual machine with a pre-configured terminal.\nThe instructions for connecting to this machine are identical to the one for the project evaluation environment.\nCreating a static website # As an exercise, we will create a static website, using a simple framework called Hugo.\nFirst, in our home folder, let us create a subfolder dedicated to our projects. For instance, we can call this subfolder workspace. To create this folder, open a terminal and run:\nmkdir workspace Then navigate to this folder with the command cd (you do not need to type the full name of the directory, just type cd w, and press the Tab key for autocompletion):\ncd workspace Next, we will (loosely) follow the quick start tutorial for Hugo. Explanations about some of the command below can be found here.\nCopy-paste the following instruction and press Enter:\nhugo new site mySite This will create a project in a fresh folder called mySite. Let us navigate to it (again, you can take advantage of autocompletion):\ncd mySite Now copy-paste the following commands to declare this folder as a git repository and download a graphical theme for our website:\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Navigation # At any moment, you can run the command:\npwd to display the current directory. With this command, you can check that you are indeed in the folder mySite.\nTo get a overview of the content of the current folder, run:\nll To get a recursive overview of the content of this folder, run:\ntree In order to navigate to a certain subfolder in this tree, we can take advantage of the fuzzy finder. For instance, let us assume that we want to move to some folder called socials, but we forgot its exact path.\nRun:\nc This will display the paths to all directories in this tree. You can type characters to restrict your search, and use the up down arrow keys to select your destination. For instance, type the three character soc. The best matches are displayed at the bottom of the list. To select one of them, navigate up and down with the arrow keys and press Enter.\nNote. Thanks to fuzzy search, the characters that you type do not need to be contiguous in a path. For instance, when you typed soc, all paths containing these three letters (in that order, but not necessarily contiguous) were retained.\nNow let us navigate back to the mySite folder. Here we can use zoxide, which uses our path navigation history to allow faster navigation. Run:\nzi and then type (the beginning of) mySite.\nSimilarly, to go back to the socials subfolder that we previously went to, run:\nzi again and type (the beginning of) socials.\nAlternatively, you can switch between your current location and the previous one (thanks to zoxide still) with:\nzz Starting the web server # Navigate (back) to the mySite folder (you should know how to do this by now), and run:\nhugo server This will start a local development server for our website. To visualize the site, open Firefox (from the app menu), and use the address displayed in the terminal (it should be http://localhost:1313/)\nTo stop the server (or any Linux process running in a terminal), go back to the terminal an press Ctrl+C.\nNext, we will add content to our website, while keeping the server running.\nTo restart the server, we can use our command history. Type the first letters of the command that we used above to start the serve (e.g. hu). By pressing the up and down arrow keys, you can scroll through the commands that you already typed and start with these letters. Scroll until you find the command hugo server, and press Enter to restart the server.\nIn order to keep the server running, we will execute our next command in another terminal. You can create a new one by clicking on the boxed \u0026ldquo;+\u0026rdquo; icon:\nAdding content # Navigate to the (immediate) subfolder content of mysite. Then create a subfolder named posts:\nmkdir posts Navigate to this new folder. Then create a new text file called myPost.md. You can for instance do this with the command:\ngedit myPost.md which will open a new file with this name in text editor \u0026ldquo;gedit\u0026rdquo;.\nNote. If you only type ge followed by Tab, the shell will suggest you a list of programs whose name starts with these letters. You can scroll through them by pressing Tab again, or add a letter to disambiguate your search.\nIn the text editor, copy-paste the following content:\n+++ title = \u0026#39;My First Post\u0026#39; date = 2024-01-14T07:07:07+01:00 +++ ## Introduction This is **bold** text, and this is *emphasized* text. ### Subsection This is a [link](https://gohugo.io) to the Hugo website. In this file, everything below the header (title/date) is written in Markdown.\nSave the file, and check with Firefox that your first post has been added to your website.\nWarning. To see your changes, you may need to force Firefox to clear its cache: in \u0026ldquo;Settings | Privacy \u0026amp; Security | Cookies and Site Data\u0026rdquo;, click on the \u0026ldquo;Clear Data\u0026rdquo; button.\nIf this does not work, then you can stop and restart the Hugo server, as explained above.\nAliases # The command c that we used above is an alias for a more complex command, namely cd $(find * -type d | fzf)\nWe declared this alias in the file ~/.zshrc (remember that ~ is a shortcut for your home folder).\nLet us open this file to see the declaration of this alias. Navigate to your home folder, for instance with:\ncd And list its content:\nll The file .zshrc should be there. Open this file with gedit:\ngedit .zshrc Note. Again, you can take advantage of autocompletion here. For instance, press ged followed by Tab followed by .z followed by Tab.\nTowards the end of this file, you will see the declaration of the alias:\nalias c=\u0026#39;cd $(find * -type d | fzf)\u0026#39; Let us create another useful alias. Ubuntu has a convenient command called xdg-open that opens a file with the default application associated to this file\u0026rsquo;s extension (this is the equivalent of a double-click in a graphical file browser). Let us set a simpler name than xdg-open to execute this command. For instance o (like \u0026ldquo;open\u0026rdquo;).\nFirst, let us check that the name o is not used already for another command. Open a new terminal and run:\no You should get a \u0026ldquo;command not found\u0026rdquo; message, which confirms that this command is free.\nNow let us add the following line to the .zshrc file:\nalias o=\u0026#39;xdg-open\u0026#39; Save the file and open a new terminal.\nYou can now use the o command to open any file.\nTo see this, let us navigate back to the socials folder that we were previously in (e.g. using zi, as explained above). If you list the files in this folder (with ll), then you will see that they have the .svg extension. To open one of these files, you can type o and the first letters of the name of the file, then Tab for autocompletion. This will open the file with the default image viewer application on this machine.\nScripts # If you want to use an alias to execute a (possibly complex) sequence of commands, then the preferred way is to write a script.\nFor instance, we could write a script that navigates to the mySite folder and then starts the hugo server. And we may use the alias ws (like \u0026ldquo;website\u0026rdquo;) to call this script (you can check that it is free).\nNavigate to the ~/bin folder, and create a text file called ws (for instance with gedit, as we did above for the post).\nIn this file, copy-paste the following:\n#! /bin/bash cd ~/workspace/mySite hugo server start Observe that these are the two instructions for the two tasks that we want to execute. Save the file, and make it executable by running:\nsudo chmod u+x ws To test your script, close all running instances of hugo (if any), e.g. with Ctrl + C, as explained above.\nNow regardless of your location, you can type ws to start the web server.\nNote. Linux shells (such as bash or zsh) support the same language for commands and scripts. This is a full-fledged programming language (with conditional statements, loops, etc.), where an instruction can also be a command.\nTerminal-based applications # To conclude the demo, we introduce a few convenient applications that run in a terminal. These may save you time (compared to similar applications that rely on a GUI).\nripgrep # ripgrep allows you to search files that contain certain words or regular expressions (your IDE offers a similar functionality). For instance, let us assume that we want to search for all files under mySite that contain the string \u0026ldquo;Canada\u0026rdquo;.\nNavigate to the mySite folder. Then run:\nrg Canada This will display the path to each (text) file that contains this word (in this example, there is only one match), and the corresponding line numbers.\nranger # ranger is a popular terminal-based file browser.\nTo open it, type:\nranger You can navigate within the current directory with the up and down arrow keys, and in the directory tree (from child to parent and conversely) with the left and right arrow keys. Note that it also displays previews of text files.\nTo quit ranger, you can press the letter q.\nhtop # htop allows you to monitor processes running on your machine. To open it, type:\nhtop The upper part of the interface displays memory and CPU usage, whereas the lower part displays running process (sorted by CPU usage by default). You can kill a process with F9.\nTo quit htop, you can press the letter q.\nncdu # ncdu allows you to visualize the amount of disk space taken by your files and programs.\nTo open it, type:\nncdu The folders and files in the current folder are sorted by disk space, and you can navigate the directory tree using the arrow keys (like with ranger).\nTo quit ranger, you can press the letter q.\n"},{"id":29,"href":"/docs/intro/sections/quiz/","title":"Quiz","section":"This course","content":" Quiz # To answer the quiz (and check your answers), click here or scan this code:\nWe reproduce below the questions, for readability.\nHierarchical file system # On most modern computers, for a given user:\nthe desktop is a directory the desktop is the home directory the desktop is a sub-directory of the home directory the desktop is the root of the hierarchical file system the home directory is the root of the hierarchical file system the home directory may contain hidden files files outside of the home directory are hidden every file has an absolute path a file may have multiple absolute paths two files may share an absolute path an absolute path can contain .. Sets # Which of these are sets?\n\\( \\{a, b\\}\\) \\( (a, b) \\) \\( \\{a, b, a\\}\\) \\(\\{\\}\\) \\( \\{\\{a\\}\\} \\) \\( \\{\\{\\}\\} \\) \\((())\\) \\(\\{()\\}\\) \\(((a, b))\\) \\(\\{(a, b)\\}\\) \\(\\{(a, b), (c, d)\\}\\) \\(\\{(a, b), (a, b)\\}\\) \\(\\{(a, b), (b, a)\\}\\) \\(\\{\\{a\\}, \\{\\}\\}\\) \\((\\{a\\}, \\{\\})\\) \\(\\{\\{a\\}, \\{a\\}\\}\\) \\(\\{\\{a\\}, \\{a\\}, \\{b\\}\\}\\) \\(\\{\\{a, b\\}, \\{a\\}\\}\\) \\(\\{\\{a, b\\}, \\{b, a\\}\\}\\) \\(\\{\\{a, b\\}, \\{b, a\\}, \\{c\\}\\}\\) If $S$ is a finite set of size $n$, then the set of all subsets of $S$ has size:\n$0$ $n/2$ $n$ $n^2$ $2^n$ $n^n$ infinite I do not know the answer Trees # How many nodes in this picture are the root of a tree?\n$0$ $1$ $2$ $3$ $4$ $6$ $10$ infinitely many Boolean expressions\nThe boolean expression\n!( !( !(x = 5) \u0026amp; y \u0026lt;= 2) | z \u0026lt; 1) is equivalent to:\nx != 5 \u0026amp; y \u0026gt; 2 \u0026amp; z \u0026gt;= 1 x != 5 \u0026amp; y \u0026lt;= 2 \u0026amp; z \u0026gt;= 1 x != 5 | y \u0026gt; 2 | z \u0026gt;= 1 x != 5 | y \u0026lt;= 2 | z \u0026gt;= 1 x = 5 | y \u0026lt;= 2 | z \u0026gt;= 1 (x != 5 | y \u0026lt;= 2) \u0026amp; z \u0026gt;= 1 x != 5 | (y \u0026lt;= 2 \u0026amp; z \u0026gt;= 1) (x != 5 \u0026amp; y \u0026lt;= 2) | z \u0026lt; 1 (x = 5 \u0026amp; y \u0026lt;= 2) | z \u0026lt; 1 x = 5 \u0026amp; (y \u0026lt;= 2 | z \u0026lt; 1) I do not know the answer Java # In order to be executed, a Java program must be: *\ncompiled interpreted either compiled or interpreted both compiled and interpreted neither compiled nor interpreted I do not know the answer What does the following Java program print?\nint a = 0; int b = 1; myMethod(a, b); System.out.println(a); System.out.println(b); void myMethod(int firstInteger, int secondInteger) { secondInteger = firstInteger; firstInteger = secondInteger; System.out.println(firstInteger); System.out.println(secondInteger); } a, b, 1, 0 a, b, 0, 0 1, 0, a, b 0, 0, a, b 1, 0, 1, 0 1, 0, 0, 1 0, 0, 0, 1 0, 0, 0, 0 0, 1, 1, 0 0, 1, 0, 0 Algorithm # Consider the following method (written in pseudocode).\nboolean myMethod(int x){ if (x == 0){ return true } if (x \u0026lt; 0){ return false } return myMethod(x - 3) } This method:\nis recursive may not terminate returns true iff x is a positive multiple of 3 returns true iff x is a positive power of 3 returns true iff x is a Fibonacci number returns true iff x is a multiple of the third Fibonacci number returns true iff x is a power of the third Fibonacci number returns true iff x is smaller than 2^3 returns true iff x is smaller than 9 returns true iff x is smaller than 3! "},{"id":30,"href":"/docs/labs/env/","title":"First lab","section":"Docs","content":" First lab: working environment # Terminal and text editor Shell autocompletion Installing software with a package manager ssh key Default text editor for git Evaluation environment Using a terminal (demo) "}]