<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multithreading on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/multithreading/</link>
    <description>Recent content in Multithreading on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/multithreading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/concurrency/</guid>
      <description>&lt;h1 id=&#34;concurrency&#34;&gt;&#xA;  Concurrency&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concurrency&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;core&#34;&gt;&#xA;  Core&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#core&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;A &lt;strong&gt;core&lt;/strong&gt; is a basic processing unit.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A Central Processing Unit (CPU) contains one or several cores (e.g. 4 or 8).&lt;/p&gt;&#xA;&lt;p&gt;A Graphical Processing Unit (GPU) can contain thousands of cores.&lt;/p&gt;&#xA;&lt;h2 id=&#34;parallelVsConcurrent&#34;&gt;&#xA;  Parallelism vs concurrency&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#parallelVsConcurrent&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;!--For instance, Alice may:--&gt;&#xA;&lt;!----&gt;&#xA;&lt;!--- open a text editor to edit a file,--&gt;&#xA;&lt;!--- then open a terminal and use git to add commit and push her modifications to this file,--&gt;&#xA;&lt;!--- the close the terminal,--&gt;&#xA;&lt;!--- then close the text editor.--&gt;&#xA;&lt;!----&gt;&#xA;&lt;!--In this scenario, the three git tasks overlaps with the instances of the text editor and the terminal.--&gt;&#xA;&lt;!--Note that the text editor and the terminal were started independently,--&gt;&#xA;&lt;!--whereas the git tasks were **spawned** by the terminal--&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;We call &lt;strong&gt;time span&lt;/strong&gt; of a (computational) tasks the time interval comprised between the task&amp;rsquo;s start and completion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process vs thread</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/thread/</guid>
      <description>&lt;h1 id=&#34;thread&#34;&gt;&#xA;  Thread&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thread&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;process&#34;&gt;&#xA;  Process&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#process&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;A &lt;strong&gt;process&lt;/strong&gt; is (usually) an instance of a computer program.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Processes can &lt;em&gt;interact&lt;/em&gt; in several ways.&#xA;In particular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a process may &lt;em&gt;spawn&lt;/em&gt; another process,&lt;/li&gt;&#xA;&lt;li&gt;a process may &lt;em&gt;wait&lt;/em&gt; for another process to terminate or release a &lt;em&gt;lock&lt;/em&gt; on some resource.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;thread&#34;&gt;&#xA;  Thread&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thread&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;A process consists of one or several &lt;strong&gt;threads&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Conceptually, a thread is similar to a process.&#xA;In particular, threads can interact analogously to processes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simplified view</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/simple/</guid>
      <description>&lt;h1 id=&#34;a-simplified-view&#34;&gt;&#xA;  A simplified view&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#a-simplified-view&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;From an abstract perspective, in order to understand the properties of a program that allows concurrency and/or parallelism, it can be convenient to assume a simplified, ideal machine that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;has an unlimited number of cores, and&lt;/li&gt;&#xA;&lt;li&gt;relies exclusively on parallelism (no concurrency).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;parallel-computation&#34;&gt;&#xA;  Parallel computation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#parallel-computation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this section, we borrow the simple syntax for parallel computation used in the popular textbook &lt;a href=&#34;https://en.wikipedia.org/wiki/Introduction_to_Algorithms&#34;&gt;Introduction to algorithms&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This syntax extends imperative pseudocode with three keywords:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Race condition</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/race/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/race/</guid>
      <description>&lt;h1 id=&#34;race-condition&#34;&gt;&#xA;  Race condition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#race-condition&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A &lt;strong&gt;race condition&lt;/strong&gt; occurs when the outcome of a program may vary depending on the order in which two threads access a resource.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;illustrations&#34;&gt;&#xA;  Illustrations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#illustrations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&#xA;The following program (in pseudocode) apparently increments variable &lt;code&gt;i&lt;/code&gt; twice.&#xA;However, it may output either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;, depending on the execution environment:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spawn i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sync&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason is that a core does not increment the value of a variable as an &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/multithreading/sections/abstractions/#atomic&#34;&gt;atomic operation&lt;/a&gt;.&#xA;Instead, an increment is a sequence of three instructions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synchronization</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/synchronization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/synchronization/</guid>
      <description>&lt;h1 id=&#34;synchronization&#34;&gt;&#xA;  Synchronization&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#synchronization&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The behavior of a program that runs multiple threads can be hard to predict.&#xA;In particular, two threads may compete to access a same resource (e.g. the value of some object&amp;rsquo;s attribute),&#xA;without guarantee on the &lt;em&gt;order&lt;/em&gt; in which they access it.&#xA;This may lead (among other things) to a &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/multithreading/sections/race/&#34;&gt;race condition&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Programming languages that support multithreading also allow expressing &lt;em&gt;constraints&lt;/em&gt; on the order of execution of some instructions.&#xA;For instance, we saw &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/multithreading/sections/simple/#spawnSync&#34;&gt;earlier&lt;/a&gt; that a thread can be forced to wait for a child thread to terminate before resuming its execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Troubleshooting</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/troubleshooting/</guid>
      <description>&lt;h1 id=&#34;troubleshooting&#34;&gt;&#xA;  Troubleshooting&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#troubleshooting&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Alongside &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/multithreading/sections/race/&#34;&gt;race conditions&lt;/a&gt;, there are several reasons why a program that uses multithreading may not behave as intended.&lt;/p&gt;&#xA;&lt;p&gt;Two common ones are deadlocks and (to a lesser extent) starvation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;deadlock&#34;&gt;&#xA;  Deadlock&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deadlock&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;A &lt;strong&gt;deadlock&lt;/strong&gt; occurs when two threads wait for each other to release a (different) lock.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This notion also generalizes to cyclic deadlocks involving more than two threads.&lt;/p&gt;&#xA;&lt;p&gt;In Java, this may be caused by synchronized methods or statements.&#xA;An illustration can be found &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/deadlock.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstractions</title>
      <link>https://unibz-pp-24-25.github.io/docs/multithreading/sections/abstractions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/multithreading/sections/abstractions/</guid>
      <description>&lt;h1 id=&#34;abstractions&#34;&gt;&#xA;  Abstractions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#abstractions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;We review here some higher-level utilities available in Java to use multithreading, while reducing the risk of unwanted behaviors.&lt;/p&gt;&#xA;&lt;h2 id=&#34;thread-safety&#34;&gt;&#xA;  Thread safety&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thread-safety&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;A method is said to be &lt;strong&gt;thread-safe&lt;/strong&gt; if it can be accessed concurrently by several threads without &amp;ldquo;unexpected&amp;rdquo; consequences.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Thread safety is a vague term, which may for instance refer to implementations that are free of &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/multithreading/sections/race/&#34;&gt;race conditions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Most high-level libraries or frameworks that exploit concurrency provide methods with some from of thread safety.&#xA;In particular, this is the case of most &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_widget_toolkits#Based_on_Java&#34;&gt;Graphical User Interface frameworks&lt;/a&gt; (such as JavaFX or Swing for Java).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
