<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>First-class methods on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/lambda/</link>
    <description>Recent content in First-class methods on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functional programming</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/functional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/functional/</guid>
      <description>&lt;h2 id=&#34;functional-programming&#34;&gt;&#xA;  Functional programming&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#functional-programming&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;A functional programming language&lt;/strong&gt; allows writing programs by (primarily) applying and composing functions.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;Functional languages include Haskell, ML, Erlang/Elixir, OCaml, Clojure, F#, or Scala.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In contrast, an imperative language (like C/C++, Java, Python, JavaScript, etc.) relies on instructions that modify the state of a program (i.e. the values of variables, objects, data structures, etc.).&lt;/p&gt;&#xA;&lt;h3 id=&#34;foundations&#34;&gt;&#xA;  Foundations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#foundations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Functional programming is rooted in (typed) &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;lambda calculus&lt;/a&gt;,&#xA;a model of computation exclusively based on (anonymous) function composition and application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pure function</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/pure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/pure/</guid>
      <description>&lt;h1 id=&#34;pure-function&#34;&gt;&#xA;  Pure function&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pure-function&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;side-effects&#34;&gt;&#xA;  Side effects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#side-effects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A method has &lt;strong&gt;side effects&lt;/strong&gt; if it modifies resources (variable, object, array, etc.) that are accessible outside of its scope.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;&#xA;  Definition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A pure function is a method that largely behaves like a mathematical function.&#xA;More precisely:&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A &lt;strong&gt;pure function&lt;/strong&gt; is a method that:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;returns a value,&lt;/li&gt;&#xA;&lt;li&gt;returns the &lt;em&gt;same&lt;/em&gt; value if called twice with the same arguments, and&lt;/li&gt;&#xA;&lt;li&gt;has no side-effect.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-tabs&#34;&gt;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-exercise_pure_function&#34; id=&#34;tabs-exercise_pure_function-0&#34; checked=&#34;checked&#34; /&gt;&#xA;&lt;label for=&#34;tabs-exercise_pure_function-0&#34;&gt;Exercise&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;p&gt;The Java method &lt;code&gt;createUsers&lt;/code&gt; below is not a pure function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anonymous method</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/anonymous/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/anonymous/</guid>
      <description>&lt;h1 id=&#34;anonymous-method&#34;&gt;&#xA;  Anonymous method&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anonymous-method&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;An &lt;strong&gt;anonymous method&lt;/strong&gt; is a method without a name.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;illustration&#34;&gt;&#xA;  Illustration&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#illustration&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We saw &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/functional/#anonymous&#34;&gt;earlier&lt;/a&gt; that two mathematical functions may only differ by their names.&#xA;This also holds for two methods:&lt;/p&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toThePowerOfTwo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;So in a sense, these two methods are the &lt;em&gt;same&lt;/em&gt; method.&lt;/p&gt;&#xA;&lt;p&gt;An anonymous method abstracts away from the name of the method.&#xA;For instance, in Java, the two methods above could be described with the following &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/lambda/&#34;&gt;lambda expression&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda expression</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/lambda/</guid>
      <description>&lt;h1 id=&#34;lambda-expression&#34;&gt;&#xA;  Lambda expression&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lambda-expression&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In certain programming languages like Java, C#, C++ or JavaScript, the term &lt;strong&gt;lambda expression&lt;/strong&gt; is used to denote an anonymous method with a certain syntax.&lt;/p&gt;&#xA;&lt;p&gt;The term is a (loose) reference to &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;lambda calculus&lt;/a&gt;, a model of computation exclusively based on function composition and application.&lt;/p&gt;&#xA;&lt;h2 id=&#34;syntax-in-java&#34;&gt;&#xA;  Syntax in Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#syntax-in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A Java method&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ReturnType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myMethod&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Type 1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;argument 1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, .., &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Type n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;argument n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;){ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Body&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;can be written anonymously as the lambda expression:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type of a method</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/type/</guid>
      <description>&lt;h1 id=&#34;type-of-a-method&#34;&gt;&#xA;  Type of a method&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#type-of-a-method&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;The &lt;strong&gt;type&lt;/strong&gt; (a.k.a. &lt;strong&gt;signature&lt;/strong&gt;) of a method consists of:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the type(s) of its argument(s), and&lt;/li&gt;&#xA;&lt;li&gt;its return type.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Notation.&lt;/em&gt;&lt;/strong&gt;&#xA;The type of a method is sometimes described analogously to the type of a mathematical &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/background/sections/set_tuple_map/#function&#34;&gt;function&lt;/a&gt;.&#xA;For instance, consider the following Java method &lt;code&gt;square&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method takes as input an &lt;code&gt;int&lt;/code&gt;, and returns an &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In other words, this is a function with domain &lt;code&gt;int&lt;/code&gt; and codomain &lt;code&gt;int&lt;/code&gt;.&#xA;This is written:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Callback method</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/callback/</guid>
      <description>&lt;h1 id=&#34;callback-method&#34;&gt;&#xA;  Callback method&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#callback-method&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;When a method takes another method as argument, the latter is a &lt;strong&gt;callback method&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Anonymous methods are often used as callback methods.&lt;/p&gt;&#xA;&lt;h2 id=&#34;in-java&#34;&gt;&#xA;  in Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;running-example&#34;&gt;&#xA;  Running example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#running-example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&#xA;The two following Java methods have the same structure: both modify each unit in the input list.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boostUnits&lt;/span&gt;(List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; units){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(Unit unit: units){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      unit.&lt;span style=&#34;color:#a6e22e&#34;&gt;health&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;penalizeGreenUnits&lt;/span&gt;(List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; units){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(Unit unit: units){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(unit.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;)){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            unit.&lt;span style=&#34;color:#a6e22e&#34;&gt;health&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In each case, let us isolate the modification that is applied to a single unit, with a dedicated method (called &lt;code&gt;boost&lt;/code&gt; and &lt;code&gt;penalizeGreen&lt;/code&gt; respectively).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Free variable and closure</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/closure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/closure/</guid>
      <description>&lt;h1 id=&#34;free-variable-and-closure&#34;&gt;&#xA;  Free variable and closure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#free-variable-and-closure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;illustration&#34;&gt;&#xA;  Illustration&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#illustration&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;In a &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/functional/#functional_example&#34;&gt;previous exercise&lt;/a&gt;, we encountered the two following functions (renamed here $f$ and $g$, instead of $f_2$ and $g_2$):&lt;/p&gt;&#xA;&lt;p&gt;$$f(x,y) = g(x)(y)  \qquad \qquad \qquad g(x) = y \mapsto x^y$$&lt;/p&gt;&#xA;&lt;p&gt;If we fix two values for $x$ and $y$ (e.g. 5 and 6), then from the definition of $f$:&lt;/p&gt;&#xA;&lt;p&gt;$$f(5,6) = g(5)(6)$$&lt;/p&gt;&#xA;&lt;p&gt;In this equation,&#xA;$g(5)$ evaluates to the &lt;em&gt;function&lt;/em&gt; $y \mapsto 5^y$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://unibz-pp-24-25.github.io/docs/lambda/sections/currying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/lambda/sections/currying/</guid>
      <description>&lt;h1 id=&#34;currying&#34;&gt;&#xA;  Currying&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#currying&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;illustration&#34;&gt;&#xA;  Illustration&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#illustration&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example (continued).&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;In the &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/closure/&#34;&gt;previous section&lt;/a&gt;, we encountered the function $g \colon \mathbb{N} \to (\mathbb{N} \to \mathbb{N})$ defined by:&lt;/p&gt;&#xA;&lt;p&gt;$$ g(x) = y \mapsto x^y$$&lt;/p&gt;&#xA;&lt;p&gt;As we saw in a &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/functional/#functional_example&#34;&gt;previous exercise&lt;/a&gt;, for any pair $(x,y) \in \mathbb{N} \times \mathbb{N}$:&#xA;$$ g(x)(y) = x^y $$&lt;/p&gt;&#xA;&lt;p&gt;The function $g$ is called the &lt;strong&gt;currying&lt;/strong&gt; (or &lt;strong&gt;curried form&lt;/strong&gt;) of the function&lt;/p&gt;&#xA;&lt;p&gt;$$(x, y) \mapsto x^y $$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;notation&#34;&gt;&#xA;  Notation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#notation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Before defining currying, we introduce a convenient notation:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
