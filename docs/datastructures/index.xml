<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data structures on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/datastructures/</link>
    <description>Recent content in Data structures on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/datastructures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic array and linked list</title>
      <link>https://unibz-pp-24-25.github.io/docs/datastructures/sections/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/datastructures/sections/list/</guid>
      <description>&lt;h1 id=&#34;dynamic-arrays-and-linked-lists&#34;&gt;&#xA;  Dynamic arrays and linked lists&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dynamic-arrays-and-linked-lists&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;array&#34;&gt;&#xA;  Dynamic array&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#array&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A dynamic array is typically used to implement the abstract data type &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/abstractdatatypes/sections/list/&#34;&gt;list&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;structure&#34;&gt;&#xA;  Structure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#structure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;A &lt;strong&gt;dynamic array&lt;/strong&gt; stores the elements of a list in a regular array $A$, and keeps track of the size of the list.&#xA;If the size of the list exceeds the capacity of $A$, then the content of $A$ is copied into a larger array $A&amp;rsquo;$,&#xA;and $A$ is replaced with $A&amp;rsquo;$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hash table</title>
      <link>https://unibz-pp-24-25.github.io/docs/datastructures/sections/hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/datastructures/sections/hash/</guid>
      <description>&lt;h1 id=&#34;hash-table&#34;&gt;&#xA;  Hash table&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hash-table&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A hash table is a data structure often used to implement an &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/abstractdatatypes/sections/map/&#34;&gt;associative array&lt;/a&gt; (like a Java &lt;code&gt;Map&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;!--We will start with this usage, before discussing how is can be used for other scenarios.--&gt;&#xA;&lt;h2 id=&#34;associative-array&#34;&gt;&#xA;  Associative array&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#associative-array&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Reminder.&lt;/em&gt;&lt;/strong&gt; An &lt;strong&gt;associative array&lt;/strong&gt; (or &lt;strong&gt;map&lt;/strong&gt;) is a finite set of key-value pairs, where keys are distinct.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;A key-value pair in an associative array is also called an &lt;strong&gt;entry&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary search tree</title>
      <link>https://unibz-pp-24-25.github.io/docs/datastructures/sections/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/datastructures/sections/tree/</guid>
      <description>&lt;h1 id=&#34;binary-search-tree&#34;&gt;&#xA;  Binary search tree&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#binary-search-tree&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A &lt;strong&gt;Binary Search Tree (BST)&lt;/strong&gt; is another data structure used to store an &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/abstractdatatypes/sections/map/&#34;&gt;associative array&lt;/a&gt; (e.g. a Java &lt;code&gt;Map&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A BST is a binary tree such that each node&amp;rsquo;s label is:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;larger than its left child&amp;rsquo;s label (if any), and&lt;/li&gt;&#xA;&lt;li&gt;smaller than its right child&amp;rsquo;s label (if any).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Equivalently, a BST is a binary tree whose nodes are sorted w.r.t. &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/recursion/#traversal&#34;&gt;in-order traversal&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://unibz-pp-24-25.github.io/img/binaryTrees/labeled/bst/tree.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;associative-array-as-a-binary-search-tree&#34;&gt;&#xA;  Associative array as a binary search tree&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#associative-array-as-a-binary-search-tree&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Recall that an associative array is a finite set of key-value pairs.&#xA;Again, let us assume keys have type $K$, and that values have type $V$.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
