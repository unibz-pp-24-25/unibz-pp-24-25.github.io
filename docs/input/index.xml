<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I/O and serialization on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/input/</link>
    <description>Recent content in I/O and serialization on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/input/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Paths and files in Java</title>
      <link>https://unibz-pp-24-25.github.io/docs/input/sections/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/input/sections/files/</guid>
      <description>&lt;h1 id=&#34;paths-and-files-in-java&#34;&gt;&#xA;  Paths and files in Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paths-and-files-in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Java&amp;rsquo;s initial package for input/output (I/O) is called &lt;code&gt;java.io&lt;/code&gt;.&#xA;A central class in this package is &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/File.html&#34;&gt;File&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Over the years, programmers realized that this package had limitations: limited error handling, limited support for file metadata (owner, access rights, etc.), and some performance issues.&lt;/p&gt;&#xA;&lt;p&gt;With Java 7 (2011), A new I/O package called NIO2 was released, with additional features (and in some cases a more concise syntax).&#xA;A central interface (resp. utility class) in this package is &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Path.html&#34;&gt;Path&lt;/a&gt; (resp. &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html&#34;&gt;Files&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reading from and writing to a file in Java</title>
      <link>https://unibz-pp-24-25.github.io/docs/input/sections/read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/input/sections/read/</guid>
      <description>&lt;h1 id=&#34;reading-from-and-writing-to-a-file-in-java&#34;&gt;&#xA;  Reading from and writing to a file in Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reading-from-and-writing-to-a-file-in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are numerous ways to &lt;a href=&#34;https://www.baeldung.com/reading-file-in-java&#34;&gt;read&lt;/a&gt; from or &lt;a href=&#34;https://www.baeldung.com/java-write-to-file&#34;&gt;write&lt;/a&gt; to a file in Java, using either native of external libraries.&lt;/p&gt;&#xA;&lt;p&gt;We highlight here some of the simplest ones (syntactically), even though they may not be the most efficient.&lt;/p&gt;&#xA;&lt;p&gt;We also restrict our scope to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;reading and writing &lt;em&gt;text&lt;/em&gt; (but Java also offers multiple ways to read or write sequences of bytes),&lt;/li&gt;&#xA;&lt;li&gt;reading sequentially and writing by appending (but some classes like &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/RandomAccessFile.html&#34;&gt;RandomAccessFile&lt;/a&gt; allow accessing any position in a file).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;read&#34;&gt;&#xA;  Reading&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#read&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;reading-a-text-file-line-by-line&#34;&gt;&#xA;  Reading a text file line by line&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reading-a-text-file-line-by-line&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Here is one way to process the content of a text file line by line:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuration files</title>
      <link>https://unibz-pp-24-25.github.io/docs/input/sections/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/input/sections/property/</guid>
      <description>&lt;h1 id=&#34;configuration-files&#34;&gt;&#xA;  Configuration files&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#configuration-files&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It is common practice for an application to store parameters (e.g. user-specific settings) in &lt;a href=&#34;https://en.wikipedia.org/wiki/Configuration_file&#34;&gt;configuration files&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A configuration file may be edited manually and/or via a graphical interface.&lt;/p&gt;&#xA;&lt;p&gt;Configuration files may use different serialization formats.&#xA;Some popular formats are INI, JSON, TOML, YAML or XML.&lt;/p&gt;&#xA;&lt;h2 id=&#34;in-java&#34;&gt;&#xA;  in Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Java provides native support for at least two configuration file serialization formats: XML and the so-called &amp;ldquo;property file&amp;rdquo; format.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
