<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Streams in Java on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/stream/</link>
    <description>Recent content in Streams in Java on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/stream/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pipeline</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/pipeline/</guid>
      <description>&lt;h1 id=&#34;pipeline&#34;&gt;&#xA;  Pipeline&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pipeline&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;Stream computations are specified as a &lt;strong&gt;pipeline&lt;/strong&gt;, which consists of:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;a &lt;strong&gt;source&lt;/strong&gt; (e.g. a collection or an I/O channel),&lt;/li&gt;&#xA;&lt;li&gt;a sequence of zero or more &lt;strong&gt;intermediate operations&lt;/strong&gt;, each of which transforms a stream into another stream (e.g. filtering or modifying the stream&amp;rsquo;s elements),&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;one&lt;/em&gt; &lt;strong&gt;terminal operation&lt;/strong&gt; (e.g. collecting the elements of the transformed stream).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://unibz-pp-24-25.github.io/img/stream/streams_explained.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Intermediate operations are generally specified via &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/lambda/sections/callback/&#34;&gt;callback methods&lt;/a&gt; (the terminal operation may as well).&#xA;More precisely, the Java interface &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; provides instance methods (like &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt;) that take a callback method as argument, and transform the stream accordingly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Source</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/init/</guid>
      <description>&lt;h1 id=&#34;source&#34;&gt;&#xA;  Source&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#source&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;collection&#34;&gt;&#xA;  Collection&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#collection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A stream can be created out of a Java &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/abstractdatatypes/#collection&#34;&gt;Collection&lt;/a&gt; with the instance method &lt;code&gt;stream&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getUnits();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;units.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;If the collection has a predictable order of iteration (e.g. if the collection is a &lt;code&gt;List&lt;/code&gt;), then the elements will appear in this order in the stream.&lt;/p&gt;&#xA;&lt;p&gt;To create a stream out of the entries of a map, we can use the instance method &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/abstractdatatypes/sections/map/#syntax&#34;&gt;Map.entrySet&lt;/a&gt; that we have seen earlier. It returns a &lt;code&gt;Set&lt;/code&gt; (which is a collection).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intermediate operations</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/intermediate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/intermediate/</guid>
      <description>&lt;h1 id=&#34;intermediate-operations&#34;&gt;&#xA;  Intermediate operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#intermediate-operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In a &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/stream/sections/pipeline/&#34;&gt;stream pipeline&lt;/a&gt;, an intermediate operation transforms a stream into another stream.&lt;/p&gt;&#xA;&lt;h2 id=&#34;stateless-operations&#34;&gt;&#xA;  Stateless operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#stateless-operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;A &lt;strong&gt;stateless&lt;/strong&gt; intermediate operation processes each element of the input stream independently, and without the need to memorize information about previous elements in the stream.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;filterAndMap&#34;&gt;&#xA;  &lt;code&gt;Stream.filter&lt;/code&gt; and &lt;code&gt;Stream.map&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#filterAndMap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;These two instance methods allow specifying a stateless operation, via a callback method.&#xA;We have already explained their behavior in detail in our initial &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/stream/sections/pipeline/#example&#34;&gt;pipeline example&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terminal operation</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/terminal/</guid>
      <description>&lt;h1 id=&#34;terminal-operation&#34;&gt;&#xA;  Terminal operation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#terminal-operation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A stream pipeline contains one terminal operation.&lt;/p&gt;&#xA;&lt;p&gt;This operation may for instance:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#forEach&#34;&gt;execute a method&lt;/a&gt; for each element of the stream (e.g. print the value of each of them), or&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#collect&#34;&gt;collect&lt;/a&gt; these elements (e.g. into a list), or&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#checks&#34;&gt;inspect&lt;/a&gt; these elements (check whether all of them satisfy a certain condition), or&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#aggregate&#34;&gt;aggregate&lt;/a&gt; these elements (e.g. sum the values of a stream of integers).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;forEach&#34;&gt;&#xA;  &lt;code&gt;Stream.forEach&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forEach&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This instance method is similar to &lt;code&gt;Stream.map&lt;/code&gt;,&#xA;in the sense that it also applies a callback method to each element of the stream.&#xA;However, in this case, the callback method is not a function (i.e. it has no return value).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Numeric stream</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/numeric/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/numeric/</guid>
      <description>&lt;h1 id=&#34;numeric-stream&#34;&gt;&#xA;  Numeric stream&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#numeric-stream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In addition to the interface &lt;code&gt;Stream&lt;/code&gt;, Java 8 introduced the interface &lt;code&gt;IntStream&lt;/code&gt; (resp. &lt;code&gt;DoubleStream&lt;/code&gt;, &lt;code&gt;LongStream&lt;/code&gt;) that represents a stream of (unboxed) &lt;code&gt;int&lt;/code&gt; (resp. &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;It provides native methods such as (&lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;average&lt;/code&gt;) that are not available for the types &lt;code&gt;Stream&amp;lt;Integer&amp;gt;&lt;/code&gt; (resp. &lt;code&gt;Stream&amp;lt;Double&amp;gt;&lt;/code&gt;, &lt;code&gt;Stream&amp;lt;Long&amp;gt;&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;h2 id=&#34;conversion&#34;&gt;&#xA;  Conversion&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#conversion&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint danger&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Warning.&lt;/em&gt;&lt;/strong&gt;&#xA;The interface &lt;code&gt;IntStream&lt;/code&gt; (resp. &lt;code&gt;DoubleStream&lt;/code&gt;, &lt;code&gt;LongStream&lt;/code&gt;) does &lt;em&gt;not&lt;/em&gt; extend the interface &lt;code&gt;Stream&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A instance of &lt;code&gt;Stream&amp;lt;&lt;/code&gt;$T$&lt;code&gt;&amp;gt;&lt;/code&gt; can be converted to an instance of &lt;code&gt;IntStream&lt;/code&gt; (resp. &lt;code&gt;DoubleStream&lt;/code&gt;, &lt;code&gt;LongStream&lt;/code&gt;) with the instance method &lt;code&gt;Stream.mapToInt&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multithreading and order</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/order/</guid>
      <description>&lt;h1 id=&#34;multithreading-and-order&#34;&gt;&#xA;  Multithreading and order&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#multithreading-and-order&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;multithreading&#34;&gt;&#xA;  Multithreading&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#multithreading&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We can allow a whole stream pipeline to be executed in a &lt;a href=&#34;%7b%7bref%22../../multithreading/sections/simple.md#loop%22%7d%7d&#34;&gt;concurrent or parallel&lt;/a&gt; fashion, for instance with the instance method &lt;code&gt;Stream.parallel&lt;/code&gt;, as follows:&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(1, 2, 3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Contains [3,4,5]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ouputList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            .&lt;span style=&#34;color:#a6e22e&#34;&gt;parallel&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            .&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            .&lt;span style=&#34;color:#a6e22e&#34;&gt;toList&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;This allows the JVM to take advantage of available resources to execute operations (like the &lt;code&gt;map&lt;/code&gt; operation in this example) in several threads, concurrently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optional</title>
      <link>https://unibz-pp-24-25.github.io/docs/stream/sections/optional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/stream/sections/optional/</guid>
      <description>&lt;h1 id=&#34;optional&#34;&gt;&#xA;  Optional&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#optional&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The class &lt;code&gt;Optional&lt;/code&gt; was introduced in Java 8.&#xA;An &lt;code&gt;Optional&lt;/code&gt; is a container object that may or may not contain a value.&#xA;Its main purpose is to indicate that the object returned by a function may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&#xA;In our &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/intro/sections/board_game/&#34;&gt;game&lt;/a&gt;, the interface &lt;code&gt;Board&lt;/code&gt; provides a method &lt;code&gt;getUnit(int rowIndex, int columnIndex)&lt;/code&gt;, that returns the unit standing on the tile with these coordinates, &lt;em&gt;if any&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This could be implemented with a method&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
