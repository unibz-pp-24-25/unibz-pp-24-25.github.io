[{"id":0,"href":"/docs/recursion/sections/linear/","title":"Linear recursion","section":"Recursion","content":" Linear recursion # Definition. A recursive method is linear recursive if it performs at most one recursive call each time it is executed.\nTerminology. The term unary recursion is sometimes used to refer to linear recursive algorithms (as opposed to n-ary recursion).\nHint. A linear recursive algorithm is often easy to transform into an iterative one (i.e. an algorithm that uses only loops).\nExample # Exercise Write in pseudocode a (linear) recursive algorithm for a method int occ(char[] A, char c) that:\ntakes as input a (non-null) array A of characters and a character c, and returns the number of occurrences of c in A. Possible solution int occ(char[] A, char c) { return occRec(A, c, 0) } int occRec(char[] A, char c, int i) { // Base case: the segment under consideration is empty if(i == A.length){ return 0 } // Inductive case. // Count the number of occurrences of c in the \u0026#34;suffix\u0026#34; segment A[i+1 .. A.length-1] int occInSuffix = occRec(A, c, i + 1) return A[i] == c ? // If the current character is c, then return this value + 1, occInSuffix + 1 : // otherwise return this value as it is. occInSuffix } Tail recursion # Motivation # Consider a (not necessarily recursive) method method1 that calls a method method2, for instance:\nmethod1() { ... method2() ... } The execution of method1 is interrupted when it calls method2.\nDuring this interruption, the call stack contains:\nmethod2 method1 \u0026lt;bottom of the stack\u0026gt; Variables that are local to the execution of a method are allocated on the so-called stack memory.\nIn this example, variables that are local to method1 remain in memory during the execution of method2 (because they may be needed when the execution of method1 resumes). However, if no instruction in method1 needs to be executed after the call to method2, then there is no need to maintain this information in memory.\nmethod1() { ... method2() } In other words, the call stack in this case could be safely be reduced to:\nmethod2 \u0026lt;bottom of the stack\u0026gt; This optimization technique is known as tail-call elimination. Some compilers apply it (but most Java compilers do not).\nDuring the execution of a recursive algorithm, the size of the call stack may become important, therefore also the amount of stack memory required. Therefore identifying calls that may be safely be removed from the stack can significantly reduce memory consumption.\nDefinition # A linear recursive method is tail recursive if no instruction in this method can be executed after a recursive call.\nA tail recursive algorithm can easily be transformed into an iterative one. This transformation can be viewed as a \u0026ldquo;manual\u0026rdquo; form of tail-call elimination.\nExercise The algorithm above for the method int occ(char[] A, char c) is linear recursive, but not tail-recursive.\nRewrite it into a tail-recursive algorithm. Then convert it into an iterative algorithm.\nPossible solution Tail recursive algorithm:\nint occ(char[] A, char c) { return occRec(A, c, 0, 0) } int occRec(char[] A, char c, int i, int occurences) { // Base case: the segment under consideration is empty if(i == A.length){ return 0; } // Inductive case. // If the current character is c, then increment the number of occurrences. if (A[i] == c) { occurrences++; } // Recursive call return occRec(A, c, i + 1, occurrences) } Iterative algorithm:\nint occ(char[] A, char c) { int occurrences = 0 for (int i = 0; i \u0026lt; A.length; i++) { if (A[i] == c) { occurrences++ } } return occurrences } A common strategy to convert a linear recursive method into a tail-recursive one consists in using additional arguments (like the argument occurrences in the above example). These extra arguments are sometimes called accumulators.\nUsage # Linear recursive implementations are not very frequent, because most of them can be easily converted into iterative ones, as illustrated above. Besides, as we explained above, the iterative solution is often more efficient (at least memory-wise) for large inputs.\nHowever, some problems can be easier to solve in a linear recursive form (e.g. as a first attempt). This may also produce code that is easier to read and/or debug.\nIn particular, it may be the case when manipulating linked lists.\nLinked list # Definition. A linked list is a set of objects organized in a sequence, such that each object (except for the last one) points to its successor.\nEquivalently, a linked list is a unary tree (and conversely), i.e. a tree where each node has exactly one (possibly null) child.\nFor instance:\nTerminology.\nthe first object in a linked list is often called the head of the list, and the rest of the list (i.e. the sublist with the second object as head) is often called the tail of the list. Example # Exercise Consider linked lists that consist of instances of the following class:\nWrite (in pseudocode) a linear recursive algorithm Node removeDuplicates(Node head) that:\ntakes as input the head of a list with nodes sorted according to their label (in alphabetical order), returns the head of a list with the same labels, in alphabetical order, but where each label appears exactly once. For instance, for the following input list:\nthe algorithm should output a list with labels:\nPossible solution Node removeDuplicates(Node head) { // Base case: empty list. if(head == null) { return null } // Inductive case. // Remove all duplicate in the tail. Node tailHead = removeDuplicates(head.next) // Compare the head with the (possibly new) head of the tail. if (tailHead != null \u0026amp;\u0026amp; head.label == tailHead.label) { // If they have the same label, then return the tail. return tailHead } // Otherwise add the head to the returned list. head.next = tailHead return head } "},{"id":1,"href":"/docs/project/sections/free_project/","title":"Option 1: free project","section":"Project","content":" Option 1: free project # The first possible type of group projects is for students to develop a Java application of their choice.\nThis application is only a prototype, so it does not need a comprehensive list of features or functionalities.\nThe evaluation of the project will be mostly based on its backend (rather than the frontend). This means that the application:\ndoes not need a graphical user interface (but may have one), should perform non-trivial backend task(s) (e.g. writing and/or reading to/from files is not sufficient). Guidelines # Motivation # A good projects is driven by an idea.\nFeel free to design your application so that it matches your own interests. For instance:\nrelate it to a hobby (music, cinema, fashion, sport, games, social media, astronomy, etc.), use the project as an opportunity to explore a topic that you are curious about (natural language processing, computer vision, recommender systems, robotics, etc.), develop a functionality that one of your favorite applications is missing. Do not hesitate to be ambitious at first. You can restrict the scope of your project (to certain features or components) later on.\nSpecification # A frequent source of failure for this course is students focusing on tools (e.g. following tutorials) without having a precise objective. The short deadline (June 2024) does not give you this flexibility. Besides, without a precise objective, the amount of libraries that are available to you (especially in Java) can be overwhelming.\nSo we recommend you to clarify what your application should do, before thinking about how you could implement it. In other words, specify which problem(s) (i.e. input and expected output) your program and/or components should solve. Then only think about algorithms, libraries, tools and/or tutorials that can help you solve these problems.\nIn order to determine whether your specification is precise enough, you may check whether it leaves some doubt as to whether an output is correct or not.\nUser interface # Developing a Graphical User Interface (GUI) requires familiarity with a graphical framework. Learning the details of such a framework (terminology, syntax, setup, etc.) can be an important time investment, and this knowledge may not transfer to other graphical frameworks. In other words, developing a GUI may not require lot of thinking, but a lot of reading (and web browsing).\nBeware also that GUIs technologies are still rapidly evolving, and that recent innovation has largely been driven by web development. So learning a graphical framework for Java may not be a strategic investment of your time (compared to learning a Javascript framework like React or Angular). Note that even desktop and mobile applications are increasingly relying on web technologies for their GUIs (thanks to frameworks like Electron or React Native).\nThis is why we recommend you to think carefully before committing to a Java GUI, and to keep it minimal if you do. Note also that we will not evaluate your project based on aesthetic criteria.\nSo in order to design your interface, you may follow the following guidelines:\nAsk yourself whether your application really needs a GUI. A command-line interface (CLI) may be sufficient, because: your program takes files as input and produces files as output, or your program is (primarily) meant to be used by other programs (rather than human beings), or your program is meant to be used by other developers, or external programs with GUIs (such as IDEs) can easily call your application, or you leave the GUI for future work (again, your application is just a prototype), etc. If you really need a GUI, then: decouple frontend and backend (whenever possible), so that the backend could be used with another frontend, and conversely. Example. Many applications accessible via GUI have a natural decoupling of frontend and backend. For instance, consider an application that allows booking hotel rooms. The backend takes as input some data (e.g. number or guests, duration, etc.), and outputs data as well (available rooms, prices, etc.). These input and output are independent of the aspect or structure of the GUI (windows, menus, buttons, fields, etc.).\nExample. Even for some games, frontend and backend can easily be decoupled. Consider for instance a program that plays chess against a human opponent. The backend:\nkeeps track of the current state of the board, takes as input either a move from the white player, or a request to play as the black player, outputs the next state of the board. These input and output do not depend on a specific GUI (they can for instance be encoded using algebraic notation). So the backend can be implemented without any reference to graphical elements or controller inputs (mouse clicks, etc.).\ndevelop the backend first (and write unit tests for it),\ndevelop the frontend afterwards (if you have time for it).\nIf you really need a GUI, then try to keep it minimal. In particular, restrict the input to what is essential for your application. The more freedom the user is given, the more likely he/she is to input a sequence of actions that your program cannot handle. Illustrations # Here are some examples of (past and imaginary) possible projects:\na program that detects texts generated by a large language model, a program that takes as input a dataset of Tweets and identifies communities and/or influencers based on the network formed by re-tweets, a program that retrieves news articles about an input topic (using web APIs), and analyses their polarity (via sentiment analysis) together with their provenance (news outlet, country, etc.), a (toy) recommender system, a program that generates (solvable) sudoku grids with different sizes and/or level of difficulty, a game to help people improve their typing speed, a web crawler that retrieves sport-related statistics from various websites and exposes them via a web API, a classroom reservation system for the Unibz that can computes a default schedule for a whole semester, satisfying a set of constraints (room capacity, etc.) and/or preferences (minimize days of presence per week of a same group, etc.), a flashcard app that incorporates answers produced by a chatbot, an (Obsidian-like) note management application, a program to organize and manage coding contests (similar to this one), a password manager (with encryption), for instance similar to pass, where password update and synchronization are performed via git, a program that analyzes the commit and/or branching history of a git repository (e.g. contributions of the different users, frequency of commits, percentage of preserved code, etc.). "},{"id":2,"href":"/docs/regex/sections/pattern/","title":"Pattern matching","section":"Regular expressions","content":" Pattern matching # Two of the main uses of regexes are:\nstring validation, i.e. check whether a string satisfies certain constraints. For instance: has at least one digit and one special character, is a valid address, etc. string search, i.e. identify occurrences of a pattern in a line or in a file. This can be useful for: replacing strings in a file or a folder (e.g. within a codebase), splitting a sentence into (natural language) words, splitting a program into meaningful substrings, e.g. split the instruction int a=5; into int, a, =, 5 and ;, filtering (e.g. with the grep command) of modifying (e.g. with the sed command) lines in a file, etc. In both scenarios, a regex is viewed as a pattern that should be matched against a string.\nSegment # To make the notion of pattern matching more precise, we will represent a word $w$ as an array of characters, and a segment of $w$ as a (possibly empty) subarray of this array.\nNotation. If $w$ is a word, we use $w[i .. j)$ for the subsegment of $w$ that starts at index $i$ included, and ends at index $j$ excluded.\nExample. Let $w$ = abca. Then:\n$w[0 .. 1)$ is a segment of $w$ with length 1 and word a, $w[3 .. 4)$ is another segment of $w$ with length 1 and word a $w[0 .. 3)$ is a segment of $w$ with length 3 and word abc $w[0 .. 0)$ is a segment of $w$ with length 0 and word $\\varepsilon$ $w[1 .. 1)$ is another segment of $w$ with length 0 and word $\\varepsilon$ Match # We can now define what a match is:\nDefinition. Let $w$ be a word (viewed as an array), and let $e$ be a regex that describes the language $L$.\nA match for $e$ in $w$ is a (possibly empty) segment of $w$ whose word belongs to $L$.\nExample. Let $e$ be the regex ab*, and let $w$ be the word aba.\nThere are 3 matches for $e$ in $w$:\n$w[0 .. 1)$ with word a, $w[0 .. 2)$ with word ab, $w[2 .. 3)$ with word a Warning. Several matches may carry the same word (e.g. the first and third matches in the example above).\nWarning. Some matches may overlap (e.g. the first and second matches in the example above).\nExercise Consider the regex $e$ = a* and the word $w$ = aa.\nHow many matches are there for $e$ in $w$?\nSolution There are 6 matches for the regex a* in the word aa:\n$w[0 .. 0)$: $\\varepsilon$ $w[0 .. 1)$: a $w[0 .. 2)$: aa $w[1 .. 1)$: $\\varepsilon$ $w[1 .. 2)$: a $w[2 .. 2)$: $\\varepsilon$ Best first match # In practice, (most) regex engines do not identify all matches for a regex in a word. Instead, they rely on the notion of best first match (explained below). Reasons include:\nperformance, avoiding overlapping matches (e.g. when performing a global \u0026ldquo;search and replace\u0026rdquo;). Let $e$ be a regex, let $w$ be a word, and let $m_1$ and $m_2$ be two matches for $e$ in $w$.\n$m_1$ is preferred to $m_2$ if:\n$m_1$ starts before $m_2$: for instance $w[1 .. 4)$ is preferred to $w[3 .. 8)$, or they start at the same index and the regex engine favors $m_1$ over $m_2$. Preference is a total order over the matches for for $e$ in $w$, meaning that if there is a match, then there can be at most one best first match.\nNote. When $m_1$ and $m_2$ start at the same index (second case above), whether $m_1$ is favored over $m_2$ can vary in subtle ways from one regex engine to the other. These preferences are usually explained in algorithmic terms (and half-informally).\nFor a reasonably detailed tutorial about the behavior(s) of regex search engine, we refer to this website. For Java, the Oracle tutorial on regexes can also be a good entry point (although less precise that the previous reference).\nIn this section, we only introduce basic behaviors of regex engines.\nLeft-to-right # Commutative operations are evaluated from left-to-right.\nExample. Consider the word $w$ = ab.\nthe best first match for the regex ab|a in $w$ is $w[0 .. 2) (with word ab) the best first match for the regex a|ab in $w$ is $w[0 .. 1) (with word a) Exception. In this example, A POSIX-compliant regex engine would produce $w[0 .. 2) (with word ab) as best first match for both expressions.\nWarning. As illustrated with the above example, two regexes that describe the same language may have different best first matches (in the same word).\nGreedyness # The * operator is evaluated (by default) in a greedy way. This means that the engine tries to matches as many characters as possible for this operator. More precisely, when encountering a subexpression of the form $e$*:\nthe engine first considers the longest possible match for $e$*, if this match does not result in a match for the whole expression, then the engine backtracks by one character (i.e. reduces the length of the match for $e$* by one), and tries again to find a match for the whole expression, if this fails again, then the engine backtracks again by one character, etc. Examples.\nThe best first match for the regex a* in aa is the whole word. The best first match for the regex a* in aab is $[0 ..2)$ (with word aa). The best first match for the regex a* in aabaa is $[0 ..2)$ (with word aa). The best first match for the regex (a|b)*b in abab is the whole word. In this case, the engine first tries to match (a|b)* against the whole word, this does not result in a match for the whole regex, because the trailing b in the regex is not matched, so the engine backtracks, and matches (a|b)* against $[0 .. 3)$ (with word aba), this results in a match for the whole expression. Warning. The interaction of left-to-right evaluation and greedy matching can be hard to predict. This is why we highly recommend writing and debugging regexes with a validation engine, such as regex101.\nWarning. Nested * operators can be costly, due to a combinatorial explosion of the number of attempts to find a match. This is sometimes referred to as catastrophic backtracking.\nSuccessive best first matches # Most regex engines can return best first matches in an iterative way. Intuitively, the engine \u0026ldquo;consumes\u0026rdquo; the best first match. Then the next match is the best first match in the remaining string, etc.\nMore precisely:\nDefinition. Let $e$ be regex and let $w$ be a word with lenght $n$.\nThen:\nthe first match $w[i_1 .. j_1)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w$, the second match $w[i_2 .. j_2)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w[j_1 .. n)$, the third match $w[i_3 .. j_3)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w[j_2 .. n)$, etc. Example. Let $e$ be the regex ab*, and let $w$ be the word abac.\nThe best first match for $e$ in $w$ is $w[0 ..2)$, with word ab.\nThe second match is the best first match in the rest of $w$, i.e. in $w[2 .. 4)$. This match is $w[2 .. 3)$, with word a.\nThere is no third match.\nExercise In each of the cases below, find all successive best first matches for the regex $e$ in word $w$:\nregex $e$ word $w$ a aba a*b aba a* a a* aba (ab)* aba (ab)* abab Solution regex $e$ word $w$ matches a aba $[0 .. 1)$:a, $[2 .. 3)$:a a*b aba $[0 .. 2)$:ab a* a $[0 .. 1)$:a, $[1 .. 1)$: $\\varepsilon$ a* aba $[0 .. 1)$:a, $[1 .. 1)$: $\\varepsilon$, $[2 .. 3)$:a, $[3 .. 3)$: $\\varepsilon$ (ab)* aba $[0 .. 1)$:ab, $[2 .. 2)$: $\\varepsilon$, $[3 .. 3)$: $\\varepsilon$ (ab)* abab $[0 .. 3)$:abab, $[3 .. 3)$: $\\varepsilon$ Lazy closure # Some regex engines (notably the ones used by default in Java, Javascript, Python, etc.) support alternative ways to evaluate * operators.\nOne of them is lazy evaluation (also called reluctant). In this case, the star operator matches the shortest possible segment.\nExamples.\nregex $e$ word $w$ best first match with lazy evaluation of star operators a* aa $[0 .. 0)$:$\\varepsilon$ a*ac ac $[0 .. 2)$:ac a*ac aac $[0 .. 3)$:aac Note. In a same regular expression, it is possible to specify that some * operators must be evaluated in a lazy way, and others in a greedy way.\nExercise In each of the cases below, find all successive best first matches for the regex $e$ in word $w$, where * operators are evaluated in a lazy way.\nregex $e$ word $w$ ab* ab a*b aba a*ab* ab a* a a* aa b* aa Solution regex $e$ word $w$ lazy matches ab* ab $[0 .. 1)$:a a*b aba $[0 .. 2)$:ab a*ab* ab $[0 .. 1)$:a a* a $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$ a* aa $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$, $[2 .. 2)$:$\\varepsilon$ b* aa $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$, $[2 .. 2)$:$\\varepsilon$ Warning. Lazy * operators can be hard to predict.\n"},{"id":3,"href":"/docs/stream/sections/pipeline/","title":"Pipeline","section":"Streams in Java","content":" Pipeline # Stream computations are specified as a pipeline, which consists of:\na source (e.g. a collection or an I/O channel), a sequence of zero or more intermediate operations, each of which transforms a stream into another stream (e.g. filtering or modifying the stream\u0026rsquo;s elements), one terminal operation (e.g. collecting the elements of the transformed stream). Intermediate operations are generally specified via callback methods (the terminal operation may as well). More precisely, the Java interface Stream provides instance methods (like filter or map) that take a callback method as argument, and transform the stream accordingly.\nExample # Consider the following classes Unit, Butterfly, Caterpillar and Unicorn.\nThe pipeline below:\ncreates a stream out of a list of units, retains only butterflies, extracts the color of each butterfly, collects these colors as a set. List\u0026lt;Unit\u0026gt; units = getUnits(); Set\u0026lt;String\u0026gt; butterflyColors = units.stream() // create a stream .filter(u -\u0026gt; u instanceof Butterfly) // retain butterflies .map(b -\u0026gt; b.color) // map each butterfly to its color .collect(Collectors.toSet()); // collect the colors as a set Explanation # This pipeline can be decomposed as follows:\nSource # The instance method Collection.stream generates a stream out of a collection (e.g. out of a List or a Set):\nunits.stream() In this example, because units has type List\u0026lt;Unit\u0026gt;, the stream that is returned by units.stream() has type Stream\u0026lt;Unit\u0026gt;.\nIntermediate operations # Filter # .filter(u -\u0026gt; u instanceof Butterfly) The instance method Stream.filter retains certain elements of the stream.\nLet us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Unit).\nThe method filter takes as argument a callback function of type\n$\\qquad \\mathit{T} \\to$ Boolean\n(equivalently, in Java\u0026rsquo;s terminology, the callback function must implement the native functional interface Predicate\u0026lt;$\\mathit{T}$\u0026gt;).\nIn this example, the callback function is\nu -\u0026gt; u instanceof Butterfly which has type\n$\\qquad$ Unit $\\to$ Boolean\nThe method filter returns a Stream\u0026lt;$\\mathit{T}$\u0026gt; (e.g. in this example a Stream\u0026lt;Unit\u0026gt;) that consists of the elements for which the callback method evaluates to true (in this case, it retains only butterflies).\nMap # .map(b -\u0026gt; b.color) The instance method Stream.map applies a function to each element of the stream.\nLet us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Unit).\nThe method map takes as argument a callback function of type\n$\\qquad T \\to T'$\nwhere $T\u0026rsquo;$ can be any type (equivalently, in Java\u0026rsquo;s terminology, the callback function must implement the native functional interface Function\u0026lt;$T$,$T\u0026rsquo;$\u0026gt;, seen earlier).\nIn this example, the callback function is\nb -\u0026gt; b.color which has type\n$\\qquad$ Unit $\\to$ String\nLet us name this callback function $f$.\nThe method map returns a Stream\u0026lt;$\\mathit{T\u0026rsquo;}$\u0026gt; (e.g. in this example a Stream\u0026lt;String\u0026gt;) that consists of all objects $f(a)$ such that $a$ belongs to the original stream.\nTerminal operation # .collect(Collectors.toSet()); The instance method Stream.collect takes as argument a so-called Collector, which is in charge of collecting the elements of the stream into a Collection (e.g. List or Set), or a Map, or a string, etc.\nIn this example, we call the static method Collectors.toSet, which returns a collector that produces a set. Because the stream has type Stream\u0026lt;String\u0026gt;, the instruction .collect(Collectors.toSet()) returns a set with type Set\u0026lt;String\u0026gt;.\nReading a pipeline # Exercise What do the following methods compute?\nSet\u0026lt;Unit\u0026gt; method1(Set\u0026lt;Unit\u0026gt; set1, Set\u0026lt;Unit\u0026gt; set2) { return set1.stream() .filter(u -\u0026gt; set2.contains(u)) .collect(Collectors.toSet()); } Set\u0026lt;Unit\u0026gt; method2(Set\u0026lt;Unit\u0026gt; set1, Set\u0026lt;Unit\u0026gt; set2) { return set1.stream() .filter(set2::contains) .collect(Collectors.toSet()); } Solution Both methods compute the intersection of set1 and set2.\nExercise What do the methods method1 to method4 below compute?\nStream\u0026lt;Unit\u0026gt; method1(List\u0026lt;Unit\u0026gt; units) { return units.stream() .filter(u -\u0026gt; u.health \u0026gt; 0); } List\u0026lt;Unit\u0026gt; method2(Stream\u0026lt;Unit\u0026gt; stream) { return stream.map(u -\u0026gt; transform(u)) .toList(); // collects the stream into a list } Unit transform(Unit u) { if (u instanceof Caterpillar) { return new Butterfly(u.color, u.health); } return u; } List\u0026lt;Unit\u0026gt; method3(List\u0026lt;Unit\u0026gt; units) { return method2(method1(units)); } List\u0026lt;Unit\u0026gt; method4(List\u0026lt;Unit\u0026gt; units) { return units.stream() .filter(u -\u0026gt; u.health \u0026gt; 0) .map(u -\u0026gt; u instanceof Caterpillar ? new Butterfly(u.color, u.health) : u ) .toList(); } Solution method1: Input: A list of units. Output: a stream that contains the same units, but discarding units with no health. method2: Input: A stream of units. Output: A list that contains the same units, but where caterpillars become butterflies. method3: Input: A list of units. Output: A list that contains the same units, but discarding units with no health, and transforming caterpillars into butterflies. method4 is equivalent to method3. "},{"id":4,"href":"/docs/intro/sections/schedule/","title":"Schedule","section":"This course","content":" Schedule # The course consists of 60 hours of lectures and 30 hours of labs.\nLectures # By default, lectures are scheduled:\nMonday 13:30 - 15:30 Tuesday 08:30 - 10:30 Wednesday 08:30 - 10:30 All students attend the same lectures.\nLabs # By default, labs are scheduled:\nMonday 15:30 - 17:30 Wednesday 13:30 - 15:30 Students are split in two groups (to be determined) for the labs, with identical content. Students who collaborate on the same group project are expected to attend the same lab.\nMost labs will be dedicated to the assignments for this course. Two labs will be dedicated to a presentation and discussion of the advancement of the group projects.\nTimetable # Some weeks will see fewer lectures/labs, and schedules or room numbers may vary from one week to the other. So make sure to check the timetable.\n"},{"id":5,"href":"/docs/intro/","title":"This course","section":"Docs","content":" Structure and organization of the course # This chapter explains how the course is structured and provides a brief overview of its content.\n"},{"id":6,"href":"/docs/simplify/sections/break/","title":"Break statements and flags","section":"Simplifying code","content":" Break statements and flags # A method with multiple boolean flags can be complex to read and/or debug, in particular when combined with break and/or continue statements.\nThis can usually be avoided:\nusing return statements (possibly with auxiliary functions), and/or (in Java) using streams with anyMatch, allMatch or findFirst. Example # Exercise Rewrite the following Java method:\nwithout boolean flag and without break statement. /** * Returns true iff each of the input lists contains a number \u0026gt; 20 */ boolean check(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; lists) { boolean flag1 = true; boolean flag2 = false; for (List\u0026lt;Integer\u0026gt; list : lists) { for (Integer value : list) { if (value \u0026gt; 20) { flag2 = true; break; } } if (!flag2) { flag1 = false; break; } } return flag1; } Solution 1 With an auxiliary method:\nboolean check(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; lists) { for (List\u0026lt;Integer\u0026gt; list : lists) { if(!isValid(list)) { return false; } } return true; } private boolean isValid(List\u0026lt;Integer\u0026gt; values) { for (Integer value : values) { if(value \u0026gt; 20) { return true; } } return false; } Solution 2 boolean check(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; lists) { return lists.stream() .allMatch(l -\u0026gt; l.stream().anyMatch(v -\u0026gt; v \u0026gt; 20)); } "},{"id":7,"href":"/docs/unittests/sections/structured/","title":"Code units","section":"Unit tests","content":" Code units # A unit test is meant to test to a small unit of code. This is only possible if the program contains small units of code.\nTherefore unit testing is closely related to decomposing complex problems into smaller ones (and creating methods that solve these smaller problems).\nBenefits # Possible benefits of decomposing complex methods into smaller ones are:\nreadability, easier debugging, opportunities to factorize code (the same small methods can be called in several places), easier collaboration (two person modifying the same method in parallel is less likely if the method is small), Some good indicators that auxiliary methods may be helpful are:\nmultiple levels of nested blocks (\u0026ldquo;curly braces\u0026rdquo; in Java), a loop that contains a important amount of code. Exercise Simplify (and factorize) the following pseudocode using auxiliary methods:\nif(\u0026lt;condition1\u0026gt;){ while(\u0026lt;condition2\u0026gt;){ if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } \u0026lt;block3\u0026gt; } \u0026lt;block4\u0026gt; } else { if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } \u0026lt;block5\u0026gt; } \u0026lt;block6\u0026gt; Possible solution method1() \u0026lt;block6\u0026gt; method1(){ if(\u0026lt;condition1\u0026gt;){ method2() \u0026lt;block4\u0026gt; } else { method3() \u0026lt;block5\u0026gt; } } method2(){ while(\u0026lt;condition2\u0026gt;){ method3() \u0026lt;block3\u0026gt; } } method3(){ if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } } "},{"id":8,"href":"/docs/unittests/sections/tdd/","title":"Development driven by unit tests","section":"Unit tests","content":" Development driven by unit tests # Test-driven development (TDD) consists in converting a program\u0026rsquo;s requirements into test cases, before the program is fully developed.\nNote that this approach is not restricted to unit tests.\nIn practice # For a non-trivial method:\nCreate a method stub (e.g. return null is the method\u0026rsquo;s return type is a reference type). Specify the expected behavior (input and expected output) of the method. Write one or several test(s) for this method, illustrating the specification. Implement the method until the test(s) is (are) successful. Hint. Your IDE can generate method stubs.\nNote. This implementation may be temporary. For instance, it may be refactored later on (moving code where it logically belongs, factorizing duplicate code, etc.). However, the tests that were written before refactoring are (usually) still relevant afterwards, because they correspond to functional requirements.\nBenefits # Some benefits of TDD are:\nStarting from an example often helps clarifying what a method should do. TDD provides intermediate objectives (milestones) to a developer. The sooner a bug is identified (during the development process), the easier it is to fix. The program is likely to be more robust, because development was guided by requirements (rather than technologies or algorithmic considerations). Each unit test created during TDD provides an alternative entry point (\u0026ldquo;green arrow\u0026rdquo; in an IDE) into the codebase (in addition to the \u0026ldquo;main\u0026rdquo; method). This allows experimenting with a specific feature in isolation, ignoring aspects that are not relevant for this feature (e.g. GUI, network, data storage, etc.). Example # In our game, let us consider once again the method EventHandler.deleteUnit, which modifies the current board when a unit deletion instruction is received.\nProblem decomposition # First, let us decompose this method into simpler ones. For instance as follows:\npublic class Backend implements EventHandler { private Snapshot currentSnapshot; ... void deleteUnit(int rowindex, int columnIndex) { // reduce by 1 the number of remaining actions for the active player decrementNumberOfRemainingActions(); // delete the unit (leaving a blank tile) currentSnapshot.getBoard().removeUnit(rowIndex, columnIndex); // shift up or down the units that followed it (if any) shiftUnitsInColumn(columnIndex); // perform resulting unit merges (if any) performUnitMerges(); // if there is no more action for the active player, then end the turn if (currentSnapshot.getNumberOfRemainingActions() == 0){ endTurn(); } } ... } At first sight, the auxiliary method decrementNumerOfRemainingActions seems trivial, so it may not benefit from unit tests. The method shiftUnitsInColumn seems relatively simple as well. However, the two remaining ones (performUnitMerges and endTurn) seem more complex. So it could be helpful to decompose them and/or devise unit tests for them.\nLet us focus on endTurn. It may for instance be decomposed as follows:\nvoid endTurn() { // perform attacks for units whose counter is 1 // (on the active player\u0026#39;s side) performAttacks(); // change the active player swapActivePlayer(); } And performAttacks may in turn be decomposed as follows:\nvoid performAttacks() { int maxColumnIndex = currentSnapshot.getBoard().getMaxColumnIndex(); // for each column for (int columnIndex = 0; columnIndex \u0026lt;= maxColumnIndex; columnIndex++){ performAttacks(columnIndex); } } void performAttack(int columnIndex) { // for each combined unit in this column (for the active player), // starting from front units for (Unit unit: getCombinedUnits(columnIndex)){ int countdown = unit.getAttackCountdown(); // if the unit is ready to attack if(countdown \u0026gt; 1) { unit.setAttackCountdown(countdown - 1); } else { attack(columnIndex); } } } Unit test # The auxiliary method attack seems non-trivial, so it may be a good candidate for unit testing.\nOne possible (\u0026ldquo;happy path\u0026rdquo;) test could be:\nInput (for column 1):\nExpected output:\n"},{"id":9,"href":"/docs/regex/sections/practice/","title":"in practice","section":"Regular expressions","content":" Regexes in practice # Concrete regexes deviate from theoretical ones in several ways. In particular:\nConcrete syntaxes include a wide range of syntactic sugar, i.e. operators that could in theory be expressed in terms of |, * and concatenation.\nMany regex engines support expressions with features (such as backreferences) that go beyond the expressivity of theoretical regexes. Technically, such expressions do not qualify as as regexes (they may describe a language that is not regular). However, in practice, they are still referred to as \u0026ldquo;regexes\u0026rdquo;. This is also what we will do in this section.\nFlavours # Multiple syntaxes for regexes coexist, which have a lot in common. Among these:\nRegexes defined by the IEEE POSIX standards are supported by a variety of command-line utilities, scripting languages or database engines.\nThe regex engine of the programming language Perl has been very influential. A widely used variant is the PCRE (Perl Compatible Regular Expressions) library, written in C (and natively used by PHP and R). Besides, many programming languages (Java, Javascript, Python, C#, etc.) have adopted a regex syntax and engine inspired by Perl\u0026rsquo;s.\nA detailed comparison of some the main flavours of regexes can be found here.\nWarning. The patterns used in .gitigore files are not regular expressions.\nJava regexes # Java regexes are very similar to PCRE regexes (albeit less expressive).\nWe list below some of the main constructs of Java regexes, and refer to the Javadoc for an exhaustive list. Most of these are identical in other regex languages inspired by Perl\u0026rsquo;s.\nCharacters # A character in a Java regex can alternatively be written using its Unicode hexadecimal identifier, preceded with \\u.\nExamples.\nthe character A can be written either in its normal form, or \\u0041 the carriage return character can be written either \\r or \\u000D Special characters (like | or *) need to be escaped to be treated as standard ones (except in some specific contexts, see below).\nExamples. In order to be treated as a standard character:\n* can be either escaped (\\*) or written \\u002A \\ can be either escaped (\\\\) or written \\u005C Syntactic sugar # We have seen in previous sections that in theory, regular expressions only admit three operators:\nconcatenation ($e_1e_2$), union ($e_1$|$e_2$) and closure ($e$*). However, this is impractical for most implication.\nExample. In order to match a character that is not a digit, with these three operators only, one would need to write an expression that enumerates all other characters in the underlying alphabet, e.g.:\n$\\qquad\\qquad$ a | b | c | .. | A | B | C | .. | \u0026amp; | ! | \u0026gt; | ..\nFor the simple ASCII alphabet, this is already more than a hundred characters. For the Unicode alphabet, this is more than 100 000.\nIn practice, regexes include additional operators, most of which are syntactic sugar (i.e. could in theory be expressed with only concatenation, union, and closure).\nCharacter class # Square brackets ([ and ]) are used to denote a set of characters, called a character class.\nExamples.\n[abcd] is equivalent to a|b|c|d\ngr[ae]y is equivalent to gr(a|e)y\nA character class can also be defined with ranges of characters. If $c_1$ and $c_2$ are two characters, then $c_1$-$c_2$ (within square brackets still) denotes any character between $c_1$ and $c_2$ in the Unicode alphabet.\nExamples.\n[A-Z] matches any character between A and Z [A-Za-z0-9] matches any character between (A and Z) or between (a and z) or between (0 and 9) [A-Za-z@] matches @ or any character between (A and Z) or between (a and z) The complement (in the Unicode alphabet) of a character class is described by adding a ^ after the opening square bracket [.\nExamples.\n[^a] matches any character different from a [^abc] matches any character that is neither a, b or c [^0-9] matches any character that is not a digit [^A-Za-z0-9] matches any character that is not an ASCII letter or digit Most special characters (like * or |) can be used unescaped inside square brackets to refer to a character (some exceptions to this rule are -, ^ or \\).\nExamples.\n[|*] matches either a | or a * [^|] matches any character that is not | The special character . stands for any (Unicode) character\nExamples.\n.. matches any string of two characters .* matches any Unicode string Exercise List all matches returned by a regex engine for:\nthe regex gr[ae]y in the words grey and gray are homonyms the regex [A-Z][^;]*; in Alice:12;Bob,35; the regex \u0026lt;.*\u0026gt; in \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; Solution $[10 .. 14)$: grey, $[19 .. 23)$: gray $[0 .. 8)$: Alice:12;, $[19 .. 23)$: Bob:35; $[0 .. 35)$: \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; Exercise Use the regex validation tool regex101 to write a regex whose evaluation matches HTML tags. For instance, in the word\n$\\qquad\\qquad$\u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt;\nthe regex should match \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt; and \u0026lt;/span\u0026gt;.\nPossible solution \u0026lt;[^\u0026gt;]*\u0026gt;\nPredefined character classes # Some escaped characters denote common character classes:\n\\d is equivalent to [0-9] \\w is equivalent to [A-Za-z0-9] \\s stands for any whitespace character. It is equivalent to $\\qquad\\qquad$[ \\t\\n\\x0B\\f\\r]\n\\R stands for any Unicode linebreak sequence. It is equivalent to\n$\\qquad$\\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]\nThe complements of some of these classes are also available:\n\\D is equivalent to [^\\d] \\S is equivalent to [^\\s] \\W is equivalent to [^\\w] Quantifiers # If $i \\le j \\in \\mathbb{N}$ then $e${$i$,$j$} concatenates $e$ with itself at least $i$ times and at most $j$ times, and is evaluated in a greedy way.\nExamples.\na{1,3} is equivalent to aaa|aa|a [A-Z]{1,3} greedily matches a sequence of 1 to 3 capital letters [A-Z]{0,3} greedily matches a (possibly empty) sequence of at most 3 capital letters $e${$i$} is equivalent to $e${$i$,$i$}.\nExamples.\na{3} is equivalent to aaa [A-Z]{4} matches a sequence of 4 capital letters $e$+ is equivalent to $ee$*.\nExamples.\na+ greedily matches a sequence of at least one a \\d+ greedily matches a nonempty sequence of digits [^\\d]+ greedily matches a nonempty sequence of non-digits If $e$ does not end with a quantifier, then $e$? is equivalent to $e$|$\\varepsilon$.\nExamples.\na? greedily matches at most one occurrence of a (ab)? greedily matches at most one occurrence of ab [A-Z]? greedily matches at most one capital letter Lazy quantification # If $e$ ends with a quantifier (e.g. with * or +) then $e$? forces a lazy evaluation of this quantifier.\nExamples.\nIn the word $w$ = ab:\nab* matches $w$ ab*? matches $w[0 .. 1)$: a In the word $w$ = abbb:\nab{1,3} matches $w$ ab{1,3}? matches $w[0 .. 2)$: ab Boundary matchers # Some special characters match empty segments (i.e. segments with word $\\varepsilon$).\nIn particular:\n^ (outside of a character class definition) matches the beginning of a string, $ matches the end of a string. Examples. Consider the string $w$ = a123b\nthe regex \\d+ matches $w[1 .. 3)$: 123 the regex ^\\d+ has no match in $w$ the regex \\d+$ has no match in $w$ Hint. These two special characters are widely used, in particular for string validation: an input word $w$ belongs to the language described by a regex $e$ iff there is a match for the regex ^$e$$ in $w$.\nBesides, if this is the case, then the best first match is also the longest possible match.\nExample. In the string $w$ = ab:\nthe best first match for a|ab is $w[a .. 1)$: a the best first match for ^(a|ab)$ is $w[a .. 2)$: ab The special character \\b matches any \u0026ldquo;natural language word\u0026rdquo; boundary (i.e. beginning or end).\nExample. Consider the string $w$ = User Alice797 is 55 years old\nThe best first match for \\d+ in $w$ is $w[10 .. 13)$: 797 The best first match for \\d+\\b in $w$ is $w[10 .. 13)$: 797 The only match for \\b\\d+ in $w$ is $w[17 .. 19)$: 55 The only match for \\b\\d+\\b in $w$ is $w[17 .. 19)$: 55 Group # A group in a regex is the content of a pair of parentheses.\nGroups allow capturing subsegments of a matched segment.\nExample. Consider the regex: $e$ = a(b|c)d and the word $w = $abd\nThere is only one match for $e$ in $w$ (namely $w$ itself).\nWithin this match, the subsegment captured by the group (a|b) is $w[1 .. 2)$: b.\nGroups in a regex are (totally) ordered based on the position of their opening parenthesis.\nExample. In the regex a(([\\d]*)(a|b))\nGroup number 1 is (([\\d]*)(a|b)) Group number 2 is ([\\d]*) Group number 3 is (a|b) Exercise Use the regex validation tool regex101 to write a regex with a group that matches what is inside a pair of opening and a closing HTML tags. For instance, in the word\n$\\qquad\\qquad$\u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;content\u0026quot;\u0026gt;Hello\u0026lt;/span\u0026gt;\nthe group should match My Title and Hello\nPossible solution \u0026gt;([^\u0026lt;]*)\u0026lt;/\nBackreference # A group can be referenced within a regex, with \\$n$, where $n$ is the group number. If the reference appears after the group, this is called a backreference.\nExample.\nIn the regex a(b|c)d\\1q, the backreference \\1 refers to the group (b|c) In the regex (a(b|m))d\\2m, the backreference \\2 refers to the group (b|m) Evaluation. Let $e$ be a regex with backreferences.\nConsider the expression $e\u0026rsquo;$ identical to $e$, but where each backreference is replaced with the group that it references. Then a match for $e$ is a match for $e\u0026rsquo;$ where each group and its copy capture segments with identical words.\nExample. The regex (a|b)\\1 is equivalent to aa|bb\nExercise Which words does the following regex match?\n$\\qquad\\qquad$((\\d)_\\2)@\\1\nSolution .\n1_1@1_1, 2_2@2_2, 3_3@3_3, etc. Note. Regexes with backreferences go beyond the expressivity of traditional regular expressions, meaning that they can describe languages that are not regular.\n"},{"id":10,"href":"/docs/recursion/sections/nary/","title":"N-ary recursion","section":"Recursion","content":" N-ary recursion # Definition. A recursive method that is not linear recursive uses n-ary recursion.\nSpecific cases include:\nbinary recursion if a method performs up to two recursive calls each time it is executed, ternary recursion if it performs up to three recursive calls each time it is executed, etc. Examples.\nThe algorithm seen earlier to print all files in a folder uses n-ary recursion.\nAll the binary tree algorithms seen earlier use binary recursion.\nDivide and conquer # The divide-and-conquer paradigm is a variation of the methodology seen earlier to solve a problem recursively. In the divide-and-conquer approach, the smaller inputs $I_1$, .., $I_k$ usually have (nearly) the same size.\nDivide-and-conquer has been instrumental in discovering efficient solutions to pervasive computational problems. Well-known examples include:\nthe Karatsuba algorithm for multiplying two numbers, the Strassen algorithm for matrix product, Mergesort for (stable) sorting. Example: Mergesort # Mergesort is one of (many) algorithms commonly used to sort an array, i.e. to solve the following problem:\nInput: an array $A$\nOutput: a sorted array with the same elements as $A$\nObservation. As we saw already, the array can be of any type (int, String, City, Unit, etc.), and the sorting criterion can be any total preorder over this type.\nThe Mergesort algorithm may be summarized as follows:\n(Base case). If $A$ has size $1$, then return it ($A$ is already sorted). (Inductive case). Otherwise: (divide): partition $A$ into its left half $A_1$ and its right half $A_2$, (solve): sort $A_1$ and sort $A_2$ (recursively), (combine): merge (the sorted versions of) $A_1$ and $A_2$. Here is a naive implementation, in pseudocode:\n// Returns a sorted array that contains the same elements as A. Type[] mergesort(Type[] A) { // Base case: the input array has size 1, it is already sorted. if(A.length == 1){ return A } // Inductive case (the input array has size \u0026gt; 1) // Compute the middle index (rounded down) int middleIndex = (A.length - 1) / 2 // Copy the left half of A into a new array Type[] leftHalf = copy(A[0 .. middleIndex]) // Sort it leftHalf = mergesort(leftHalf) // Copy the right half of A into a new array Type[] rightHalf = copy(A[middleIndex + 1 .. A.length - 1]) // Sort it rightHalf = mergesort(rightHalf) // merge the two sorted halves return merge(leftHalf, rightHalf) } Warning. This implementation is suboptimal (some arrays can be reused). We only used it to keep the explanation simple.\nExercise To complete this algorithm, implement (in pseudocode) the auxiliary method\nType[] merge(Type[] A, Type[] B) that takes as input two sorted arrays A and B, and returns a sorted array that contains their values.\nTry also to write it in such a way that the overall Mergesort algorithm is stable.\nPossible solution Iterate over A and B in parallel:\nif A[0] (resp. B[0]) is smaller than B[0] (resp. A[0]), then: add A[0] (resp. B[0]) to the output array, and repeat with A[1] and B[0] (resp. A[0] and B[1]), etc. when reaching the end of A (resp. B), add the remaining elements of B (resp. A) to the output array. More precisely:\nType[] merge(Type[] A, Type[] B){ // Output array Type[] C = new Type[A.length + B.length] // Index to iterate over A int a = 0 // Index to iterate over B int b = 0 // Index to iteratate over C int c = 0 // while we have not reached the end of A or B while (a \u0026lt; A.length \u0026amp;\u0026amp; b \u0026lt; B.length) { if(A[a] \u0026lt;= B[b]) { C[c] = A[a] a++ } else { C[c] = B[b] b++ } // If we reached the end of A, if(a == A.length){ // append all remaining elements of B to the output array. append(B, b, C, c) } else // Otherwise we reached the end of B. // So append all remaining elements of A to the output array. append(A, a, C, c) } } append (Type[] D, int d, Type[] C, int c) { while (d \u0026lt; D.length){ C[c] = D[d] d++ } } Merge sort in action. You can find visual illustrations of the execution of merge sort online. For instance this animation, or this (more accurate) one.\nObservation. Merge sort is a stable sorting algorithm.\nTree and graph traversal # Earlier in this chapter, we used different algorithms to traverse a binary tree, where nodes were instances of the following class:\nOne of these algorithms was the so-called \u0026ldquo;pre-order traversal\u0026rdquo;:\ntraverse(Node root){ // inductive case only (do nothing in the base case) if (root != null){ print(root.label) traverse(root.leftChild) traverse(root.rightChild) } } This algorithm naturally generalizes to trees where nodes may have more than two children. Nodes in such a tree can be represented as instances of the following class:\nAnd the algorithm becomes:\ntraverse(Node root){ if (root != null){ print(root.label) foreach child in root.children { traverse(child) } } } This algorithm can in turn be adapted to traverse a graph. More precisely, to explore all nodes reachable (directly or transitively) from a given source node in the graph.\nWarning. When applied to a graph, the algorithm above:\nmay not terminate (if the graph contains a loop), may process some nodes multiple times (even if the graph is acyclic). In order to avoid this, a common technique consists in labelling nodes in a graph with an additional boolean attribute visited, which indicates whether a node has already been visited during a traversal:\nAnd the algorithm becomes:\ntraverse(Node root){ if (root != null \u0026amp;\u0026amp; !root.visited){ root.visited = true print(root.label) foreach child in root.children { traverse(child) } } } Terminology. This approach is often called depth-first exploration of a graph.\nExercise Consider the following graph.\nWhat does the above algorithm print for input node A, assuming that the children of each node are sorted in label\u0026rsquo;s alphabetical order?\nSolution A B D F C E\nMinimax/Maximin # Minimax is a recursive algorithm with applications in games, robotics, decision making, etc.\nMinimax may be easier to explain in the context of a turn-based zero-sum game, i.e. a game (like chess or tic tac toe) where players compete with each other (as opposed for instance to a collaborative game).\nZero-sum two player games can be used to model decisions that minimize risk, assuming that the worst will happen if it can. In other words, one the two players represents the decision maker, and the other player represents \u0026ldquo;bad luck\u0026rdquo;.\nNumerous extensions and heuristics have been devise for Minimax. Here we only focus on the algorithm in its basic form.\nWinning strategy # Let Alice and Bob be our two players.\nExercise Consider the following state of a game of tic-tac-toe, where Alice plays with crosses, and is the next person to play.\nAssuming that Alice plays optimally, she already has won the game. Can you see why?\nSolution If Alice plays top right or bottom right, then regardless of Bob\u0026rsquo;s action, she can complete a line or a diagonal as her next move.\nLet us generalize this observation.\nIn a turn-based two player game, a sequence of moves can be viewed as a list of board states, whose head is the initial board state.\nThe tree that consists of all these lists represents all possible sequences of moves from the initial board state.\nExample. In the following tree, the root is a board state (of an imaginary game), and each branch represents a possible sequence of moves. Alice\u0026rsquo;s possible moves are the green edges, and Bob\u0026rsquo;s possible moves are the red edges.\nThe numbers on the leaves represent the payoff for Alice:\n9 if this is a winning state for Alice, and 0 if this is a winning sate for Bob. Warning. In such a tree, several nodes may represent the same board state (e.g. in a chess game, where different sequences of moves may lead to the same board state).\nExercise In the tree above, determine whether Alice has already won the game (assuming that she plays optimally).\nSolution The answer is yes, if Alice selects the right child of the tree\u0026rsquo;s root.\nObservation. In both exercises above, we were able to determine that Alice had already won the game, regardless of Bob\u0026rsquo;s actions. Intuitively, this holds iff:\nthere is a move for Alice such that, for every possible move of Bob, there is a move for Alice such that, for every possible move of Bob, \u0026hellip; either: there is a move for Alice that produces a winning state for Alice, or every possible move of Bob produces a winning state for Alice. This observation leads to a natural recursive definition.\nTerminology. In our tree, let us assuming that the root has depth $0$. We call a node existential if its depth is even, and universal if its depth is odd.\nExistential (resp. universal) nodes are the ones selected by Alice (resp. Bob).\nDefinition. A node $n$ is a winning node (for Alice) if:\nit represents a winning state for Alice, or $n$ is existential and some child of $n$ is a winning node, or $n$ is universal and all children of $n$ are a winning nodes. Naive algorithm # Let us start with a naive algorithm for games where:\nthe height of the tree is finite (as opposed to chess for instance, where there can be infinite sequences of moves). each leaf is a winning state for either Alice or Bob (as opposed to tic-tac-toe for instance, where there can be a draw). In such a game, every node of the tree must be a winning node for Alice or for Bob. In order to determine this, we can intuitively propagate labels up the tree:\nLet us assume that nodes in our tree are instance of the following class Node.\nNotation.\nIf nodes is an array of nodes and f a function that takes a node as argument, we will use:\n$\\qquad$ [ f(n) | n in nodes ]\nfor the array obtained by applying f to each element of nodes.\nObservation. Let n be a non-leaf node whose children have label 0 or 9. Then:\nthere exists a child of n with label 9 iff max [ c.label | c in n.children ] = 9 every child of $n$ is labeled with 9 iff min [ c.label | c in n.children ] = 9 Using this observation and our definition of a winning node (above), we can write the following recursive algorithm (in pseudocode):\n// existential node int maxiMin(Node n){ // base case (leaf node) if(n.children.length == 0){ return n.label } // inductive case: return the largest label computed for a child return max [ miniMax(c) | c in n.children ] } // universal node int miniMax(Node n){ // base case (leaf node) if(n.children.length == 0){ return n.label } // inductive case: return the least label computed for a child return min [ maxiMin(c) | c in n.children ] } In this algorithm, the method maxiMin (resp. miniMax) takes an existential (resp. universal) node as input, and returns:\n9 if this node is a winning node for Alice, or 0 if this node is a winning node for Bob. Note. The code can be (slightly) factorized by writing a unique recursive method, with an additional boolean argument that indicates whether the input node is existential or universal.\nThis is usually how the algorithm is presented. We used two methods instead for didactic reasons.\nApplication # In practice, in order to apply this algorithm to a game, the class Node is unnecessary. Instead, we can use:\nan auxiliary procedure that compute the \u0026ldquo;children of a node\u0026rdquo;, i.e. takes as argument a board state, and enumerates all board states that can be reached from it in one move. an auxiliary procedure score that determines whether a \u0026ldquo;node\u0026rdquo; is a leaf, and its \u0026ldquo;label\u0026rdquo; if it is a leaf. This procedure takes a state as input, and determines whether this state is a winning state for Alice or Bob. Then Alice can decide her next move by calling miniMax(s) for each successor state s of the current state, and select any of the states with the highest score.\nGeneralization # Arbitrary weights # The Minimax algorithm can be generalized to scenarios where a leaf node may not represent a winning state for Alice or Bob. For instance, in order to model tic-tac-toe, we may label some leaves with the value 4 for a draw.\nMore generally, any function score that assigns a score to a node can be used, as long as it assigns a maximal value to a winning state for Alice, and a minimal value to a winning state for Bob.\nThe algorithm is unchanged.\nLarge or infinite trees # Warning Minimax can be prohibitive for games with an important tree height (since the number of board states to explore may grow exponentially with the height of the tree).\nBesides, Minimax does not terminate if the tree has infinite branches (for instance in a chess game).\nThis is why the tree of game states is usually explored up to a certain depth.\nExample. Deep Blue (the first program that defeated a chess world champion) was only looking 12 moves ahead.\nThe algorithm becomes:\n// existential node int maxiMin(Node n, int depth){ // base case if(n.children.length == 0 | depth == 0){ return score(n) } // inductive case: return the largest label computed for a child return max [ miniMax(c, depth - 1) | c in n.children ] } // universal node int miniMax(Node n, int depth){ // base case if(n.children.length == 0 | depth == 0){ return score(n) } // inductive case: return the least label computed for a child return min [ maxiMin(c, depth - 1) | c in n.children ] } Optimization # A variety of optimization techniques have been proposed for Minimax (e.g. alpha-beta pruning). They are beyond the scope of this course.\n"},{"id":11,"href":"/docs/stream/sections/init/","title":"Source","section":"Streams in Java","content":" Source # Collection # A stream can be created out of a Java Collection with the instance method stream.\nExample.\nList\u0026lt;Unit\u0026gt; units = getUnits(); units.stream(); If the collection has a predictable order of iteration (e.g. if the collection is a List), then the elements will appear in this order in the stream.\nTo create a stream out of the entries of a map, we can use the instance method Map.entrySet (which returns a set).\nExample.\nMap\u0026lt;String, Integer\u0026gt; map = getMap(); map.entrySet().stream(); Array # A stream can be created out of a Java array with the static method Arrays.stream.\nExample.\nUnit[] units = getUnits(); Arrays.stream(units); Generate a stream with indices # An IntStream is a stream of int (see the dedicated section on streams with primitive numeric types). An IntStream can for instance be created with the static method IntStream.range, as follows:\nExample.\n// Contains [0, 2] List\u0026lt;Unit\u0026gt; evenIntegers = IntStream.range(0, 4) // produce the stream (0, 1, 2, 3) .filter(i -\u0026gt; i % 2 == 0) // retain even numbers .toList(); This can be used to iterate over a list or array while keeping track of the elements\u0026rsquo; positions.\nExample.\nUnit[] units = getUnits(); List\u0026lt;Unit\u0026gt; evenUnits = IntStream.range(0, units.length) .filter(i -\u0026gt; i % 2 == 0) .mapToObj(i -\u0026gt; units[i]) .toList(); However, for this usage, external libraries offer more natural options. For instance, the StreamEx library can create a map from index to entry in an array, and generate a stream out of the entries of this map (analogous to the set of entries produced by Map.entrySet).\nUnit[] units = getUnits(); List\u0026lt;Unit\u0026gt; evenUnits = EntryStream.of(units) .filterKeyValue((index, unit) -\u0026gt; index % 2 == 0) .values() .toList(); } To use StreamEx in a Maven project, declare this dependency:\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;one.util\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;streamex\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.8.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; or in a Gradle project:\nimplementation group: \u0026#39;one.util\u0026#39;, name: \u0026#39;streamex\u0026#39;, version: \u0026#39;0.8.2\u0026#39; "},{"id":12,"href":"/docs/intro/sections/lecturers/","title":"Teaching staff","section":"This course","content":" Teaching staff # Julien Corman will teach the lectures and one lab.\nDjamila Oukharijane will teach the other lab.\nOffice hours # If you need additional help with the content of the course, the assignments and/or your project, you can ask for office hours with any (or both) of us.\nThese appointments must be scheduled via email (follow the links above for our email addresses).\n"},{"id":13,"href":"/docs/simplify/sections/boolean/","title":"Boolean conditions","section":"Simplifying code","content":" Boolean conditions # A complex boolean sub-expression in the scope of a negation can be difficult to read and/or debug.\nExample. The two following expressions are equivalent (but the latter is arguably easier to read):\n$$ \\neg(\\neg(a \\lor b) \\land \\neg (\\neg c \\lor d)) $$\n$$ a \\lor b \\lor \\neg c \\lor d $$\nSimplification # In a Boolean expression, negations can always be \u0026ldquo;pushed\u0026rdquo; inside parentheses, as follows:\nbase case:\n$\\neg (x = y)$ becomes $x \\neq y$ $\\neg (x \\le y)$ becomes $x \u0026gt; y$ $\\neg (x \u0026gt; y)$ becomes $x \\le y$ etc. inductive case:\n$\\neg (\\phi \\land \\psi)$ becomes $\\neg \\phi \\lor \\neg \\psi$ $\\neg (\\phi \\lor \\psi)$ becomes $\\neg \\phi \\land \\neg \\psi$ Exercise Simplify the following Java condition:\n!(x != y \u0026amp;\u0026amp; ( !x.hasNext() || !y.hasNext() || x.next() != y.next())) Solution The expression is of the form\n!(x != y \u0026amp;\u0026amp; \u0026lt;expression 1\u0026gt;) So we can transform it into\nx == y || ! \u0026lt;expression 1\u0026gt; Next observe that\n! \u0026lt;expression 1\u0026gt; is\n!( !x.hasNext() || !y.hasNext() || x.next() != y.next()) which can be transformed into\nx.hasNext() \u0026amp;\u0026amp; y.hasNext() \u0026amp;\u0026amp; x.next() == y.next() So the whole expression becomes\nx == y || ( x.hasNext() \u0026amp;\u0026amp; y.hasNext() \u0026amp;\u0026amp; x.next() == y.next() ) "},{"id":14,"href":"/docs/recursion/sections/correctness/","title":"Correctness","section":"Recursion","content":" Correctness # To check whether a recursive method is correct, it is (usually) sufficient to check that the two following two properties hold:\n(Base case(s)). The method is correct for the smallest possible inputs.\n(Inductive case). For an arbitrary $n$:\n$\\qquad\\qquad$ if the method is correct for all inputs of size $\\leq n$, then it is correct for all inputs of size $n+1$.\nExample. Consider the algorithm seen earlier to compute the sum of all nodes in a binary tree, if nodes are instance of the following class:\n1 2 3 4 5 6 7 8 int sum(Node root){ // base case if (root == null){ return 0 } // inductive case return root.value + sum(root.leftChild) + sum(root.rightChild) } For the size $n$ of the input, we can use in this example the height of the tree (i.e. the length of its longest branch).\nLet use verify that our two properties hold:\n(Base case). The sum of all labels in an empty tree is 0, so the method is trivially correct.\n(Inductive case). Consider any natural number $n$, and any tree of height $n+1$, with root $r$. And let us assume that the method sum is correct for all trees of height $\\le n$. We need to show that under this assumption, the method is correct for the tree rooted in $r$.\nObserve that the subtrees rooted in r.left and r.right have height $\\le n$. So from our assumption, the two recursive calls (Line 6) to the method sum are correct, meaning that they return the sum of all values in each of the two subtrees. Next, observe that the sum of all labels in our tree must be equal to the sum of all values in these two subtrees, plus the label of $r$. Which is precisely what the method returns. These two properties (1 and 2 above) provide an immediate proof by induction that the method is correct for all inputs.\nProof. Partition the set of all possible inputs by size, i.e. (assuming that inputs in our base case have size 0):\nthe set $S_0$ of all inputs of size $0$, the set $S_1$ of all inputs of size $1$, the set $S_2$ of all inputs of size $2$, etc. In order to show that the method is correct, it is sufficient to show that it is correct for each $S_i$ (where $i \\in \\mathbb{N}$).\nNow let us assume that properties 1 and 2 hold, i.e.:\n(Base case). The method is correct for $S_0$. (Inductive case). For any $n$, $\\qquad\\qquad$ if the method is correct for $S_0 \\cup S_1 \\cup \u0026hellip; \\cup S_n$, then it is correct for $S_{n+1}$.\nWe know that Property 2 holds for an arbitrary $n$. In particular, it holds for $n= 0$. In other words (replacing $n$ with $0$):\nIf the method is correct for $S_0$, then it is correct for $S_1$. So from Properties 1 and 3, we can infer:\nThe method is correct for $S_1$.\n$\\qquad$\nNext, consider the case where $n = 1$. From Property 2 still, we know (replacing $n$ with $1$) that:\nIf the method is correct for $S_0 \\cup S_1$, then it is correct for $S_2$. So from Properties 1 and 4 and 5, we can infer:\nThe method is correct for $S_2$.\n$\\qquad$\netc.\n"},{"id":15,"href":"/docs/intro/sections/evaluation/","title":"Evaluation","section":"This course","content":" Evaluation # Evaluation for this course is based on:\nassignments: up to 30 points, a group project: up to 60 points, and an oral exam: up to 10 points. Your final grade is the sum of the above, multiplied by 0.3.\nAssignments # There will be 7 or 8 assignments for this course. These are standard programming exercises, related to notions seen during the lectures. The labs are (mostly) dedicated to these assignments.\nThe assignments are individual (do not submit the code of another student).\nThe release of each assignment is announced via Teams.\nAssignments are submitted via GitHub classroom. You can submit an assignment multiple times (but only before its deadline).\nNote. In order to submit your assignments (and your project), you will need a GitHub account. If you do not have one already, please create one and communicate it to the lecturer, preferably via Teams. Make sure that you use a single GitHub account for all your assignments and your project.\nGroup project # Guidelines for the content of the project are in the dedicated chapter. We focus here on organization and evaluation.\nEach group must consist of 3 to 4 students. Groups should be decided by March 20, and communicated via mail or Teams to the lecturer.\nProjects are delivered via GitHub.\nThe project\u0026rsquo;s code is expected to apply techniques seen during the lectures, but only if relevant. Please do not add artificial functionalities to your project for the sole purpose of illustrating a certain technique.\nGrades for a project are awarded individually, based on each student\u0026rsquo;s contribution. Students are expected to work on different computers. Make sure that:\neach student uses a different (and only one) GitHub account, and each student commits (via git) his/her own code. Among other evaluation criteria, we consider:\nquantity of work, non-trivial logic, appropriate data types and data structures, structure of the code (no code duplication, good usage of methods, classes, interfaces, inheritance, etc.) readability, documentation, naming, collaboration, integration with the rest of project, evidence of testing, etc. Oral exam # The oral exam is individual.\nNo revision is needed.\nWe will ask you questions about your code and/or involvement in the project.\nFor instance:\nwhich design choices you made, which difficulties you encountered, the expected behavior of a certain method, how some portions of the code may be improved, etc. In particular, we will check whether you have a good understanding of the code that you submitted. If not, then your mark for the project may be reevaluated.\n"},{"id":16,"href":"/docs/stream/sections/intermediate/","title":"Intermediate operations","section":"Streams in Java","content":" Intermediate operations # In a stream pipeline, an intermediate operation takes a stream as input, and produces another stream.\nStateless operations # A stateless intermediate operation processes each element of the input stream independently, and without the need to memorize information about previous elements in the stream.\nStream.filter and Stream.map # These two instance methods allow specifying a stateless operation, via a callback method. We have already explained their behavior in detail in our initial pipeline example.\nStream.flatMap # This is another very useful instance method, which can produce several objects out a single object in the stream.\nExample. Consider the following classes City and Region.\nGiven as input a collection regions of regions, we can use the function flatMap to create a stream that consists of all cities in these regions, as follows:\nregions.stream() .flatMap(r -\u0026gt; r.cities.stream()) For instance, the following method takes as argument a list of regions, and returns the zip codes of all cities in these regions, with the exceptions of the zip code of Bologna:\nList\u0026lt;Integer\u0026gt; allZipCodesButBologna(List\u0026lt;Region\u0026gt; regions) { return regions.stream() .flatMap(r -\u0026gt; r.cities.stream()) .filter(c -\u0026gt; !c.name.equals(\u0026#34;Bologna\u0026#34;)) .map(c -\u0026gt; c.zipCode) .toList(); } Let us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Region).\nThe method flatMap takes as argument a callback function of type\n$\\qquad T \\to$ Stream\u0026lt;$T\u0026rsquo;$\u0026gt;\nwhere $T\u0026rsquo;$ can be any type.\nIn this example, the callback function is\nr -\u0026gt; r.cities.stream() which has type\n$\\qquad$ Region $\\to$ Stream\u0026lt;City\u0026gt;\nLet us name this callback function $f$.\nThe method flatMap returns a Stream\u0026lt;$\\mathit{T\u0026rsquo;}$\u0026gt; (e.g. in this example a Stream\u0026lt;City\u0026gt;). This stream is the concatenation of all streams $f(a)$ such that $a$ belongs to the original stream.\nStateful operations # Stateful intermediate operations are the ones that are not stateless.\nWe list here some of the most useful ones.\nStream.distinct # This instance method produces an identical stream, but without duplicates.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 1, 3, 1, 2); // Contains [2, 1, 3] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .distinct() .toList(); For a stream of objects, duplicates are identified based on Java\u0026rsquo;s object equality (i.e. as specified by the method Object.equals).\nReminder. If a class overrides the method Object.equals, then it should also override Object.hashCode (and these two implementations should be consistent with each other).\nStream.sorted # This instance method outputs a sorted stream. It can be called with or without a Comparator.\nIts behavior (with and without a comparator) is analogous to the methods Arrays.sort and Collection.sort.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // Contains [1, 1, 2, 2, 3] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .sorted() .toList(); Hint. Recall that Comparator\u0026lt;$T$\u0026gt; is a functional interface, whose (only) method is compare($T$ e1, $T$ e2). As a result, it can be implemented with an anonymous method.\nFor instance, the following method removes duplicates in a list of cities, and returns it sorted:\nList\u0026lt;City\u0026gt; sortDistinctCitiesByName(List\u0026lt;City\u0026gt; cities){ return cities.stream() .distinct() .sorted((c1, c2) -\u0026gt; c1.name.compareTo(c2.name)) .toList(); } Stream.limit # This instance method takes as argument an integer $n$, and outputs the $n$ first elements of the stream.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // Contains [2, 1, 3, 1] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .limit(4) .toList(); Stream.skip # This instance method takes as argument an integer $n$, and outputs the stream without its $n$ first elements.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // Contains [3, 1, 2] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .skip(2) .toList(); "},{"id":17,"href":"/docs/objects/","title":"Objects and classes","section":"Docs","content":" Objects and classes # This chapter introduces some basic notions of (class-based) object-oriented programming.\n"},{"id":18,"href":"/docs/regex/sections/java/","title":"Using Java regexes","section":"Regular expressions","content":" Using Java regexes # Escaping \\ # A regex in Java is a string.\nRecall that within a Java string, a \\ character must be escaped (i.e. written \\\\) to be read as a normal character. So in a Java string that represents a regex, every \\ should be written \\\\.\nExample. The string \u0026quot;[A-Z]\\\\d+\u0026quot; represents the regex [A-Z]\\d+\nHint. This is another good reason for using a regex validation tool (e.g. regex101) to test and debug a regex, before incorporating it into a program.\nWarning. We saw earlier that when \\ is treated as a normal character in a regex, it must be escaped (\\\\). Therefore in this specific case, the Java string should contain \\\\\\\\.\nExample. The string \u0026quot;\\\\d+\\\\\\\\[A-Z]\u0026quot; represents the regex \\d+\\\\[A-Z]\nRegexes and String instance methods # Some instance methods of the class String take a regex as input. Among these:\nboolean matches(String regex) returns true iff the whole string belongs to the language described by the regex. Or equivalently if there is a match for the regex ^regex$. String input = \u0026#34;ab\u0026#34;; // Outputs false System.out.println(input.matches(\u0026#34;a\u0026#34;)); // Outputs true System.out.println(input.matches(\u0026#34;ab|a\u0026#34;)); // Outputs true System.out.println(input.matches(\u0026#34;a|ab\u0026#34;)); String replaceFirst(String regex, String replacement) replaces the best first match with the input replacement string: String input = \u0026#34;aba\u0026#34;; // Outputs \u0026#34;ba\u0026#34; System.out.println(input.replaceFirst(\u0026#34;ab|a\u0026#34;, \u0026#34;b\u0026#34;)); // Outputs \u0026#34;bba\u0026#34; System.out.println(input.replaceFirst(\u0026#34;a|ab\u0026#34;, \u0026#34;b\u0026#34;)); String replaceAll(String regex, String replacement) replaces all (successive) best first matches with the input replacement string: String input = \u0026#34;aba\u0026#34;; // Outputs \u0026#34;bb\u0026#34; System.out.println(input.replaceAll(\u0026#34;ab|a\u0026#34;, \u0026#34;b\u0026#34;)); // Outputs \u0026#34;bbb\u0026#34; System.out.println(input.replaceAll(\u0026#34;a|ab\u0026#34;, \u0026#34;b\u0026#34;)); For both replaceFirst and replaceAll, the replacement string can use a reference to a group, written $$n$, where $n$ is the group number:\nString input = \u0026#34;The windows are open. The apples are green.\u0026#34;; String output = input.replaceAll(\u0026#34;(\\\\w+)s\\\\s+are\u0026#34;, \u0026#34;$1 is\u0026#34;); // Outputs \u0026#34;The window is open. The apple is green.\u0026#34; System.out.println(output); Reminder. Strings in Java are immutable. So when the methods replaceFirst and replaceAll successfully \u0026ldquo;modify\u0026rdquo; the string, they return a different object.\nString[] split() splits the input string around the (successive) best first matches: String input = \u0026#34;This is weird.\\n\u0026#34;+ \u0026#34;Or not.\u0026#34; // Contains [ \u0026#34;This\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;weird.\u0026#34;, \u0026#34;Or\u0026#34;, \u0026#34;not.\u0026#34; ] String[] output = input.split(\u0026#34;\\\\s+\u0026#34;); java.util.regex # The native package java.util.regex contains among other the following classes:\nPattern # A Pattern is a regex.\nA Pattern can be created with the static method Pattern Pattern.compile(Sring regex).\nMatcher # A Matcher is a \u0026ldquo;regex engine\u0026rdquo; for a specific regex and a specific string.\nA Matcher can be created out of a Pattern, with the instance method Matcher matcher(String inputString) of the class Pattern.\nPattern pattern = Pattern.compile(\u0026#34;\\\\d+[a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice787@unibz\u0026#34;); Among others, the class Matcher provides the following instance methods:\nboolean matches(), String replaceFirst() and String replaceAll() behave analogously to their counterpart for the class String, described above.\nboolean find() tries to match the next best first match. If this method succeeds, then information can be retrieved about the matched segment (see below). The next call to find() will find the following best first match (if any).\nPattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Outputs true and matches the segment with word \u0026#34;Alice\u0026#34; System.out.println(matcher.find()); // Outputs true and matches the segment with word \u0026#34;Bob\u0026#34; System.out.println(matcher.find()); // Outputs false System.out.println(matcher.find()); String group(int i) returns the substring captured by Group $i$ in the latest match. Group 0 stands for the whole regex.\nString group() is equivalent to group(0).\nint start() returns the start index (included) of the latest matched segment.\nint end() returns the end index (excluded) of the latest matched segment.\nPattern pattern = Pattern.compile(\u0026#34;([A-Z])[a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); //Find the best first match matcher.find(); // Outputs \u0026#34;Alice\u0026#34; System.out.println(matcher.group()); // Outputs \u0026#34;A\u0026#34; System.out.println(matcher.group(1)); // Outputs 0 System.out.println(matcher.start()); // Outputs 5 System.out.println(matcher.end()); //Find the next best first match matcher.find(); // Outputs \u0026#34;Bob\u0026#34; System.out.println(matcher.group()); // Outputs \u0026#34;B\u0026#34; System.out.println(matcher.group(1)); public Sream\u0026lt;MatchResult\u0026gt; results() returns all (successive) best first matches. Pattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Contains two match results: // - one for the segment with word \u0026#34;Alice\u0026#34;, // - one for the segment with word \u0026#34;Bob\u0026#34; List\u0026lt;MatchResult\u0026gt; matches = matcher.results().toList(); MatchResult # A MatchResult is a matched segment.\nThe class MatchResult provides (among others) the instance methods String group(int i), String group(), int start() and int end(), which behave analogously to their counterparts in the class Matcher.\nPattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Get all best first matches List\u0026lt;MatchResult\u0026gt; matches = matcher.results().toList(); // Outputs \u0026#34;Alice\u0026#34; System.out.println(matches.get(0).group()); // Outputs \u0026#34;Bob\u0026#34; System.out.println(matches.get(1).group()); "},{"id":19,"href":"/docs/intro/sections/content/","title":"Content","section":"This course","content":" Content of the course # This is a beginner\u0026rsquo;s course on imperative and (class-based) object oriented programming, with an emphasis on practice and collaboration.\nThe course relies on Java as main programming language. However, many concepts seen in this course are relevant to other (imperative and/or object-oriented) programming languages: C/C++, C#, Javascript, Go, Kotlin, Lua, Perl, PHP, Python, Rust, Ruby, Typescript, Visual Basic, etc.\nPrerequisites # Students are expected to have completed the Computer Programming course (INF/01 76203).\nTherefore the following topics are not covered in this course:\nvariables, assignments, variable scope, basic data types (int, char, boolean, etc.). conditional statements (\u0026ldquo;if/then/else\u0026rdquo;) and loops, expression evaluation, methods/functions, arrays, etc. Students are also expected to have played the board game used as a running example throughout the lectures.\nOutcomes # After completing this course, students should be able to:\ndevelop a prototype application in Java, write structured, documented and easily maintainable code, collaborate with other developers. Focus # Foundations # Most lectures put an emphasis on problem solving, rather than providing syntax or (mechanical) recipes.\nFor conciseness, pseudocode may be used in some sections rather than Java code.\nSome lectures also focus on more abstract (albeit simple) notions. These includes elementary mathematical objects or structures: set, tuple, map, relation, preorder, graph, tree, etc.\nThe purpose is twofold:\ngeneralize techniques seen in this course to programming languages other than Java, provide a widely accepted vocabulary to document/explain your code. Collaboration # The course introduces basic coding practices to ease development within a team. In particular:\nstructuring a project (components, interfaces, encapsulation, etc.), factorizing code (inheritance, reuse of methods, etc.), test-driven development, collaboration via git. Note. What is considered good communication in computer science may differ from other disciplines. Emphasis is put on clarity, precision and conciseness.\nExercise Here is a (caricature of) a poorly documented method. Can you improve the method\u0026rsquo;s description and/or signature?\n/** The algorithm looks at the first collection, and is only guaranteed to * work if no number is present twice in this collection, in which case it * loops over the numbers contained in this collection (in no specific order) * and checks for each number whether it is also present in the second * collection (which is also expected to have distinct numbers). The code * written in this loop adds the current number (from the first collection) * to the output collection if this number is also present in the second * collection, and does nothing with this number otherwise. */ Collection\u0026lt;Integer\u0026gt; filterNumbersThatAreShared(Collection\u0026lt;Integer\u0026gt; c1, Collection\u0026lt;Integer\u0026gt; c2); Solution A simpler signature and description could be:\n/** * Returns the intersection of sets s1 and s2. */ Set\u0026lt;Integer\u0026gt; intersection(Set\u0026lt;Integer\u0026gt; s1, Set\u0026lt;Integer\u0026gt; s2); However, the following topics are beyond the scope of this course:\ncontinuous integration, project management (agile methodology, bug tracking, etc.), advanced git workflows, advanced design patterns, dependency injection, etc. Quizzes # Some lectures will include quizzes. These are anonymous, and therefore are not part of your evaluation. The purpose is to:\nmake lectures more interactive, and adapt the pace of the lectures based on students\u0026rsquo; answers. It is in your own interest to answer them without external resources (web, chatbots, IDE, etc.).\nHere is a link to the first quiz: https://forms.gle/7Y2MpzE7v5xzUJFy7.\nTopics covered # Due to limited time, many notions (such as asymptotic cost, regular languages, hash tables or multi-threading) are only briefly introduced in this course. However, some of them will be further discussed in other courses of the bachelor.\nProgramming techniques # An important part of the lectures is dedicated to the following core topics:\nobjects, classes and interfaces (inheritance, encapsulation, value vs reference, comparing objects, cloning objects, etc.), abstract data types (set, list, associative array, queue, etc.) and data structures (array, linked list, hash table, etc.), recursion. In addition, the following will be (briefly) introduced:\ngenerics, mutability, pure functions, lambda expressions and streams, multi-threading. Note. Some of these topics pertain to functional programming, but have been incorporated (in some form) to several imperative languages over the years.\nSoftware engineering # unit tests, exceptions, code factorization. Java # compilation/interpretation, bytecode, JVM and JDK, input/output, object serialization, JSON/XML serialization. Tools and tutorials # git, build automation (Maven and Gradle), using an IDE, using a terminal efficiently (introduction), etc. "},{"id":20,"href":"/docs/stream/sections/terminal/","title":"Terminal operation","section":"Streams in Java","content":" Terminal operation # A stream pipeline contains one terminal operation.\nThis operation may for instance:\nexecute a method for each element of the stream (e.g. print the value of each of them), or collect these elements (e.g. into a list), or inspect these elements (check whether all of them satisfy a certain condition), or aggregate these elements (e.g. sum the values of a stream of integers). Stream.forEach # This instance method is similar to Stream.map, in the sense that it also applies a callback method to each element of the stream. However, in this case, the callback method is not a function (i.e. it has no return value).\nIn other words, if the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt;, then foreach takes as argument a callback method of type\n$\\qquad \\mathit{T} \\to$ void\n(equivalently, in Java\u0026rsquo;s terminology, the callback method must implement the native functional interface Consumer\u0026lt;$\\mathit{T}$\u0026gt;, seen earlier).\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(4, 1, 3, 2, 4); // outputs `4, `2` and `4` list.stream() .filter(x -\u0026gt; x % 2 == 0) .forEach(System.out::println); Hint. In the absence of intermediate operation, the instance method Collection.forEach can be used instead, with the same effect:\nList\u0026lt;Integer\u0026gt;list = List.of(4, 1, 3, 2, 4); // ouputs `4`, `1`, `3`, `2`, and `4` list.forEach(System.out::println); Collecting a stream # Stream.toList # This instance method outputs a final list with the elements of the stream.\nExample. We already used this method in several of our examples. For instance\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // Contains [1, 1, 2, 2, 3] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .sorted() .toList(); Stream.collect # This instance method takes as argument a so-called Collector, which is in charge of collecting the elements of the stream into a Collection (e.g. List or Set, or a Map, or a String, etc.\nThe utility class Collectors provides a variety of static methods that return a collector.\nCollectors.joining # This static method returns a collector that concatenates a stream of strings. joining (optionally) take a string as argument, which is used to separate the concatenated elements in the output string.\nExample\nCity ancona = new City(\u0026#34;Ancona\u0026#34;, 60100); City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100); City matera = new City(\u0026#34;Matera\u0026#34;, 75100); List\u0026lt;City\u0026gt; cities = List.of(ancona, bologna, matera); // Contains the string `Ancona:Bologna:Matera` String concat = cities.stream() .map(c -\u0026gt; c.name) .collect(Collectors.joining(\u0026#34;:\u0026#34;)); Exercise The method Files.list(path) takes as argument a path to a directory, and returns an instance of Stream\u0026lt;Path\u0026gt;, whose elements are the entries in the directory.\nWhat does the method mysteriousMethod below return?\nString mysteriousMethod(Path path) throws IOException { if(!Files.isDirectory(path)) { return \u0026#34;\u0026#34;; } return Files.list(path) .filter(p -\u0026gt; path.toString().endsWith(\u0026#34;.txt\u0026#34;)) .flatMap(p -\u0026gt; readLines(p)) .filter(l -\u0026gt; l.contains(\u0026#34;foo\u0026#34;)) .collect(Collectors.joining(System.lineSeparator())); } Stream\u0026lt;String\u0026gt; readLines(Path path){ try { return Files.lines(path); } catch (IOException e) { throw new RuntimeException(e); } } Solution A string that consists of all lines that contain the string foo in any .txt file of the directory.\nCollectors.toCollection # This static method takes as argument the constructor of a Java collection (e.g. HashSet::new, TreeSet::new, ArrayList::new, etc.), and returns a collector for this type of collection.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // This is the TreeSet {1, 2, 3} Set\u0026lt;Integer\u0026gt; ouputSet = list.stream() .collect(Collectors.toCollection(TreeSet::new)); Collectors.toSet # As we saw in our initial pipeline example, this static method takes no argument, and returns a collector that produces a Java Set.\nThe Java specification does not require a specific implementation. So this set could for instance be a HashSetor a TreeSet, depending on the Java Virtual Machine that executes the program.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // Contains {1, 2, 3} Set\u0026lt;Integer\u0026gt; ouputSet = list.stream() .collect(Collectors.toSet()); Collectors.toList # This static method is analogous to Collectors.toSet, but the collector that it returns produces a Java List. Again, there is no requirement on the specific implementation of this list.\nCollectors.toMap # This static method is analogous to Collectors.toSet and Collectors.toList, but the collector that it returns produces a Java Map.\nIf the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt;, then toMap takes as argument two callback functions, of type\n$\\qquad \\mathit{T} \\to K$\nand\n$\\qquad \\mathit{T} \\to V$\nrespectively, where $K$ and $V$ are arbitrary types.\nThe first callback method defines the keys of the map, and the second defines the values.\nExample. The following method takes a list of cities, and returns a map from city name to city.\nMap\u0026lt;String, City\u0026gt; buildMap(List\u0026lt;City\u0026gt; cities){ return cities.stream() .collect(Collectors.toMap( c -\u0026gt; c.name, c -\u0026gt; c )); } Warning. This method may throw an exception at runtime, in case of conflicting keys (in other words, if the first callback function is not injective). To make it robust, it is possible to pass it a third callback method, in charge of solving conflicts.\nCollectors.groupingBy # This static method returns a collector that groups the elements of the stream, based on some input grouping criterion. The grouping criterion is specified as a callback function.\nExample. The following method take a list of units as argument, and returns a map from a color to a list of units that share this color:\nMap\u0026lt;String, List\u0026lt;Unit\u0026gt;\u0026gt; groupByColor(List\u0026lt;Unit\u0026gt; units){ return units.stream() .collect(Collectors.groupingBy(u -\u0026gt; u.color)); } If the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt;, then Collectors.groupingBy takes as argument a callback function of type\n$\\qquad \\mathit{T} \\to K$\nwhere $K$ is an arbitrary type. This callback function computes a key for each element of the stream.\ngroupingBy returns a map with type Map\u0026lt;$K$, List\u0026lt;$T$\u0026gt;\u0026gt; that maps each key to the list of elements that share this key.\nAlternatively, groupingBy may be called with a Collector as second argument, which aggregates the elements of each list.\nExample. The following method take a list of units as argument, and returns a map from color to number of units that share this color.\nMap\u0026lt;String, Long\u0026gt; groupByColor(List\u0026lt;Unit\u0026gt; units) { return units.stream() .collect(Collectors.groupingBy( u -\u0026gt; u.color, Collectors.counting() )); } Boolean checks # Stream.anyMatch # This instance method checks whether at least one element in the stream satisfies a certain Boolean condition.\nSimilarly to the method filter, if the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt;, then anyMatch takes as argument a callback function of type\n$\\qquad \\mathit{T} \\to$ Boolean\nwhich specifies the Boolean condition.\nWarning. anyMatch is a short-circuiting operation, meaning that the stream is interrupted after the first match (if any).\nExample. The following two programs are equivalent:\nList\u0026lt;Integer\u0026gt; integers = getIntegers(); boolean containsEvenNumber = integers.stream() .anyMatch(x -\u0026gt; x % 2 == 0); $\\qquad$\nList\u0026lt;Integer\u0026gt; integers = getIntegers(); boolean containsEvenNumber = false; for(int x : integers){ if(x % 2 == 0){ containsEvenNumber = true; break; } } Coding style. Programs with multiple break statements can be difficult to read and/or debug. A stream with a short-circuiting operation (like anyMatch) can be a way to avoid them.\nExercise What does the method mysteriousMethod below return?\nList\u0026lt;Path\u0026gt; mysteriousMethod(Path path) throws IOException { if (!Files.isDirectory(path)) { return List.of(); } return Files.list(path) .filter(p -\u0026gt; path.toString().endsWith(\u0026#34;.txt\u0026#34;)) .filter(p -\u0026gt; readLines(p).anyMatch(l -\u0026gt; l.contains(\u0026#34;foo\u0026#34;))) .toList(); } Stream\u0026lt;String\u0026gt; readLines(Path path){ try { return Files.lines(path); } catch (IOException e) { throw new RuntimeException(e); } } Solution The list of all .txt files in the input directory that contain the string foo.\nStream.allMatch # This instance method is analogous to Stream.anyMatch, but checks whether all elements in the stream satisfy the Boolean condition.\nThis is also a short-circuiting operation (if an element does not satisfy the criterion).\nAggregation # Stream.findFirst # This instance method returns the first element in the stream.\nThis is a short-circuiting operation.\nIn combination with Stream.filter, it can simulate Stream.anyMatch.\nExample The following two programs are equivalent:\nList\u0026lt;Integer\u0026gt; integers = getIntegers(); Optional\u0026lt;Integer\u0026gt; firstEvenNumber = integers.stream() .filter(x -\u0026gt; x % 2 == 0) .findFirst(); $\\qquad$\nList\u0026lt;Integer\u0026gt; integers = getIntegers(); Optional\u0026lt;Integer\u0026gt; firstEvenNumber = Optional.empty(); for(int x : integers){ if(x % 2 == 0){ firstEvenNumber = Optional.of(x); break; } } Stream.count # This instance method returns the size of the stream.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(2, 1, 3, 1, 2); // has value 2 int size = list.stream() .filter(x -\u0026gt; x % 2 == 0) .count(); Stream.max # This instance method takes as argument a Comparator, and returns (one of the) maximal element(s) in the stream w.r.t. this comparator (if any).\nExample.\nCity ancona = new City(\u0026#34;Ancona\u0026#34;, 60100);, City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100);, City matera = new City(\u0026#34;Matera\u0026#34;, 75100);, List\u0026lt;City\u0026gt; cities = List.of(ancona, bologna, matera); // Contains matera Optional\u0026lt;City\u0026gt; selectedCity = cities.stream() .max((c1, c2) -\u0026gt; c1.zipCode - c2.zipCode); Stream.reduce # This instance method aggregates the elements of the stream based on a binary operator $\\circ$.\nFor instance, $\\circ$ could be + or * for a stream of numbers, or concatenation for a stream of strings.\nAs an illustration, if the stream has elements\n$\\qquad (a, b, c, d)$\nthen the method reduce returns\n$\\qquad (((a \\circ b) \\circ c) \\circ d)$\nLet us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt;. The method reduce takes two arguments:\na neutral element for the operator $\\circ$, i.e. a value $a$ such that $a \\circ x = x$ for any $x \\in T$. For instance,\n$0$ is the neutral element for $+$, $1$ is the neutral element for $*$, \u0026quot;\u0026quot; is the neutral element for string concatenation, etc. the binary operator $\\circ$, specified as a callback function.\nExercise What is the type of this callback function?\nSolution $\\qquad T \\times T \\to T$\nExample.\nList\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3); // Has value 24 int product = numbers.stream() .reduce(1, (subtotal, element) -\u0026gt; subtotal * element); "},{"id":21,"href":"/docs/intro/sections/board_game/","title":"Board game","section":"This course","content":" Board game # In order to follow this course, you will need to play one of the two following video games:\nMight \u0026amp; Magic: Clash of Heroes, or Legend of Solgard. These two games have nearly identical mechanics. So by default, we will refer to them as a unique game (e.g. when we write \u0026ldquo;this game\u0026rdquo; or \u0026ldquo;our board game\u0026rdquo;).\nWhy this game # Turn-based board games (like chess, go, checkers, etc.) are traditionally a good playground to learn the basics of algorithmic thinking.\n**_Disclaimer._** This course is _not_ about video game development, but general-purpose programming. This game will only serve as _didactic support_. Precisely, this game will serve two purposes:\nwe will use it as a running example throughout the lectures, and students can choose to implement (their own version of) this game as their group project. By default, we will focus on the two player variant, where both players play by the same rules. These two players may be humans and/or bots.\nHow long to play # Students only need to play long enough to understand the basic mechanics of the game.\n1.5 to 2 hours should be sufficient.\n**_Warning._** In both games, mechanics are introduced gradually, so it is difficult to get a full overview by playing less than an hour. Which game to choose # Might and Magic clash of heroes (MMCoH) # This game was initially released in 2009 for Nintendo DS. It has then been ported to PC and several consoles, as well as Android and iOS.\nA free demo was available on Steam until July 2023. The game has been re-released since, by another editor. As a result, the demo is not available on Steam anymore.\nThe Android and iOS versions have also been removed from the Google Play store and App store respectively.\n**_Advantages._** - The mechanics of this game may be easier to understand (in a short amount of time). - The default mode is the (symmetric) 2 player mode (player vs bot or player vs player) that we will work on. **_Drawbacks._** - The touch-screen interface on Android and iOS is arguably dated. Legend of Solgard # This game was released in 2016 for Android and iOS. It is still available on the Google Play store and the App store.\nIt is free to play, with optional microtransactions (via so-called loot boxes).\n**_Warning._** For this course, _no_ transaction is needed. **_Advantages._** - Animations can be sped up. - The touch-screen interface is more modern than the one of MMCoH for Android and iOS. **_Drawbacks._** - Progression is based on a (complex) system of virtual currencies, which adds noise to the interface. - The game can only be played (for free) a limited amount of time per day (approximately 45 min). - The default mode is _not_ the (symmetric) 2 players mode that we will work on (it requires more playtime to be unlocked). So an extra effort of imagination may be needed. "},{"id":22,"href":"/docs/unittests/sections/junit/","title":"in Java","section":"Unit tests","content":" Unit tests in Java # Several frameworks are available in Java for unit tests. Popular frameworks include:\nJUnit 4 JUnit 5 TestNG Spock In this section, we focus on Junit 5.\nInstall Junit 5 with Maven # Junit 5 can be used in a Maven project by declaring the following dependency and plugin\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.10.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; For the latest versions, search Maven Central.\nDirectory layout # Maven # Recall that in a Maven project, by default:\nsource code for unit tests is located in the directory src/test/java, resources for unit tests (e.g. data) are located in the directory src/test/resources. Note. You can create sub-directories (in these directories) to organize your tests and resources.\nGradle # Junit 5 can be used with Gradle in a similar way, but the directories for unit tests and related resources and (usually) specified manually.\nHint. If you chose the board game as your project, then you can write JUnit 5 tests under core/src/test/java. You will also find (dummy) unit tests in the directory core/src/test/java/dummy.\nWriting unit tests # With Maven, any (public or protected) Java class in src/test/java (or a subdirectory) can contain JUnit tests.\nA Junit 5 test is a (public or protected) instance method :\nwith void return type, annotated with org.junit.jupiter.api.Test. In addition, the method usually contains one or several calls to static methods of JUnit\u0026rsquo;s Assertions class, like assertEquals or assertThrows. The test succeeds iff all these calls return true.\nFor instance, the following class contains a single (successful) test:\nimport org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class MyTests { @Test void myTest(){ String myString = \u0026#34;foo\u0026#34;; assertEquals(true, myString.contains(\u0026#34;oo\u0026#34;)); } } Warning. The method assertEquals takes the expected value as first argument, and the actual one as second argument. This has an incidence on logs in case of test failure (\u0026ldquo;expected\u0026rdquo; : XXX, \u0026ldquo;actual: \u0026ldquo;YYY\u0026rdquo;);\nHint. A string can be passed to assertEquals as third argument, in order to display an additional message in case of failure.\nHint. Most methods of the class Assertions are syntactic sugar (thus not strictly necessary). For instance\nassertTrue(\u0026lt;myExpression\u0026gt;) is a shortcut for\nassertEquals(true, \u0026lt;myExpression\u0026gt;) Warning. By default, the execution of a test method is interrupted as soon as an assertion fails. So following instructions (for instance other assertions) will not be executed.\nChecking exceptions # The assertion assertThrows allows checking whether the execution of a piece of code method throws an exception of a given type. For instance the following unit test succeeds:\n@Test void testException(){ assertThrows( ArithmeticException.class, () -\u0026gt; { int x = 2 / 0; } ); } Prior and/or subsequent code # The annotation @BeforeAll (resp. @AfterAll) can be used to indicate that a (static) method must be executed (only once) before (resp. after) all unit tests in the class, regardless of test successes or failures. This can be used for costly operations, or for opening (resp. closing) a resource, like an connection or an input (resp. output) stream. For instance\nimport org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test; import java.sql.Connection; public class SQLTests { Connection myConnection; @BeforeAll static void openConnection(){ ... } @Test void test1(){ ... } @Test void test2(){ ... } @AfterAll static void closeConnection(){ ... } } Similarly the annotation @BeforeEach (resp. @AfterEach) can be used to indicate that a method must be executed before (resp. after) each unit test in the class. This can be convenient to avoid copy-pasting code. For instance\nimport org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; public class BoardgameTests { Snapshot testSnapshot; @BeforeEach void createTestSnapshot(){ testSnapshot = new DummySnapshot(); } @Test void test1(){ ... } @Test void test2(){ ... } } Disabling tests # A unit test can be disabled with the annotation @Disabled. As a result, it will be ignored by Maven, Gradle, and (to some extent) your IDE. For instance:\nimport org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; public class MyTests { @Test @Disabled void test1(){ ... } @Test void test2(){ ... } } Running unit tests # from the command line # For a Maven project, the command\nmvn test executes all phases that precede the test phase (e.g. compile and test-compile) in Maven\u0026rsquo;s default lifecycle, and then executes all unit tests under src/test/java.\nNote. The source code of unit tests (and related resources) is by default excluded form the output of the package phase (e.g. from the jar produced by Maven).\nNote. A unit test failure will prevent execution of Maven phases that are posterior to test. For instance\nmvn package does not produce the expected jar if a test fails.\nHowever, if needed, it is possible to execute a posterior Maven phase while skipping the unit tests, with the option -DskipTests. For instance:\nmvn package -DskipTests within an IDE # IDEs provide several ways to run unit tests, either:\nin isolation, or all tests within a class, or all tests within a package (including subpackages). For instance, with IntelliJ:\nclick on the green arrow to run a single unit test, click on the double green arrow to run all unit tests defined in the current class, right click on a folder and select \u0026ldquo;Run Tests\u0026rdquo; to run all tests in this package. Note. Within an IDE, a unit test can (and most often should) be run in debug mode. For instance, with IntelliJ, right-click on the green arrow and select \u0026lsquo;Debug\u0026rsquo;.\n"},{"id":23,"href":"/docs/stream/sections/numeric/","title":"Numeric stream","section":"Streams in Java","content":" Numeric stream # In addition to the interface Stream, Java 8 introduced the interface IntStream (resp. DoubleStream, LongStream) that represents a stream of (unboxed) int (resp. long, double).\nIt provides operations that are not available in Stream\u0026lt;Integer\u0026gt; (resp. Streanm\u0026lt;Double\u0026gt;, Stream\u0026lt;Long\u0026gt;).\nWarning. The interface IntStream (resp. DoubleStream, LongStream) does not extend the interface Stream.\nConversion # A instance of Stream\u0026lt;$T$\u0026gt; can be converted to an instance of IntStream (resp. DoubleStream, LongStream) with the instance method Stream.mapToInt.\nThis method takes as argument a callback method of type\n$\\qquad T \\to$ int\nthat converts each element of the stream to an int.\nExample.\nThe following method converts a list of cities into an IntStream that contains their zip codes.\nIntStream extractZipCodes(List\u0026lt;City\u0026gt; cities){ return cities.stream() .mapToInt(c -\u0026gt; c.zipCode); } Operations # Numeric streams provide operations that are not available in standard streams, such as sum and average.\n"},{"id":24,"href":"/docs/intro/sections/bibliography/","title":"Additional resources","section":"This course","content":" Additional resources # You can use additional resource to solve the assignments or develop your project: web sites, IDE generated code, Copilot, et. However, make sure that you understand the code that you submit.\nJava\u0026rsquo;s syntax # This website contains Java code snippets that illustrate how to perform certain operations. However, this documentation is far from exhaustive (on purpose).\nWhen it comes to syntax, the first two sources of complementary material for this course are:\nthe Javadoc of the libraries (standard and auxiliary) used in projects and assignments. An IDE is often the fastest way to navigate through it, the web. Books # An (optional) reading list for this course is available in the catalogue of the Unibz\u0026rsquo;s library. All books can be accessed via the library (either physically or digitally).\nAmong these books, we highlight the following three:\nIntroductory textbooks # Java : the complete reference (11th edition) by Herbert Schildt McGraw-Hill Education, 2019\nThis is a general introductory book to Java and object oriented programming. It covers most of the topics seen in this course (and a lot more).\nHead First Java (3rd edition) by Kathy Sierra, Bert Bates and Trisha Gee O\u0026rsquo;Reilly Media, 2022\nThis is an alternative introductory book, less comprehensive, but with a larger emphasis on problem solving (rather than syntax).\nGood practices (intermediate level) # Effective Java (3rd edition)\nby Joshua Bloch\nAddison-Wesley Professional, 2017\nThis is a reference book for best practices and common pitfalls when programming in Java.\n"},{"id":25,"href":"/docs/stream/sections/order/","title":"Multithreading and order","section":"Streams in Java","content":" Multithreading and order # Multithreading # We can allow a whole stream pipeline to be executed in a concurrent or parallel fashion, for instance with the instance method Stream.parallel, as follows:\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(1, 2, 3); // Contains [3,4,5] List\u0026lt;Integer\u0026gt; ouputList = list.stream() .parallel() .map(i -\u0026gt; i + 2) .toList(); This allows the JVM to take advantage of available resources to execute operations (like the map operation in this example) in several threads, concurrently.\nOrder # From the Javadoc of the package java.util.stream, if the source of a stream is ordered (e.g. a List), then the effect of an operation on the stream is usually predictable.\nIndeed, most operations are constrained to operate on the elements in their \u0026ldquo;encounter order\u0026rdquo;. For instance, if the source of a stream is a List containing [1, 2, 3], then the result of executing map(x -\u0026gt; x * 2) must be [2, 4, 6].\nHowever, in some cases, the terminal operation forEach may ignore the encounter order. If the stream is executed sequentially (which is the case by default), then this usually has no effect on execution. But if the stream is executed in parallel, then this is likely to affect the output.\nIn such a case, the terminal operation forEachOrdered may be used instead of forEach, in order to force this operation to respect the encounter order.\nExample.\nList\u0026lt;Integer\u0026gt;list = List.of(1, 2, 3); // Must output `2` `4` and `6, in this order. list.stream() .parallel() .map(x -\u0026gt; x * 2) .forEachOrdered(System.out::println); Besides, it is possible to relax the ordering constraint with the instance method Stream.unordered(). This may improve performance for pipelines with costly operations, in scenarios where the order of processing is irrelevant.\nExample. In this example, the order in which the elements of the stream are processed is irrelevant because:\nthe map applies a pure function, and the stream is collected as a set. This is why calling the unordered method is safe.\nList\u0026lt;MyClass\u0026gt;list = getList(); list.stream() .parallel() .unordered() .map(o -\u0026gt; expensivePureFunction(o)) .collect(Collectors.toSet()); "},{"id":26,"href":"/docs/stream/sections/optional/","title":"Optional","section":"Streams in Java","content":" Optional # The class Optional was introduced in Java 8. An Optional is a container object that may or may not contain a value. Its main purpose is to indicate that the object returned by a function may be null.\nExample. In our game, the interface Board provides a method getUnit(int rowIndex, int columnIndex), that returns the unit standing on the tile with these coordinates, if any.\nThis could be implemented with a method\n$\\qquad$ Unit getUnit(int rowIndex, int columnIndex)\nthat returns null if there is no unit on this tile (and returns the unit otherwise).\nHowever, from the signature of this method, it is not immediately clear that the returned unit may be null. This may cause a NullPointerException at runtime, if the method is called by some program that does not check whether this unit is null.\nInstead, we can use\n$\\qquad$ Optional\u0026lt;Unit\u0026gt; getUnit(int rowIndex, columnIndex)\nto clearly indicate that the return value may not be present.\nSyntax # Declaring an empty Optional # An empty Optional can be initialized with the static method Optional.empty().\nExample.\nOptional\u0026lt;Unit\u0026gt; unit = Optional.empty(); Setting an Optional\u0026rsquo;s value # The value of an Optional can be set with the static method Optional.of.\nExample.\nOptional\u0026lt;Unit\u0026gt; unicorn = Optional.of(new Unicorn(\u0026#34;green\u0026#34;)); Getting an Optional\u0026rsquo;s value # Whether an Optional has a value can be checked with the instance method Optional.isPresent(), and the value (if present) can be retrieved with the instance method Optional.get().\nExample.\nOptional\u0026lt;Unit\u0026gt; unit = board.getUnit(rowIndex, columnIndex); if(unit.isPresent()){ unit.get().boost(); } The instance method Optional.ifPresent can be used (as an alternative) for the same purpose.\nIf the optional object has type Optional\u0026lt;$T$\u0026gt;, then ifPresent takes as argument a callback method with type\n$\\qquad T \\to$ void\n(a.k.a. a Java Consumer) that is executed iff the Optional is nonempty.\nExample.\nOptional\u0026lt;Unit\u0026gt; unit = board.getUnit(rowIndex, columnIndex); unit.ifPresent(u -\u0026gt; u.boost()); Primitive types # Java 8 also introduced the container OptionalInt (resp. OptionalLong, OptionalDouble), which behaves analogously to Optional\u0026lt;Integer\u0026gt; (resp. Optional\u0026lt;Long\u0026gt;, Optional\u0026lt;Double\u0026gt;), but contains an int (resp. long, double). It is mostly used in combination with IntStream (resp. LongStream, DoubleStream).\nOptional and streams # Some methods of the interface Stream\u0026lt;$T$\u0026gt; (resp. IntStream, LongStream, DoubleStream) return an Optional\u0026lt;$T$\u0026gt; (resp.OptionalInt, OptionalLong, OptionalDouble).\nIn particular:\nfindFirst average, max and min etc. "}]