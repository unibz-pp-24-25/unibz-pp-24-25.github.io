<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/recursion/</link>
    <description>Recent content in Recursion on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/recursion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear recursion</title>
      <link>https://unibz-pp-24-25.github.io/docs/recursion/sections/linear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/recursion/sections/linear/</guid>
      <description>&lt;h1 id=&#34;linear-recursion&#34;&gt;&#xA;  Linear recursion&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linear-recursion&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A recursive method is &lt;strong&gt;linear recursive&lt;/strong&gt; if it performs at most &lt;em&gt;one&lt;/em&gt; recursive call each time it is executed.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Terminology.&lt;/em&gt;&lt;/strong&gt;&#xA;The term &lt;strong&gt;unary recursion&lt;/strong&gt; is sometimes used to refer to linear recursive algorithms (as opposed to &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/recursion/sections/nary/&#34;&gt;n-ary recursion&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hint.&lt;/em&gt;&lt;/strong&gt;&#xA;A linear recursive algorithm is often easy to transform into an iterative one (i.e. an algorithm that uses only loops).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-tabs&#34;&gt;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-exercise_array_linearRec&#34; id=&#34;tabs-exercise_array_linearRec-0&#34; checked=&#34;checked&#34; /&gt;&#xA;&lt;label for=&#34;tabs-exercise_array_linearRec-0&#34;&gt;Exercise&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;p&gt;Write in pseudocode a (linear) recursive algorithm for a method &lt;code&gt;int occ(char[] A, char c)&lt;/code&gt; that:&lt;/p&gt;</description>
    </item>
    <item>
      <title>N-ary recursion</title>
      <link>https://unibz-pp-24-25.github.io/docs/recursion/sections/nary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/recursion/sections/nary/</guid>
      <description>&lt;h1 id=&#34;n-ary-recursion&#34;&gt;&#xA;  N-ary recursion&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#n-ary-recursion&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Definition.&lt;/em&gt;&lt;/strong&gt;&#xA;A recursive method that is &lt;em&gt;not&lt;/em&gt; linear recursive uses &lt;strong&gt;n-ary recursion&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Specific cases include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;binary recursion&lt;/strong&gt; if a method performs &lt;em&gt;up to&lt;/em&gt; two recursive calls each time it is executed,&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ternary recursion&lt;/strong&gt; if it performs &lt;em&gt;up to&lt;/em&gt; three recursive calls each time it is executed,&lt;/li&gt;&#xA;&lt;li&gt;etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Examples.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;The algorithm seen &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/recursion/#printFiles&#34;&gt;earlier&lt;/a&gt; to print all files in a folder uses n-ary recursion.&lt;/p&gt;&#xA;&lt;p&gt;All the binary tree algorithms seen &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/recursion/#binaryTrees&#34;&gt;earlier&lt;/a&gt; use binary recursion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Correctness</title>
      <link>https://unibz-pp-24-25.github.io/docs/recursion/sections/correctness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/recursion/sections/correctness/</guid>
      <description>&lt;h1 id=&#34;correctness&#34;&gt;&#xA;  Correctness&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#correctness&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;To check whether a recursive method is correct, it is (usually) sufficient to check that the two following two properties hold:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;(Base case(s)).&lt;/em&gt;&lt;/strong&gt; The method is correct for the smallest possible inputs.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;(Inductive case).&lt;/em&gt;&lt;/strong&gt; For an arbitrary $n$:&lt;/p&gt;&#xA;&lt;p&gt;$\qquad\qquad$ &lt;em&gt;if&lt;/em&gt; the method is correct for all inputs of size $\leq n$, &lt;em&gt;then&lt;/em&gt; it is correct for all inputs of size $n+1$.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt;&#xA;Consider the algorithm seen &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/recursion/#binaryTrees&#34;&gt;earlier&lt;/a&gt; to compute the sum of all nodes in a binary tree, if nodes are instance of the following class:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
