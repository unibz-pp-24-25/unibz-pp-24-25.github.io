<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects and classes on Programming project 2024-25</title>
    <link>https://unibz-pp-24-25.github.io/docs/objects/</link>
    <description>Recent content in Objects and classes on Programming project 2024-25</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-24-25.github.io/docs/objects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objects</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/objects/</guid>
      <description>&lt;h1 id=&#34;objects&#34;&gt;&#xA;  Objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;An object groups data in a meaningful way.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-simple-example-json-objects&#34;&gt;&#xA;  A simple example: JSON objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#a-simple-example-json-objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Here is a JSON object (in Javascript syntax) that describes the city of Florence:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Florence&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;zipCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50100&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A JSON object may contain other objects, as well as arrays (of values, objects or arrays).&#xA;For instance:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;birthPlace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Florence&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;zipCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50100&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;employer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kolping&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;employer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Eurac&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;In JSON:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Class and instance</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/classes/</guid>
      <description>&lt;h1 id=&#34;class-and-instance&#34;&gt;&#xA;  Class and instance&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#class-and-instance&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A &lt;strong&gt;class&lt;/strong&gt; can be viewed as a &lt;em&gt;blueprint&lt;/em&gt; for a set of similar objects.&lt;/p&gt;&#xA;&lt;p&gt;For instance, consider the two objects:&lt;/p&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Florence&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;zipCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50100&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;region&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuscany&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rome&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;zipCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00100&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;region&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lazio&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Each of these objects describes a city, and they share the same keys (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;zipCode&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt;).&#xA;A possible class for these two objects may enforce this structure, and it could be named &lt;code&gt;City&lt;/code&gt;.&#xA;An object that follows this blueprint is called an &lt;strong&gt;instance&lt;/strong&gt; of this class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/inheritance/</guid>
      <description>&lt;h1 id=&#34;inheritance&#34;&gt;&#xA;  Inheritance&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inheritance&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;subclass&#34;&gt;&#xA;  Subclass&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#subclass&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;In most (class-based) object-oriented languages, a class $A$ can &lt;strong&gt;extend&lt;/strong&gt; another class $B$.&#xA;In this case, $A$ is called a &lt;strong&gt;subclass&lt;/strong&gt; of $B$.&lt;/p&gt;&#xA;&lt;p&gt;The intuitive meaning is inclusion ($\subseteq$) between their respective sets of instances, i.e. every instance of $A$ is also an instance of $B$ (but the converse may not hold).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This can be paraphrased in English by &amp;ldquo;every $A$ is a $B$&amp;rdquo;.&#xA;For instance:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instance methods</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/methods/</guid>
      <description>&lt;h1 id=&#34;instance-methods&#34;&gt;&#xA;  Instance methods&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#instance-methods&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In many object-oriented languages (like Java), methods are implemented within class declarations.&lt;/p&gt;&#xA;&lt;p&gt;An &lt;strong&gt;instance method&lt;/strong&gt; is called using an instance of the class where the method is declared.&lt;/p&gt;&#xA;&lt;p&gt;For instance, in Java, consider an instance method &lt;code&gt;myMethod()&lt;/code&gt; declared in a class &lt;code&gt;MyClass&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myMethod&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method can be called by appending &lt;code&gt;.&lt;/code&gt; to a variable &lt;code&gt;myVar&lt;/code&gt; of type &lt;code&gt;MyClass&lt;/code&gt;, as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Displaying objects</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/tostring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/tostring/</guid>
      <description>&lt;h1 id=&#34;displaying-objects&#34;&gt;&#xA;  Displaying objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#displaying-objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-class-object&#34;&gt;&#xA;  The class &lt;code&gt;Object&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-class-object&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;Java has a native class called &lt;code&gt;Object&lt;/code&gt; with &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html&#34;&gt;11 instance methods&lt;/a&gt;.&#xA;Every Java class implicitly extends &lt;code&gt;Object&lt;/code&gt;, &lt;em&gt;including user-defined classes&lt;/em&gt;.&#xA;Therefore any Java class &lt;em&gt;inherits&lt;/em&gt; these methods.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;the-method-tostring&#34;&gt;&#xA;  The method &lt;code&gt;toString&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-method-tostring&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html#toString%28%29&#34;&gt;toString&lt;/a&gt; is one of the methods of the class &lt;code&gt;Object&lt;/code&gt;.&#xA;Here is (part of) its specification:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** Returns a string representation of the object.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * In general, the toString method returns a string that &amp;#34;textually represents&amp;#34; this object.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the preferred way to display information about an object.&#xA;For instance, the debugger of your IDE probably relies on this method to display a string that represents an object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cast and equality</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/comparing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/comparing/</guid>
      <description>&lt;h1 id=&#34;cast-and-equality&#34;&gt;&#xA;  Cast and Equality&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cast-and-equality&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cast&#34;&gt;&#xA;  Cast&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;Java (as well as C# and C++) provides mechanisms to change the type associated with an object $o$, using&#xA;either a &lt;em&gt;supertype&lt;/em&gt; of $o$ (this is an &lt;strong&gt;upcast&lt;/strong&gt;),&#xA;or a &lt;em&gt;subtype&lt;/em&gt; of $o$ (this is a &lt;strong&gt;downcast&lt;/strong&gt;).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;upcast&#34;&gt;&#xA;  Upcast&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#upcast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Explicit&lt;/em&gt; upcasts are uncommon, but may still be useful in some scenarios, e.g. to &lt;a href=&#34;https://stackoverflow.com/questions/5361999/whats-the-need-to-use-upcasting-in-java&#34;&gt;disambiguate two method calls&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Implicit&lt;/em&gt; upcasts on the other hand are very frequent, when the type of an object cannot be determined at compile time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Classes as objects</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/classesasobjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/classesasobjects/</guid>
      <description>&lt;h1 id=&#34;classes-as-objects&#34;&gt;&#xA;  Classes as objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#classes-as-objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Some object-oriented languages (like Java, C# or C++) provide ways to access or manipulate classes (almost) as if they were objects.&lt;/p&gt;&#xA;&lt;h2 id=&#34;static-attributes-and-methods&#34;&gt;&#xA;  Static attributes and methods&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#static-attributes-and-methods&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;staticAttributes&#34;&gt;&#xA;  Static attributes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#staticAttributes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;Java (as well as C# and C++) supports attributes that do not belong to a specific instance, but to a &lt;em&gt;class&lt;/em&gt; instead.&#xA;These are often called &lt;strong&gt;static attributes&lt;/strong&gt; (or sometimes &lt;strong&gt;class attributes&lt;/strong&gt; or &lt;strong&gt;class variables&lt;/strong&gt;),&#xA;as opposed to the attributes that we have seen so far, called &lt;strong&gt;instance attributes&lt;/strong&gt; (or &lt;strong&gt;member variables&lt;/strong&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quasi-objects</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/quasi-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/quasi-objects/</guid>
      <description>&lt;h1 id=&#34;quasi-objects&#34;&gt;&#xA;  Quasi-objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quasi-objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;enumerated-types&#34;&gt;&#xA;  Enumerated types&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#enumerated-types&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Most imperative languages allow the creation of so-called &lt;strong&gt;enumerated types&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;An enumerated type is a datatype for a finite set or enumerated values.&#xA;For instance, if our game only allows &amp;ldquo;blue&amp;rdquo;, &amp;ldquo;green&amp;rdquo; and &amp;ldquo;red&amp;rdquo; as unit colors, then we may create a dedicated type that only allows these three values.&lt;/p&gt;&#xA;&lt;h3 id=&#34;in-java&#34;&gt;&#xA;  In Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#in-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;An enumerated type in Java is a set of constants.&#xA;These constants are effectively &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/objects/sections/classesasobjects/#staticAttributes&#34;&gt;static&lt;/a&gt;,&#xA;meaning that they depends on the class (or interface) where the enumerated type is declared (similarly to a &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/objects/sections/classesasobjects/#staticAttributes&#34;&gt;static attribute&lt;/a&gt;).&#xA;The &lt;em&gt;name&lt;/em&gt; of an enumerated type can generally be used like a regular reference type.&#xA;For instance&lt;/p&gt;</description>
    </item>
    <item>
      <title>Duplicating objects</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/clone/</guid>
      <description>&lt;h1 id=&#34;duplicating-objects&#34;&gt;&#xA;  Duplicating objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#duplicating-objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In some scenarios, it may be useful to duplicate an object.&lt;/p&gt;&#xA;&lt;p&gt;In Java, as we saw earlier, copying the value of a variable with reference type does &lt;em&gt;not&lt;/em&gt; copy the object that it references.&#xA;For instance, the following program outputs &amp;ldquo;yellow&amp;rdquo;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unicorn unicorn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Unicorn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unicorn theSameUnicorn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unicorn;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unicorn.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(theSameUnicorn.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The need to duplicate objects may notably appear in a program that relies on &lt;em&gt;concurrency&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;book-tabs&#34;&gt;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-exercise_clone&#34; id=&#34;tabs-exercise_clone-0&#34; checked=&#34;checked&#34; /&gt;&#xA;&lt;label for=&#34;tabs-exercise_clone-0&#34;&gt;Exercise&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;p&gt;In our game, the &amp;ldquo;view&amp;rdquo; component is in charge of rendering the game visually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://unibz-pp-24-25.github.io/docs/objects/sections/encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-24-25.github.io/docs/objects/sections/encapsulation/</guid>
      <description>&lt;h1 id=&#34;encapsulation&#34;&gt;&#xA;  Encapsulation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#encapsulation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt; is a (vague) principle in object-oriented programming that refers to &lt;em&gt;&amp;ldquo;bundling&amp;rdquo;&lt;/em&gt; data with the code that operates on it, and &lt;em&gt;restrict visibility&lt;/em&gt; of this code and data from other components of a system.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_%28computer_programming%29&#34;&gt;Wikipedia&lt;/a&gt;:&#xA;&amp;ldquo;Essentially, encapsulation prevents external code from being concerned [&amp;hellip;]&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Each component hides its internal logic by exposing only data and methods that other components may need.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/strong&gt; As we saw &lt;a href=&#34;https://unibz-pp-24-25.github.io/docs/objects/sections/clone/&#34;&gt;earlier&lt;/a&gt;, in our game,&#xA;the &amp;ldquo;view&amp;rdquo; component (which is in charge of rendering the game on screen) may &lt;em&gt;buffer&lt;/em&gt; the game snapshots that it receives from the backend,&#xA;if these snapshots are received faster than they can be displayed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
